
Shirouq_Shawky_Final_Project_CONTROL_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002868  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  00800060  00002868  000028fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800178  00800178  00002a14  2**0
                  ALLOC
  3 .stab         0000297c  00000000  00000000  00002a14  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000171c  00000000  00000000  00005390  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00006aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  00006c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  00006e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  00009248  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  0000a5bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b798  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000b958  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000bc4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c619  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 d3 10 	jmp	0x21a6	; 0x21a6 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e6       	ldi	r30, 0x68	; 104
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 38       	cpi	r26, 0x8B	; 139
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 22 07 	call	0xe44	; 0xe44 <main>
      8a:	0c 94 32 14 	jmp	0x2864	; 0x2864 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 fb 13 	jmp	0x27f6	; 0x27f6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 17 14 	jmp	0x282e	; 0x282e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 07 14 	jmp	0x280e	; 0x280e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 23 14 	jmp	0x2846	; 0x2846 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 07 14 	jmp	0x280e	; 0x280e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 23 14 	jmp	0x2846	; 0x2846 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 fb 13 	jmp	0x27f6	; 0x27f6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 17 14 	jmp	0x282e	; 0x282e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 03 14 	jmp	0x2806	; 0x2806 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 1f 14 	jmp	0x283e	; 0x283e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 07 14 	jmp	0x280e	; 0x280e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 23 14 	jmp	0x2846	; 0x2846 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 07 14 	jmp	0x280e	; 0x280e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 23 14 	jmp	0x2846	; 0x2846 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 07 14 	jmp	0x280e	; 0x280e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 23 14 	jmp	0x2846	; 0x2846 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 04 14 	jmp	0x2808	; 0x2808 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 20 14 	jmp	0x2840	; 0x2840 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 0b 14 	jmp	0x2816	; 0x2816 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 27 14 	jmp	0x284e	; 0x284e <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	e8 59       	subi	r30, 0x98	; 152
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <Buzzer_init>:
#include"buzzer.h"
#include"gpio.h"
#include"std_types.h"

void Buzzer_init(void)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID,PIN_OUTPUT);
     e00:	82 e0       	ldi	r24, 0x02	; 2
     e02:	65 e0       	ldi	r22, 0x05	; 5
     e04:	41 e0       	ldi	r20, 0x01	; 1
     e06:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <GPIO_setupPinDirection>
	Buzzer_off();
     e0a:	0e 94 16 07 	call	0xe2c	; 0xe2c <Buzzer_off>

}
     e0e:	cf 91       	pop	r28
     e10:	df 91       	pop	r29
     e12:	08 95       	ret

00000e14 <Buzzer_on>:

/*Description:
 * Function to enable the Buzzer through the GPIO
 */
void Buzzer_on(void){
     e14:	df 93       	push	r29
     e16:	cf 93       	push	r28
     e18:	cd b7       	in	r28, 0x3d	; 61
     e1a:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
     e1c:	82 e0       	ldi	r24, 0x02	; 2
     e1e:	65 e0       	ldi	r22, 0x05	; 5
     e20:	41 e0       	ldi	r20, 0x01	; 1
     e22:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <GPIO_writePin>


}
     e26:	cf 91       	pop	r28
     e28:	df 91       	pop	r29
     e2a:	08 95       	ret

00000e2c <Buzzer_off>:


/*Description:
  * Function to disable the Buzzer through the GPIO
  */
void Buzzer_off(void){
     e2c:	df 93       	push	r29
     e2e:	cf 93       	push	r28
     e30:	cd b7       	in	r28, 0x3d	; 61
     e32:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
     e34:	82 e0       	ldi	r24, 0x02	; 2
     e36:	65 e0       	ldi	r22, 0x05	; 5
     e38:	40 e0       	ldi	r20, 0x00	; 0
     e3a:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <GPIO_writePin>

}
     e3e:	cf 91       	pop	r28
     e40:	df 91       	pop	r29
     e42:	08 95       	ret

00000e44 <main>:

/*******************************************************************************
*                      Functions Definitions                                   *
*******************************************************************************/

int main (void){
     e44:	df 93       	push	r29
     e46:	cf 93       	push	r28
     e48:	cd b7       	in	r28, 0x3d	; 61
     e4a:	de b7       	in	r29, 0x3e	; 62
     e4c:	a4 97       	sbiw	r28, 0x24	; 36
     e4e:	0f b6       	in	r0, 0x3f	; 63
     e50:	f8 94       	cli
     e52:	de bf       	out	0x3e, r29	; 62
     e54:	0f be       	out	0x3f, r0	; 63
     e56:	cd bf       	out	0x3d, r28	; 61
	sei();
     e58:	78 94       	sei
	UART_ConfigType UART_configuration = {BIT_DATA_8, DISABLE_PARITY, ONE_STOP_BIT, 9600 };
     e5a:	ce 01       	movw	r24, r28
     e5c:	01 96       	adiw	r24, 0x01	; 1
     e5e:	9f 8b       	std	Y+23, r25	; 0x17
     e60:	8e 8b       	std	Y+22, r24	; 0x16
     e62:	a1 e7       	ldi	r26, 0x71	; 113
     e64:	b1 e0       	ldi	r27, 0x01	; 1
     e66:	b9 8f       	std	Y+25, r27	; 0x19
     e68:	a8 8f       	std	Y+24, r26	; 0x18
     e6a:	b7 e0       	ldi	r27, 0x07	; 7
     e6c:	ba 8f       	std	Y+26, r27	; 0x1a
     e6e:	e8 8d       	ldd	r30, Y+24	; 0x18
     e70:	f9 8d       	ldd	r31, Y+25	; 0x19
     e72:	00 80       	ld	r0, Z
     e74:	88 8d       	ldd	r24, Y+24	; 0x18
     e76:	99 8d       	ldd	r25, Y+25	; 0x19
     e78:	01 96       	adiw	r24, 0x01	; 1
     e7a:	99 8f       	std	Y+25, r25	; 0x19
     e7c:	88 8f       	std	Y+24, r24	; 0x18
     e7e:	ae 89       	ldd	r26, Y+22	; 0x16
     e80:	bf 89       	ldd	r27, Y+23	; 0x17
     e82:	0c 92       	st	X, r0
     e84:	ee 89       	ldd	r30, Y+22	; 0x16
     e86:	ff 89       	ldd	r31, Y+23	; 0x17
     e88:	31 96       	adiw	r30, 0x01	; 1
     e8a:	ff 8b       	std	Y+23, r31	; 0x17
     e8c:	ee 8b       	std	Y+22, r30	; 0x16
     e8e:	fa 8d       	ldd	r31, Y+26	; 0x1a
     e90:	f1 50       	subi	r31, 0x01	; 1
     e92:	fa 8f       	std	Y+26, r31	; 0x1a
     e94:	8a 8d       	ldd	r24, Y+26	; 0x1a
     e96:	88 23       	and	r24, r24
     e98:	51 f7       	brne	.-44     	; 0xe6e <main+0x2a>
	UART_init(&UART_configuration);
     e9a:	ce 01       	movw	r24, r28
     e9c:	01 96       	adiw	r24, 0x01	; 1
     e9e:	0e 94 2d 12 	call	0x245a	; 0x245a <UART_init>

	TWI_BaudRate rate={TWI_F_CPU_CLOCK,2};
     ea2:	18 86       	std	Y+8, r1	; 0x08
     ea4:	82 e0       	ldi	r24, 0x02	; 2
     ea6:	89 87       	std	Y+9, r24	; 0x09
	TWI_ConfigType config={1,rate};
     ea8:	83 e0       	ldi	r24, 0x03	; 3
     eaa:	fe 01       	movw	r30, r28
     eac:	3a 96       	adiw	r30, 0x0a	; 10
     eae:	df 01       	movw	r26, r30
     eb0:	98 2f       	mov	r25, r24
     eb2:	1d 92       	st	X+, r1
     eb4:	9a 95       	dec	r25
     eb6:	e9 f7       	brne	.-6      	; 0xeb2 <main+0x6e>
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	8a 87       	std	Y+10, r24	; 0x0a
     ebc:	88 85       	ldd	r24, Y+8	; 0x08
     ebe:	99 85       	ldd	r25, Y+9	; 0x09
     ec0:	9c 87       	std	Y+12, r25	; 0x0c
     ec2:	8b 87       	std	Y+11, r24	; 0x0b
	TWI_init(&config);
     ec4:	ce 01       	movw	r24, r28
     ec6:	0a 96       	adiw	r24, 0x0a	; 10
     ec8:	0e 94 a0 11 	call	0x2340	; 0x2340 <TWI_init>

	Timer0_Config Timer0_config = { FAST_PWM_MODE,NON_INVERTING_MODE, TIMER0_F_CPU_CLOCK_8 };
     ecc:	de 01       	movw	r26, r28
     ece:	1d 96       	adiw	r26, 0x0d	; 13
     ed0:	bc 8f       	std	Y+28, r27	; 0x1c
     ed2:	ab 8f       	std	Y+27, r26	; 0x1b
     ed4:	ee e6       	ldi	r30, 0x6E	; 110
     ed6:	f1 e0       	ldi	r31, 0x01	; 1
     ed8:	fe 8f       	std	Y+30, r31	; 0x1e
     eda:	ed 8f       	std	Y+29, r30	; 0x1d
     edc:	f3 e0       	ldi	r31, 0x03	; 3
     ede:	ff 8f       	std	Y+31, r31	; 0x1f
     ee0:	ad 8d       	ldd	r26, Y+29	; 0x1d
     ee2:	be 8d       	ldd	r27, Y+30	; 0x1e
     ee4:	0c 90       	ld	r0, X
     ee6:	ed 8d       	ldd	r30, Y+29	; 0x1d
     ee8:	fe 8d       	ldd	r31, Y+30	; 0x1e
     eea:	31 96       	adiw	r30, 0x01	; 1
     eec:	fe 8f       	std	Y+30, r31	; 0x1e
     eee:	ed 8f       	std	Y+29, r30	; 0x1d
     ef0:	ab 8d       	ldd	r26, Y+27	; 0x1b
     ef2:	bc 8d       	ldd	r27, Y+28	; 0x1c
     ef4:	0c 92       	st	X, r0
     ef6:	eb 8d       	ldd	r30, Y+27	; 0x1b
     ef8:	fc 8d       	ldd	r31, Y+28	; 0x1c
     efa:	31 96       	adiw	r30, 0x01	; 1
     efc:	fc 8f       	std	Y+28, r31	; 0x1c
     efe:	eb 8f       	std	Y+27, r30	; 0x1b
     f00:	ff 8d       	ldd	r31, Y+31	; 0x1f
     f02:	f1 50       	subi	r31, 0x01	; 1
     f04:	ff 8f       	std	Y+31, r31	; 0x1f
     f06:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f08:	88 23       	and	r24, r24
     f0a:	51 f7       	brne	.-44     	; 0xee0 <main+0x9c>
	Timer0_init(&Timer0_config);
     f0c:	ce 01       	movw	r24, r28
     f0e:	0d 96       	adiw	r24, 0x0d	; 13
     f10:	0e 94 11 10 	call	0x2022	; 0x2022 <Timer0_init>

	Timer1_setCallBack(Callback);
     f14:	89 e5       	ldi	r24, 0x59	; 89
     f16:	9b e0       	ldi	r25, 0x0B	; 11
     f18:	0e 94 8e 11 	call	0x231c	; 0x231c <Timer1_setCallBack>
	Timer1_ConfigType Timer1_configuration ={ 0, 8000, F_CPU_CLOCK_1024, COMPARE_MODE };
     f1c:	de 01       	movw	r26, r28
     f1e:	50 96       	adiw	r26, 0x10	; 16
     f20:	b9 a3       	std	Y+33, r27	; 0x21
     f22:	a8 a3       	std	Y+32, r26	; 0x20
     f24:	e8 e6       	ldi	r30, 0x68	; 104
     f26:	f1 e0       	ldi	r31, 0x01	; 1
     f28:	fb a3       	std	Y+35, r31	; 0x23
     f2a:	ea a3       	std	Y+34, r30	; 0x22
     f2c:	f6 e0       	ldi	r31, 0x06	; 6
     f2e:	fc a3       	std	Y+36, r31	; 0x24
     f30:	aa a1       	ldd	r26, Y+34	; 0x22
     f32:	bb a1       	ldd	r27, Y+35	; 0x23
     f34:	0c 90       	ld	r0, X
     f36:	ea a1       	ldd	r30, Y+34	; 0x22
     f38:	fb a1       	ldd	r31, Y+35	; 0x23
     f3a:	31 96       	adiw	r30, 0x01	; 1
     f3c:	fb a3       	std	Y+35, r31	; 0x23
     f3e:	ea a3       	std	Y+34, r30	; 0x22
     f40:	a8 a1       	ldd	r26, Y+32	; 0x20
     f42:	b9 a1       	ldd	r27, Y+33	; 0x21
     f44:	0c 92       	st	X, r0
     f46:	e8 a1       	ldd	r30, Y+32	; 0x20
     f48:	f9 a1       	ldd	r31, Y+33	; 0x21
     f4a:	31 96       	adiw	r30, 0x01	; 1
     f4c:	f9 a3       	std	Y+33, r31	; 0x21
     f4e:	e8 a3       	std	Y+32, r30	; 0x20
     f50:	fc a1       	ldd	r31, Y+36	; 0x24
     f52:	f1 50       	subi	r31, 0x01	; 1
     f54:	fc a3       	std	Y+36, r31	; 0x24
     f56:	8c a1       	ldd	r24, Y+36	; 0x24
     f58:	88 23       	and	r24, r24
     f5a:	51 f7       	brne	.-44     	; 0xf30 <main+0xec>
	Timer1_init(&Timer1_configuration);
     f5c:	ce 01       	movw	r24, r28
     f5e:	40 96       	adiw	r24, 0x10	; 16
     f60:	0e 94 06 11 	call	0x220c	; 0x220c <Timer1_init>



	DcMotor_Init();
     f64:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <DcMotor_Init>
	Buzzer_init();
     f68:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <Buzzer_init>

	createNewPass();
     f6c:	0e 94 bb 07 	call	0xf76	; 0xf76 <createNewPass>
	while (1) {
			TakeOptions();
     f70:	0e 94 c1 09 	call	0x1382	; 0x1382 <TakeOptions>
     f74:	fd cf       	rjmp	.-6      	; 0xf70 <main+0x12c>

00000f76 <createNewPass>:
 * Description :
 * Function responsible for creating new passwords
 * take 2 password from user and heck wheather they are the same or not  .
 * if the are the same, Call a function to save password in EEPROM.
 */
void createNewPass(void) {
     f76:	0f 93       	push	r16
     f78:	1f 93       	push	r17
     f7a:	df 93       	push	r29
     f7c:	cf 93       	push	r28
     f7e:	cd b7       	in	r28, 0x3d	; 61
     f80:	de b7       	in	r29, 0x3e	; 62
     f82:	a2 97       	sbiw	r28, 0x22	; 34
     f84:	0f b6       	in	r0, 0x3f	; 63
     f86:	f8 94       	cli
     f88:	de bf       	out	0x3e, r29	; 62
     f8a:	0f be       	out	0x3f, r0	; 63
     f8c:	cd bf       	out	0x3d, r28	; 61
	// get the first password
	for (int i = 0; i < PASS_LENGTH; i++) {
     f8e:	1a a2       	std	Y+34, r1	; 0x22
     f90:	19 a2       	std	Y+33, r1	; 0x21
     f92:	7f c0       	rjmp	.+254    	; 0x1092 <createNewPass+0x11c>
		Password_1[i] = UART_recieveByte();
     f94:	09 a1       	ldd	r16, Y+33	; 0x21
     f96:	1a a1       	ldd	r17, Y+34	; 0x22
     f98:	0e 94 5e 13 	call	0x26bc	; 0x26bc <UART_recieveByte>
     f9c:	f8 01       	movw	r30, r16
     f9e:	e1 58       	subi	r30, 0x81	; 129
     fa0:	fe 4f       	sbci	r31, 0xFE	; 254
     fa2:	80 83       	st	Z, r24
     fa4:	80 e0       	ldi	r24, 0x00	; 0
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	a8 e4       	ldi	r26, 0x48	; 72
     faa:	b2 e4       	ldi	r27, 0x42	; 66
     fac:	89 8f       	std	Y+25, r24	; 0x19
     fae:	9a 8f       	std	Y+26, r25	; 0x1a
     fb0:	ab 8f       	std	Y+27, r26	; 0x1b
     fb2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fb4:	69 8d       	ldd	r22, Y+25	; 0x19
     fb6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fb8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fba:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fbc:	20 e0       	ldi	r18, 0x00	; 0
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	4a ef       	ldi	r20, 0xFA	; 250
     fc2:	54 e4       	ldi	r21, 0x44	; 68
     fc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fc8:	dc 01       	movw	r26, r24
     fca:	cb 01       	movw	r24, r22
     fcc:	8d 8b       	std	Y+21, r24	; 0x15
     fce:	9e 8b       	std	Y+22, r25	; 0x16
     fd0:	af 8b       	std	Y+23, r26	; 0x17
     fd2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     fd4:	6d 89       	ldd	r22, Y+21	; 0x15
     fd6:	7e 89       	ldd	r23, Y+22	; 0x16
     fd8:	8f 89       	ldd	r24, Y+23	; 0x17
     fda:	98 8d       	ldd	r25, Y+24	; 0x18
     fdc:	20 e0       	ldi	r18, 0x00	; 0
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	40 e8       	ldi	r20, 0x80	; 128
     fe2:	5f e3       	ldi	r21, 0x3F	; 63
     fe4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     fe8:	88 23       	and	r24, r24
     fea:	2c f4       	brge	.+10     	; 0xff6 <createNewPass+0x80>
		__ticks = 1;
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	9c 8b       	std	Y+20, r25	; 0x14
     ff2:	8b 8b       	std	Y+19, r24	; 0x13
     ff4:	3f c0       	rjmp	.+126    	; 0x1074 <createNewPass+0xfe>
	else if (__tmp > 65535)
     ff6:	6d 89       	ldd	r22, Y+21	; 0x15
     ff8:	7e 89       	ldd	r23, Y+22	; 0x16
     ffa:	8f 89       	ldd	r24, Y+23	; 0x17
     ffc:	98 8d       	ldd	r25, Y+24	; 0x18
     ffe:	20 e0       	ldi	r18, 0x00	; 0
    1000:	3f ef       	ldi	r19, 0xFF	; 255
    1002:	4f e7       	ldi	r20, 0x7F	; 127
    1004:	57 e4       	ldi	r21, 0x47	; 71
    1006:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    100a:	18 16       	cp	r1, r24
    100c:	4c f5       	brge	.+82     	; 0x1060 <createNewPass+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    100e:	69 8d       	ldd	r22, Y+25	; 0x19
    1010:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1012:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1014:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1016:	20 e0       	ldi	r18, 0x00	; 0
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	40 e2       	ldi	r20, 0x20	; 32
    101c:	51 e4       	ldi	r21, 0x41	; 65
    101e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1022:	dc 01       	movw	r26, r24
    1024:	cb 01       	movw	r24, r22
    1026:	bc 01       	movw	r22, r24
    1028:	cd 01       	movw	r24, r26
    102a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    102e:	dc 01       	movw	r26, r24
    1030:	cb 01       	movw	r24, r22
    1032:	9c 8b       	std	Y+20, r25	; 0x14
    1034:	8b 8b       	std	Y+19, r24	; 0x13
    1036:	0f c0       	rjmp	.+30     	; 0x1056 <createNewPass+0xe0>
    1038:	88 ec       	ldi	r24, 0xC8	; 200
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	9a 8b       	std	Y+18, r25	; 0x12
    103e:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1040:	89 89       	ldd	r24, Y+17	; 0x11
    1042:	9a 89       	ldd	r25, Y+18	; 0x12
    1044:	01 97       	sbiw	r24, 0x01	; 1
    1046:	f1 f7       	brne	.-4      	; 0x1044 <createNewPass+0xce>
    1048:	9a 8b       	std	Y+18, r25	; 0x12
    104a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    104c:	8b 89       	ldd	r24, Y+19	; 0x13
    104e:	9c 89       	ldd	r25, Y+20	; 0x14
    1050:	01 97       	sbiw	r24, 0x01	; 1
    1052:	9c 8b       	std	Y+20, r25	; 0x14
    1054:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1056:	8b 89       	ldd	r24, Y+19	; 0x13
    1058:	9c 89       	ldd	r25, Y+20	; 0x14
    105a:	00 97       	sbiw	r24, 0x00	; 0
    105c:	69 f7       	brne	.-38     	; 0x1038 <createNewPass+0xc2>
    105e:	14 c0       	rjmp	.+40     	; 0x1088 <createNewPass+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1060:	6d 89       	ldd	r22, Y+21	; 0x15
    1062:	7e 89       	ldd	r23, Y+22	; 0x16
    1064:	8f 89       	ldd	r24, Y+23	; 0x17
    1066:	98 8d       	ldd	r25, Y+24	; 0x18
    1068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    106c:	dc 01       	movw	r26, r24
    106e:	cb 01       	movw	r24, r22
    1070:	9c 8b       	std	Y+20, r25	; 0x14
    1072:	8b 8b       	std	Y+19, r24	; 0x13
    1074:	8b 89       	ldd	r24, Y+19	; 0x13
    1076:	9c 89       	ldd	r25, Y+20	; 0x14
    1078:	98 8b       	std	Y+16, r25	; 0x10
    107a:	8f 87       	std	Y+15, r24	; 0x0f
    107c:	8f 85       	ldd	r24, Y+15	; 0x0f
    107e:	98 89       	ldd	r25, Y+16	; 0x10
    1080:	01 97       	sbiw	r24, 0x01	; 1
    1082:	f1 f7       	brne	.-4      	; 0x1080 <createNewPass+0x10a>
    1084:	98 8b       	std	Y+16, r25	; 0x10
    1086:	8f 87       	std	Y+15, r24	; 0x0f
 * take 2 password from user and heck wheather they are the same or not  .
 * if the are the same, Call a function to save password in EEPROM.
 */
void createNewPass(void) {
	// get the first password
	for (int i = 0; i < PASS_LENGTH; i++) {
    1088:	89 a1       	ldd	r24, Y+33	; 0x21
    108a:	9a a1       	ldd	r25, Y+34	; 0x22
    108c:	01 96       	adiw	r24, 0x01	; 1
    108e:	9a a3       	std	Y+34, r25	; 0x22
    1090:	89 a3       	std	Y+33, r24	; 0x21
    1092:	89 a1       	ldd	r24, Y+33	; 0x21
    1094:	9a a1       	ldd	r25, Y+34	; 0x22
    1096:	85 30       	cpi	r24, 0x05	; 5
    1098:	91 05       	cpc	r25, r1
    109a:	0c f4       	brge	.+2      	; 0x109e <createNewPass+0x128>
    109c:	7b cf       	rjmp	.-266    	; 0xf94 <createNewPass+0x1e>
		Password_1[i] = UART_recieveByte();
		_delay_ms(UART_DELAY);
	}
	// get the second password
	for (int i = 0; i < PASS_LENGTH; i++) {
    109e:	18 a2       	std	Y+32, r1	; 0x20
    10a0:	1f 8e       	std	Y+31, r1	; 0x1f
    10a2:	7f c0       	rjmp	.+254    	; 0x11a2 <createNewPass+0x22c>
		Password_2[i] = UART_recieveByte();
    10a4:	0f 8d       	ldd	r16, Y+31	; 0x1f
    10a6:	18 a1       	ldd	r17, Y+32	; 0x20
    10a8:	0e 94 5e 13 	call	0x26bc	; 0x26bc <UART_recieveByte>
    10ac:	f8 01       	movw	r30, r16
    10ae:	ea 57       	subi	r30, 0x7A	; 122
    10b0:	fe 4f       	sbci	r31, 0xFE	; 254
    10b2:	80 83       	st	Z, r24
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	a8 e4       	ldi	r26, 0x48	; 72
    10ba:	b2 e4       	ldi	r27, 0x42	; 66
    10bc:	8b 87       	std	Y+11, r24	; 0x0b
    10be:	9c 87       	std	Y+12, r25	; 0x0c
    10c0:	ad 87       	std	Y+13, r26	; 0x0d
    10c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    10c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    10c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    10cc:	20 e0       	ldi	r18, 0x00	; 0
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	4a ef       	ldi	r20, 0xFA	; 250
    10d2:	54 e4       	ldi	r21, 0x44	; 68
    10d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10d8:	dc 01       	movw	r26, r24
    10da:	cb 01       	movw	r24, r22
    10dc:	8f 83       	std	Y+7, r24	; 0x07
    10de:	98 87       	std	Y+8, r25	; 0x08
    10e0:	a9 87       	std	Y+9, r26	; 0x09
    10e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10e4:	6f 81       	ldd	r22, Y+7	; 0x07
    10e6:	78 85       	ldd	r23, Y+8	; 0x08
    10e8:	89 85       	ldd	r24, Y+9	; 0x09
    10ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	40 e8       	ldi	r20, 0x80	; 128
    10f2:	5f e3       	ldi	r21, 0x3F	; 63
    10f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    10f8:	88 23       	and	r24, r24
    10fa:	2c f4       	brge	.+10     	; 0x1106 <createNewPass+0x190>
		__ticks = 1;
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	9e 83       	std	Y+6, r25	; 0x06
    1102:	8d 83       	std	Y+5, r24	; 0x05
    1104:	3f c0       	rjmp	.+126    	; 0x1184 <createNewPass+0x20e>
	else if (__tmp > 65535)
    1106:	6f 81       	ldd	r22, Y+7	; 0x07
    1108:	78 85       	ldd	r23, Y+8	; 0x08
    110a:	89 85       	ldd	r24, Y+9	; 0x09
    110c:	9a 85       	ldd	r25, Y+10	; 0x0a
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	3f ef       	ldi	r19, 0xFF	; 255
    1112:	4f e7       	ldi	r20, 0x7F	; 127
    1114:	57 e4       	ldi	r21, 0x47	; 71
    1116:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    111a:	18 16       	cp	r1, r24
    111c:	4c f5       	brge	.+82     	; 0x1170 <createNewPass+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    111e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1120:	7c 85       	ldd	r23, Y+12	; 0x0c
    1122:	8d 85       	ldd	r24, Y+13	; 0x0d
    1124:	9e 85       	ldd	r25, Y+14	; 0x0e
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	40 e2       	ldi	r20, 0x20	; 32
    112c:	51 e4       	ldi	r21, 0x41	; 65
    112e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1132:	dc 01       	movw	r26, r24
    1134:	cb 01       	movw	r24, r22
    1136:	bc 01       	movw	r22, r24
    1138:	cd 01       	movw	r24, r26
    113a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    113e:	dc 01       	movw	r26, r24
    1140:	cb 01       	movw	r24, r22
    1142:	9e 83       	std	Y+6, r25	; 0x06
    1144:	8d 83       	std	Y+5, r24	; 0x05
    1146:	0f c0       	rjmp	.+30     	; 0x1166 <createNewPass+0x1f0>
    1148:	88 ec       	ldi	r24, 0xC8	; 200
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	9c 83       	std	Y+4, r25	; 0x04
    114e:	8b 83       	std	Y+3, r24	; 0x03
    1150:	8b 81       	ldd	r24, Y+3	; 0x03
    1152:	9c 81       	ldd	r25, Y+4	; 0x04
    1154:	01 97       	sbiw	r24, 0x01	; 1
    1156:	f1 f7       	brne	.-4      	; 0x1154 <createNewPass+0x1de>
    1158:	9c 83       	std	Y+4, r25	; 0x04
    115a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    115c:	8d 81       	ldd	r24, Y+5	; 0x05
    115e:	9e 81       	ldd	r25, Y+6	; 0x06
    1160:	01 97       	sbiw	r24, 0x01	; 1
    1162:	9e 83       	std	Y+6, r25	; 0x06
    1164:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1166:	8d 81       	ldd	r24, Y+5	; 0x05
    1168:	9e 81       	ldd	r25, Y+6	; 0x06
    116a:	00 97       	sbiw	r24, 0x00	; 0
    116c:	69 f7       	brne	.-38     	; 0x1148 <createNewPass+0x1d2>
    116e:	14 c0       	rjmp	.+40     	; 0x1198 <createNewPass+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1170:	6f 81       	ldd	r22, Y+7	; 0x07
    1172:	78 85       	ldd	r23, Y+8	; 0x08
    1174:	89 85       	ldd	r24, Y+9	; 0x09
    1176:	9a 85       	ldd	r25, Y+10	; 0x0a
    1178:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    117c:	dc 01       	movw	r26, r24
    117e:	cb 01       	movw	r24, r22
    1180:	9e 83       	std	Y+6, r25	; 0x06
    1182:	8d 83       	std	Y+5, r24	; 0x05
    1184:	8d 81       	ldd	r24, Y+5	; 0x05
    1186:	9e 81       	ldd	r25, Y+6	; 0x06
    1188:	9a 83       	std	Y+2, r25	; 0x02
    118a:	89 83       	std	Y+1, r24	; 0x01
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	9a 81       	ldd	r25, Y+2	; 0x02
    1190:	01 97       	sbiw	r24, 0x01	; 1
    1192:	f1 f7       	brne	.-4      	; 0x1190 <createNewPass+0x21a>
    1194:	9a 83       	std	Y+2, r25	; 0x02
    1196:	89 83       	std	Y+1, r24	; 0x01
	for (int i = 0; i < PASS_LENGTH; i++) {
		Password_1[i] = UART_recieveByte();
		_delay_ms(UART_DELAY);
	}
	// get the second password
	for (int i = 0; i < PASS_LENGTH; i++) {
    1198:	8f 8d       	ldd	r24, Y+31	; 0x1f
    119a:	98 a1       	ldd	r25, Y+32	; 0x20
    119c:	01 96       	adiw	r24, 0x01	; 1
    119e:	98 a3       	std	Y+32, r25	; 0x20
    11a0:	8f 8f       	std	Y+31, r24	; 0x1f
    11a2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    11a4:	98 a1       	ldd	r25, Y+32	; 0x20
    11a6:	85 30       	cpi	r24, 0x05	; 5
    11a8:	91 05       	cpc	r25, r1
    11aa:	0c f4       	brge	.+2      	; 0x11ae <createNewPass+0x238>
    11ac:	7b cf       	rjmp	.-266    	; 0x10a4 <createNewPass+0x12e>
		Password_2[i] = UART_recieveByte();
		_delay_ms(UART_DELAY);
	}
	flag = 1;
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	80 93 84 01 	sts	0x0184, r24
// check the equality of the second and the first passwords
	for (int i = 0; i < PASS_LENGTH; i++) {
    11b4:	1e 8e       	std	Y+30, r1	; 0x1e
    11b6:	1d 8e       	std	Y+29, r1	; 0x1d
    11b8:	15 c0       	rjmp	.+42     	; 0x11e4 <createNewPass+0x26e>
		if (Password_1[i] != Password_2[i]) {
    11ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11bc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11be:	fc 01       	movw	r30, r24
    11c0:	e1 58       	subi	r30, 0x81	; 129
    11c2:	fe 4f       	sbci	r31, 0xFE	; 254
    11c4:	20 81       	ld	r18, Z
    11c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11ca:	fc 01       	movw	r30, r24
    11cc:	ea 57       	subi	r30, 0x7A	; 122
    11ce:	fe 4f       	sbci	r31, 0xFE	; 254
    11d0:	80 81       	ld	r24, Z
    11d2:	28 17       	cp	r18, r24
    11d4:	11 f0       	breq	.+4      	; 0x11da <createNewPass+0x264>
			flag = 0;
    11d6:	10 92 84 01 	sts	0x0184, r1
		Password_2[i] = UART_recieveByte();
		_delay_ms(UART_DELAY);
	}
	flag = 1;
// check the equality of the second and the first passwords
	for (int i = 0; i < PASS_LENGTH; i++) {
    11da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11dc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11de:	01 96       	adiw	r24, 0x01	; 1
    11e0:	9e 8f       	std	Y+30, r25	; 0x1e
    11e2:	8d 8f       	std	Y+29, r24	; 0x1d
    11e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11e6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11e8:	85 30       	cpi	r24, 0x05	; 5
    11ea:	91 05       	cpc	r25, r1
    11ec:	34 f3       	brlt	.-52     	; 0x11ba <createNewPass+0x244>
		if (Password_1[i] != Password_2[i]) {
			flag = 0;
		}
	}
	UART_sendByte(flag);
    11ee:	80 91 84 01 	lds	r24, 0x0184
    11f2:	0e 94 47 13 	call	0x268e	; 0x268e <UART_sendByte>
	if (flag == 1) {
    11f6:	80 91 84 01 	lds	r24, 0x0184
    11fa:	81 30       	cpi	r24, 0x01	; 1
    11fc:	19 f4       	brne	.+6      	; 0x1204 <createNewPass+0x28e>
		saveNewPassEEPROM();
    11fe:	0e 94 0f 09 	call	0x121e	; 0x121e <saveNewPassEEPROM>
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <createNewPass+0x292>
	}
	else {
		createNewPass();
    1204:	0e 94 bb 07 	call	0xf76	; 0xf76 <createNewPass>
	}
}
    1208:	a2 96       	adiw	r28, 0x22	; 34
    120a:	0f b6       	in	r0, 0x3f	; 63
    120c:	f8 94       	cli
    120e:	de bf       	out	0x3e, r29	; 62
    1210:	0f be       	out	0x3f, r0	; 63
    1212:	cd bf       	out	0x3d, r28	; 61
    1214:	cf 91       	pop	r28
    1216:	df 91       	pop	r29
    1218:	1f 91       	pop	r17
    121a:	0f 91       	pop	r16
    121c:	08 95       	ret

0000121e <saveNewPassEEPROM>:
 * Description :
 * Function responsible for Saving the Password in the eeprom starting from location 0x0311
 * save password then increment index
 * call takeOptions function.
 */
void saveNewPassEEPROM(void) {
    121e:	df 93       	push	r29
    1220:	cf 93       	push	r28
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
    1226:	61 97       	sbiw	r28, 0x11	; 17
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	f8 94       	cli
    122c:	de bf       	out	0x3e, r29	; 62
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	cd bf       	out	0x3d, r28	; 61
	eeprom_index = 0x0311;
    1232:	81 e1       	ldi	r24, 0x11	; 17
    1234:	93 e0       	ldi	r25, 0x03	; 3
    1236:	90 93 7e 01 	sts	0x017E, r25
    123a:	80 93 7d 01 	sts	0x017D, r24
	for (int i = 0; i < PASS_LENGTH; i++) {
    123e:	19 8a       	std	Y+17, r1	; 0x11
    1240:	18 8a       	std	Y+16, r1	; 0x10
    1242:	8e c0       	rjmp	.+284    	; 0x1360 <saveNewPassEEPROM+0x142>
		uint8 key = Password_1[i];
    1244:	88 89       	ldd	r24, Y+16	; 0x10
    1246:	99 89       	ldd	r25, Y+17	; 0x11
    1248:	fc 01       	movw	r30, r24
    124a:	e1 58       	subi	r30, 0x81	; 129
    124c:	fe 4f       	sbci	r31, 0xFE	; 254
    124e:	80 81       	ld	r24, Z
    1250:	8f 87       	std	Y+15, r24	; 0x0f
		EEPROM_writeByte(eeprom_index, key);
    1252:	80 91 7d 01 	lds	r24, 0x017D
    1256:	90 91 7e 01 	lds	r25, 0x017E
    125a:	6f 85       	ldd	r22, Y+15	; 0x0f
    125c:	0e 94 32 0c 	call	0x1864	; 0x1864 <EEPROM_writeByte>
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	a0 e2       	ldi	r26, 0x20	; 32
    1266:	b1 e4       	ldi	r27, 0x41	; 65
    1268:	8b 87       	std	Y+11, r24	; 0x0b
    126a:	9c 87       	std	Y+12, r25	; 0x0c
    126c:	ad 87       	std	Y+13, r26	; 0x0d
    126e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1270:	6b 85       	ldd	r22, Y+11	; 0x0b
    1272:	7c 85       	ldd	r23, Y+12	; 0x0c
    1274:	8d 85       	ldd	r24, Y+13	; 0x0d
    1276:	9e 85       	ldd	r25, Y+14	; 0x0e
    1278:	20 e0       	ldi	r18, 0x00	; 0
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	4a ef       	ldi	r20, 0xFA	; 250
    127e:	54 e4       	ldi	r21, 0x44	; 68
    1280:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1284:	dc 01       	movw	r26, r24
    1286:	cb 01       	movw	r24, r22
    1288:	8f 83       	std	Y+7, r24	; 0x07
    128a:	98 87       	std	Y+8, r25	; 0x08
    128c:	a9 87       	std	Y+9, r26	; 0x09
    128e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1290:	6f 81       	ldd	r22, Y+7	; 0x07
    1292:	78 85       	ldd	r23, Y+8	; 0x08
    1294:	89 85       	ldd	r24, Y+9	; 0x09
    1296:	9a 85       	ldd	r25, Y+10	; 0x0a
    1298:	20 e0       	ldi	r18, 0x00	; 0
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	40 e8       	ldi	r20, 0x80	; 128
    129e:	5f e3       	ldi	r21, 0x3F	; 63
    12a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    12a4:	88 23       	and	r24, r24
    12a6:	2c f4       	brge	.+10     	; 0x12b2 <saveNewPassEEPROM+0x94>
		__ticks = 1;
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	9e 83       	std	Y+6, r25	; 0x06
    12ae:	8d 83       	std	Y+5, r24	; 0x05
    12b0:	3f c0       	rjmp	.+126    	; 0x1330 <saveNewPassEEPROM+0x112>
	else if (__tmp > 65535)
    12b2:	6f 81       	ldd	r22, Y+7	; 0x07
    12b4:	78 85       	ldd	r23, Y+8	; 0x08
    12b6:	89 85       	ldd	r24, Y+9	; 0x09
    12b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	3f ef       	ldi	r19, 0xFF	; 255
    12be:	4f e7       	ldi	r20, 0x7F	; 127
    12c0:	57 e4       	ldi	r21, 0x47	; 71
    12c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    12c6:	18 16       	cp	r1, r24
    12c8:	4c f5       	brge	.+82     	; 0x131c <saveNewPassEEPROM+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    12cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    12ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    12d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    12d2:	20 e0       	ldi	r18, 0x00	; 0
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	40 e2       	ldi	r20, 0x20	; 32
    12d8:	51 e4       	ldi	r21, 0x41	; 65
    12da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12de:	dc 01       	movw	r26, r24
    12e0:	cb 01       	movw	r24, r22
    12e2:	bc 01       	movw	r22, r24
    12e4:	cd 01       	movw	r24, r26
    12e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ea:	dc 01       	movw	r26, r24
    12ec:	cb 01       	movw	r24, r22
    12ee:	9e 83       	std	Y+6, r25	; 0x06
    12f0:	8d 83       	std	Y+5, r24	; 0x05
    12f2:	0f c0       	rjmp	.+30     	; 0x1312 <saveNewPassEEPROM+0xf4>
    12f4:	88 ec       	ldi	r24, 0xC8	; 200
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	9c 83       	std	Y+4, r25	; 0x04
    12fa:	8b 83       	std	Y+3, r24	; 0x03
    12fc:	8b 81       	ldd	r24, Y+3	; 0x03
    12fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1300:	01 97       	sbiw	r24, 0x01	; 1
    1302:	f1 f7       	brne	.-4      	; 0x1300 <saveNewPassEEPROM+0xe2>
    1304:	9c 83       	std	Y+4, r25	; 0x04
    1306:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1308:	8d 81       	ldd	r24, Y+5	; 0x05
    130a:	9e 81       	ldd	r25, Y+6	; 0x06
    130c:	01 97       	sbiw	r24, 0x01	; 1
    130e:	9e 83       	std	Y+6, r25	; 0x06
    1310:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1312:	8d 81       	ldd	r24, Y+5	; 0x05
    1314:	9e 81       	ldd	r25, Y+6	; 0x06
    1316:	00 97       	sbiw	r24, 0x00	; 0
    1318:	69 f7       	brne	.-38     	; 0x12f4 <saveNewPassEEPROM+0xd6>
    131a:	14 c0       	rjmp	.+40     	; 0x1344 <saveNewPassEEPROM+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    131c:	6f 81       	ldd	r22, Y+7	; 0x07
    131e:	78 85       	ldd	r23, Y+8	; 0x08
    1320:	89 85       	ldd	r24, Y+9	; 0x09
    1322:	9a 85       	ldd	r25, Y+10	; 0x0a
    1324:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1328:	dc 01       	movw	r26, r24
    132a:	cb 01       	movw	r24, r22
    132c:	9e 83       	std	Y+6, r25	; 0x06
    132e:	8d 83       	std	Y+5, r24	; 0x05
    1330:	8d 81       	ldd	r24, Y+5	; 0x05
    1332:	9e 81       	ldd	r25, Y+6	; 0x06
    1334:	9a 83       	std	Y+2, r25	; 0x02
    1336:	89 83       	std	Y+1, r24	; 0x01
    1338:	89 81       	ldd	r24, Y+1	; 0x01
    133a:	9a 81       	ldd	r25, Y+2	; 0x02
    133c:	01 97       	sbiw	r24, 0x01	; 1
    133e:	f1 f7       	brne	.-4      	; 0x133c <saveNewPassEEPROM+0x11e>
    1340:	9a 83       	std	Y+2, r25	; 0x02
    1342:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(EEPROM_DELAY);
		eeprom_index++;
    1344:	80 91 7d 01 	lds	r24, 0x017D
    1348:	90 91 7e 01 	lds	r25, 0x017E
    134c:	01 96       	adiw	r24, 0x01	; 1
    134e:	90 93 7e 01 	sts	0x017E, r25
    1352:	80 93 7d 01 	sts	0x017D, r24
 * save password then increment index
 * call takeOptions function.
 */
void saveNewPassEEPROM(void) {
	eeprom_index = 0x0311;
	for (int i = 0; i < PASS_LENGTH; i++) {
    1356:	88 89       	ldd	r24, Y+16	; 0x10
    1358:	99 89       	ldd	r25, Y+17	; 0x11
    135a:	01 96       	adiw	r24, 0x01	; 1
    135c:	99 8b       	std	Y+17, r25	; 0x11
    135e:	88 8b       	std	Y+16, r24	; 0x10
    1360:	88 89       	ldd	r24, Y+16	; 0x10
    1362:	99 89       	ldd	r25, Y+17	; 0x11
    1364:	85 30       	cpi	r24, 0x05	; 5
    1366:	91 05       	cpc	r25, r1
    1368:	0c f4       	brge	.+2      	; 0x136c <saveNewPassEEPROM+0x14e>
    136a:	6c cf       	rjmp	.-296    	; 0x1244 <saveNewPassEEPROM+0x26>
		uint8 key = Password_1[i];
		EEPROM_writeByte(eeprom_index, key);
		_delay_ms(EEPROM_DELAY);
		eeprom_index++;
	}
	TakeOptions();
    136c:	0e 94 c1 09 	call	0x1382	; 0x1382 <TakeOptions>
}
    1370:	61 96       	adiw	r28, 0x11	; 17
    1372:	0f b6       	in	r0, 0x3f	; 63
    1374:	f8 94       	cli
    1376:	de bf       	out	0x3e, r29	; 62
    1378:	0f be       	out	0x3f, r0	; 63
    137a:	cd bf       	out	0x3d, r28	; 61
    137c:	cf 91       	pop	r28
    137e:	df 91       	pop	r29
    1380:	08 95       	ret

00001382 <TakeOptions>:
 * Description :
 * Function responsible for executing the option of the user.
 * 1-open the door,call openDoor function.
 * 2-change the password, call changePass function.
 */
void TakeOptions(void) {
    1382:	df 93       	push	r29
    1384:	cf 93       	push	r28
    1386:	cd b7       	in	r28, 0x3d	; 61
    1388:	de b7       	in	r29, 0x3e	; 62
	OptionChoosed = UART_recieveByte();
    138a:	0e 94 5e 13 	call	0x26bc	; 0x26bc <UART_recieveByte>
    138e:	80 93 85 01 	sts	0x0185, r24
	if (OptionChoosed == '+') {
    1392:	80 91 85 01 	lds	r24, 0x0185
    1396:	8b 32       	cpi	r24, 0x2B	; 43
    1398:	19 f4       	brne	.+6      	; 0x13a0 <TakeOptions+0x1e>
		openDoor();
    139a:	0e 94 25 0b 	call	0x164a	; 0x164a <openDoor>
    139e:	06 c0       	rjmp	.+12     	; 0x13ac <TakeOptions+0x2a>
	} else if(OptionChoosed == '-') {
    13a0:	80 91 85 01 	lds	r24, 0x0185
    13a4:	8d 32       	cpi	r24, 0x2D	; 45
    13a6:	11 f4       	brne	.+4      	; 0x13ac <TakeOptions+0x2a>
		changePass();
    13a8:	0e 94 ab 0b 	call	0x1756	; 0x1756 <changePass>
	}
}
    13ac:	cf 91       	pop	r28
    13ae:	df 91       	pop	r29
    13b0:	08 95       	ret

000013b2 <checkPass>:
/*
 * Description :
 * Helper Function responsible for checking the sent password to the given in the eeprom.
 */
void checkPass() {
    13b2:	0f 93       	push	r16
    13b4:	1f 93       	push	r17
    13b6:	df 93       	push	r29
    13b8:	cf 93       	push	r28
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
    13be:	a6 97       	sbiw	r28, 0x26	; 38
    13c0:	0f b6       	in	r0, 0x3f	; 63
    13c2:	f8 94       	cli
    13c4:	de bf       	out	0x3e, r29	; 62
    13c6:	0f be       	out	0x3f, r0	; 63
    13c8:	cd bf       	out	0x3d, r28	; 61

    // Variable to store the password read from EEPROM
    uint8 saved_password;

    // Initialize a flag to indicate whether the passwords match
    flag = 1;
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	80 93 84 01 	sts	0x0184, r24

    // Set the EEPROM index to the starting location of the password data
    eeprom_index = 0x0311;
    13d0:	81 e1       	ldi	r24, 0x11	; 17
    13d2:	93 e0       	ldi	r25, 0x03	; 3
    13d4:	90 93 7e 01 	sts	0x017E, r25
    13d8:	80 93 7d 01 	sts	0x017D, r24

    // Loop to receive the user's input as the entered password
    for (int i = 0; i < PASS_LENGTH; i++) {
    13dc:	18 a2       	std	Y+32, r1	; 0x20
    13de:	1f 8e       	std	Y+31, r1	; 0x1f
    13e0:	82 c0       	rjmp	.+260    	; 0x14e6 <checkPass+0x134>
        Password[i] = UART_recieveByte();
    13e2:	0f 8d       	ldd	r16, Y+31	; 0x1f
    13e4:	18 a1       	ldd	r17, Y+32	; 0x20
    13e6:	0e 94 5e 13 	call	0x26bc	; 0x26bc <UART_recieveByte>
    13ea:	28 2f       	mov	r18, r24
    13ec:	ce 01       	movw	r24, r28
    13ee:	81 96       	adiw	r24, 0x21	; 33
    13f0:	fc 01       	movw	r30, r24
    13f2:	e0 0f       	add	r30, r16
    13f4:	f1 1f       	adc	r31, r17
    13f6:	20 83       	st	Z, r18
    13f8:	80 e0       	ldi	r24, 0x00	; 0
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	a8 e4       	ldi	r26, 0x48	; 72
    13fe:	b2 e4       	ldi	r27, 0x42	; 66
    1400:	89 8f       	std	Y+25, r24	; 0x19
    1402:	9a 8f       	std	Y+26, r25	; 0x1a
    1404:	ab 8f       	std	Y+27, r26	; 0x1b
    1406:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1408:	69 8d       	ldd	r22, Y+25	; 0x19
    140a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    140c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    140e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	4a ef       	ldi	r20, 0xFA	; 250
    1416:	54 e4       	ldi	r21, 0x44	; 68
    1418:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    141c:	dc 01       	movw	r26, r24
    141e:	cb 01       	movw	r24, r22
    1420:	8d 8b       	std	Y+21, r24	; 0x15
    1422:	9e 8b       	std	Y+22, r25	; 0x16
    1424:	af 8b       	std	Y+23, r26	; 0x17
    1426:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1428:	6d 89       	ldd	r22, Y+21	; 0x15
    142a:	7e 89       	ldd	r23, Y+22	; 0x16
    142c:	8f 89       	ldd	r24, Y+23	; 0x17
    142e:	98 8d       	ldd	r25, Y+24	; 0x18
    1430:	20 e0       	ldi	r18, 0x00	; 0
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	40 e8       	ldi	r20, 0x80	; 128
    1436:	5f e3       	ldi	r21, 0x3F	; 63
    1438:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    143c:	88 23       	and	r24, r24
    143e:	2c f4       	brge	.+10     	; 0x144a <checkPass+0x98>
		__ticks = 1;
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	9c 8b       	std	Y+20, r25	; 0x14
    1446:	8b 8b       	std	Y+19, r24	; 0x13
    1448:	3f c0       	rjmp	.+126    	; 0x14c8 <checkPass+0x116>
	else if (__tmp > 65535)
    144a:	6d 89       	ldd	r22, Y+21	; 0x15
    144c:	7e 89       	ldd	r23, Y+22	; 0x16
    144e:	8f 89       	ldd	r24, Y+23	; 0x17
    1450:	98 8d       	ldd	r25, Y+24	; 0x18
    1452:	20 e0       	ldi	r18, 0x00	; 0
    1454:	3f ef       	ldi	r19, 0xFF	; 255
    1456:	4f e7       	ldi	r20, 0x7F	; 127
    1458:	57 e4       	ldi	r21, 0x47	; 71
    145a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    145e:	18 16       	cp	r1, r24
    1460:	4c f5       	brge	.+82     	; 0x14b4 <checkPass+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1462:	69 8d       	ldd	r22, Y+25	; 0x19
    1464:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1466:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1468:	9c 8d       	ldd	r25, Y+28	; 0x1c
    146a:	20 e0       	ldi	r18, 0x00	; 0
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	40 e2       	ldi	r20, 0x20	; 32
    1470:	51 e4       	ldi	r21, 0x41	; 65
    1472:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1476:	dc 01       	movw	r26, r24
    1478:	cb 01       	movw	r24, r22
    147a:	bc 01       	movw	r22, r24
    147c:	cd 01       	movw	r24, r26
    147e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1482:	dc 01       	movw	r26, r24
    1484:	cb 01       	movw	r24, r22
    1486:	9c 8b       	std	Y+20, r25	; 0x14
    1488:	8b 8b       	std	Y+19, r24	; 0x13
    148a:	0f c0       	rjmp	.+30     	; 0x14aa <checkPass+0xf8>
    148c:	88 ec       	ldi	r24, 0xC8	; 200
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	9a 8b       	std	Y+18, r25	; 0x12
    1492:	89 8b       	std	Y+17, r24	; 0x11
    1494:	89 89       	ldd	r24, Y+17	; 0x11
    1496:	9a 89       	ldd	r25, Y+18	; 0x12
    1498:	01 97       	sbiw	r24, 0x01	; 1
    149a:	f1 f7       	brne	.-4      	; 0x1498 <checkPass+0xe6>
    149c:	9a 8b       	std	Y+18, r25	; 0x12
    149e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14a0:	8b 89       	ldd	r24, Y+19	; 0x13
    14a2:	9c 89       	ldd	r25, Y+20	; 0x14
    14a4:	01 97       	sbiw	r24, 0x01	; 1
    14a6:	9c 8b       	std	Y+20, r25	; 0x14
    14a8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14aa:	8b 89       	ldd	r24, Y+19	; 0x13
    14ac:	9c 89       	ldd	r25, Y+20	; 0x14
    14ae:	00 97       	sbiw	r24, 0x00	; 0
    14b0:	69 f7       	brne	.-38     	; 0x148c <checkPass+0xda>
    14b2:	14 c0       	rjmp	.+40     	; 0x14dc <checkPass+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14b4:	6d 89       	ldd	r22, Y+21	; 0x15
    14b6:	7e 89       	ldd	r23, Y+22	; 0x16
    14b8:	8f 89       	ldd	r24, Y+23	; 0x17
    14ba:	98 8d       	ldd	r25, Y+24	; 0x18
    14bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c0:	dc 01       	movw	r26, r24
    14c2:	cb 01       	movw	r24, r22
    14c4:	9c 8b       	std	Y+20, r25	; 0x14
    14c6:	8b 8b       	std	Y+19, r24	; 0x13
    14c8:	8b 89       	ldd	r24, Y+19	; 0x13
    14ca:	9c 89       	ldd	r25, Y+20	; 0x14
    14cc:	98 8b       	std	Y+16, r25	; 0x10
    14ce:	8f 87       	std	Y+15, r24	; 0x0f
    14d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    14d2:	98 89       	ldd	r25, Y+16	; 0x10
    14d4:	01 97       	sbiw	r24, 0x01	; 1
    14d6:	f1 f7       	brne	.-4      	; 0x14d4 <checkPass+0x122>
    14d8:	98 8b       	std	Y+16, r25	; 0x10
    14da:	8f 87       	std	Y+15, r24	; 0x0f

    // Set the EEPROM index to the starting location of the password data
    eeprom_index = 0x0311;

    // Loop to receive the user's input as the entered password
    for (int i = 0; i < PASS_LENGTH; i++) {
    14dc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14de:	98 a1       	ldd	r25, Y+32	; 0x20
    14e0:	01 96       	adiw	r24, 0x01	; 1
    14e2:	98 a3       	std	Y+32, r25	; 0x20
    14e4:	8f 8f       	std	Y+31, r24	; 0x1f
    14e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14e8:	98 a1       	ldd	r25, Y+32	; 0x20
    14ea:	85 30       	cpi	r24, 0x05	; 5
    14ec:	91 05       	cpc	r25, r1
    14ee:	0c f4       	brge	.+2      	; 0x14f2 <checkPass+0x140>
    14f0:	78 cf       	rjmp	.-272    	; 0x13e2 <checkPass+0x30>
        Password[i] = UART_recieveByte();
        _delay_ms(50);
    }

    // Loop to compare the entered password with the one stored in EEPROM
    for (int i = 0; i < PASS_LENGTH; i++) {
    14f2:	1e 8e       	std	Y+30, r1	; 0x1e
    14f4:	1d 8e       	std	Y+29, r1	; 0x1d
    14f6:	98 c0       	rjmp	.+304    	; 0x1628 <checkPass+0x276>

        EEPROM_readByte(eeprom_index, &saved_password);
    14f8:	80 91 7d 01 	lds	r24, 0x017D
    14fc:	90 91 7e 01 	lds	r25, 0x017E
    1500:	9e 01       	movw	r18, r28
    1502:	2a 5d       	subi	r18, 0xDA	; 218
    1504:	3f 4f       	sbci	r19, 0xFF	; 255
    1506:	b9 01       	movw	r22, r18
    1508:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <EEPROM_readByte>
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	a0 e2       	ldi	r26, 0x20	; 32
    1512:	b1 e4       	ldi	r27, 0x41	; 65
    1514:	8b 87       	std	Y+11, r24	; 0x0b
    1516:	9c 87       	std	Y+12, r25	; 0x0c
    1518:	ad 87       	std	Y+13, r26	; 0x0d
    151a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    151c:	6b 85       	ldd	r22, Y+11	; 0x0b
    151e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1520:	8d 85       	ldd	r24, Y+13	; 0x0d
    1522:	9e 85       	ldd	r25, Y+14	; 0x0e
    1524:	20 e0       	ldi	r18, 0x00	; 0
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	4a ef       	ldi	r20, 0xFA	; 250
    152a:	54 e4       	ldi	r21, 0x44	; 68
    152c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1530:	dc 01       	movw	r26, r24
    1532:	cb 01       	movw	r24, r22
    1534:	8f 83       	std	Y+7, r24	; 0x07
    1536:	98 87       	std	Y+8, r25	; 0x08
    1538:	a9 87       	std	Y+9, r26	; 0x09
    153a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    153c:	6f 81       	ldd	r22, Y+7	; 0x07
    153e:	78 85       	ldd	r23, Y+8	; 0x08
    1540:	89 85       	ldd	r24, Y+9	; 0x09
    1542:	9a 85       	ldd	r25, Y+10	; 0x0a
    1544:	20 e0       	ldi	r18, 0x00	; 0
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	40 e8       	ldi	r20, 0x80	; 128
    154a:	5f e3       	ldi	r21, 0x3F	; 63
    154c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1550:	88 23       	and	r24, r24
    1552:	2c f4       	brge	.+10     	; 0x155e <checkPass+0x1ac>
		__ticks = 1;
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	9e 83       	std	Y+6, r25	; 0x06
    155a:	8d 83       	std	Y+5, r24	; 0x05
    155c:	3f c0       	rjmp	.+126    	; 0x15dc <checkPass+0x22a>
	else if (__tmp > 65535)
    155e:	6f 81       	ldd	r22, Y+7	; 0x07
    1560:	78 85       	ldd	r23, Y+8	; 0x08
    1562:	89 85       	ldd	r24, Y+9	; 0x09
    1564:	9a 85       	ldd	r25, Y+10	; 0x0a
    1566:	20 e0       	ldi	r18, 0x00	; 0
    1568:	3f ef       	ldi	r19, 0xFF	; 255
    156a:	4f e7       	ldi	r20, 0x7F	; 127
    156c:	57 e4       	ldi	r21, 0x47	; 71
    156e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1572:	18 16       	cp	r1, r24
    1574:	4c f5       	brge	.+82     	; 0x15c8 <checkPass+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1576:	6b 85       	ldd	r22, Y+11	; 0x0b
    1578:	7c 85       	ldd	r23, Y+12	; 0x0c
    157a:	8d 85       	ldd	r24, Y+13	; 0x0d
    157c:	9e 85       	ldd	r25, Y+14	; 0x0e
    157e:	20 e0       	ldi	r18, 0x00	; 0
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	40 e2       	ldi	r20, 0x20	; 32
    1584:	51 e4       	ldi	r21, 0x41	; 65
    1586:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    158a:	dc 01       	movw	r26, r24
    158c:	cb 01       	movw	r24, r22
    158e:	bc 01       	movw	r22, r24
    1590:	cd 01       	movw	r24, r26
    1592:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1596:	dc 01       	movw	r26, r24
    1598:	cb 01       	movw	r24, r22
    159a:	9e 83       	std	Y+6, r25	; 0x06
    159c:	8d 83       	std	Y+5, r24	; 0x05
    159e:	0f c0       	rjmp	.+30     	; 0x15be <checkPass+0x20c>
    15a0:	88 ec       	ldi	r24, 0xC8	; 200
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	9c 83       	std	Y+4, r25	; 0x04
    15a6:	8b 83       	std	Y+3, r24	; 0x03
    15a8:	8b 81       	ldd	r24, Y+3	; 0x03
    15aa:	9c 81       	ldd	r25, Y+4	; 0x04
    15ac:	01 97       	sbiw	r24, 0x01	; 1
    15ae:	f1 f7       	brne	.-4      	; 0x15ac <checkPass+0x1fa>
    15b0:	9c 83       	std	Y+4, r25	; 0x04
    15b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15b4:	8d 81       	ldd	r24, Y+5	; 0x05
    15b6:	9e 81       	ldd	r25, Y+6	; 0x06
    15b8:	01 97       	sbiw	r24, 0x01	; 1
    15ba:	9e 83       	std	Y+6, r25	; 0x06
    15bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15be:	8d 81       	ldd	r24, Y+5	; 0x05
    15c0:	9e 81       	ldd	r25, Y+6	; 0x06
    15c2:	00 97       	sbiw	r24, 0x00	; 0
    15c4:	69 f7       	brne	.-38     	; 0x15a0 <checkPass+0x1ee>
    15c6:	14 c0       	rjmp	.+40     	; 0x15f0 <checkPass+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15c8:	6f 81       	ldd	r22, Y+7	; 0x07
    15ca:	78 85       	ldd	r23, Y+8	; 0x08
    15cc:	89 85       	ldd	r24, Y+9	; 0x09
    15ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    15d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d4:	dc 01       	movw	r26, r24
    15d6:	cb 01       	movw	r24, r22
    15d8:	9e 83       	std	Y+6, r25	; 0x06
    15da:	8d 83       	std	Y+5, r24	; 0x05
    15dc:	8d 81       	ldd	r24, Y+5	; 0x05
    15de:	9e 81       	ldd	r25, Y+6	; 0x06
    15e0:	9a 83       	std	Y+2, r25	; 0x02
    15e2:	89 83       	std	Y+1, r24	; 0x01
    15e4:	89 81       	ldd	r24, Y+1	; 0x01
    15e6:	9a 81       	ldd	r25, Y+2	; 0x02
    15e8:	01 97       	sbiw	r24, 0x01	; 1
    15ea:	f1 f7       	brne	.-4      	; 0x15e8 <checkPass+0x236>
    15ec:	9a 83       	std	Y+2, r25	; 0x02
    15ee:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(EEPROM_DELAY);


        eeprom_index++;
    15f0:	80 91 7d 01 	lds	r24, 0x017D
    15f4:	90 91 7e 01 	lds	r25, 0x017E
    15f8:	01 96       	adiw	r24, 0x01	; 1
    15fa:	90 93 7e 01 	sts	0x017E, r25
    15fe:	80 93 7d 01 	sts	0x017D, r24

        // Check if the saved_password doesn't match the corresponding character in the entered Password
        if (saved_password != Password[i]) {
    1602:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1604:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1606:	ce 01       	movw	r24, r28
    1608:	81 96       	adiw	r24, 0x21	; 33
    160a:	fc 01       	movw	r30, r24
    160c:	e2 0f       	add	r30, r18
    160e:	f3 1f       	adc	r31, r19
    1610:	90 81       	ld	r25, Z
    1612:	8e a1       	ldd	r24, Y+38	; 0x26
    1614:	98 17       	cp	r25, r24
    1616:	19 f0       	breq	.+6      	; 0x161e <checkPass+0x26c>
            // If a mismatch is found, set the flag to 0 to indicate a non-matching password
            flag = 0;
    1618:	10 92 84 01 	sts	0x0184, r1
    161c:	0b c0       	rjmp	.+22     	; 0x1634 <checkPass+0x282>
        Password[i] = UART_recieveByte();
        _delay_ms(50);
    }

    // Loop to compare the entered password with the one stored in EEPROM
    for (int i = 0; i < PASS_LENGTH; i++) {
    161e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1620:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1622:	01 96       	adiw	r24, 0x01	; 1
    1624:	9e 8f       	std	Y+30, r25	; 0x1e
    1626:	8d 8f       	std	Y+29, r24	; 0x1d
    1628:	8d 8d       	ldd	r24, Y+29	; 0x1d
    162a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    162c:	85 30       	cpi	r24, 0x05	; 5
    162e:	91 05       	cpc	r25, r1
    1630:	0c f4       	brge	.+2      	; 0x1634 <checkPass+0x282>
    1632:	62 cf       	rjmp	.-316    	; 0x14f8 <checkPass+0x146>
        }
    }

    // Reset the error trial counter since the password was checked successfully
//    errorTrial = 0;
}
    1634:	a6 96       	adiw	r28, 0x26	; 38
    1636:	0f b6       	in	r0, 0x3f	; 63
    1638:	f8 94       	cli
    163a:	de bf       	out	0x3e, r29	; 62
    163c:	0f be       	out	0x3f, r0	; 63
    163e:	cd bf       	out	0x3d, r28	; 61
    1640:	cf 91       	pop	r28
    1642:	df 91       	pop	r29
    1644:	1f 91       	pop	r17
    1646:	0f 91       	pop	r16
    1648:	08 95       	ret

0000164a <openDoor>:

/*
 * Description:
 * Function responsible for door management. It checks the entered password, controls the door, and handles errors.
 */
void openDoor(void) {
    164a:	df 93       	push	r29
    164c:	cf 93       	push	r28
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
    // Check the entered password and set the 'flag' variable to indicate the result
    checkPass();
    1652:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <checkPass>

    // Send the 'flag' value back via UART
    UART_sendByte(flag);
    1656:	80 91 84 01 	lds	r24, 0x0184
    165a:	0e 94 47 13 	call	0x268e	; 0x268e <UART_sendByte>

    // If the password matches and no previous errors, proceed to open the door
    if (flag == 1 && errorTrial == 0) {
    165e:	80 91 84 01 	lds	r24, 0x0184
    1662:	81 30       	cpi	r24, 0x01	; 1
    1664:	39 f4       	brne	.+14     	; 0x1674 <openDoor+0x2a>
    1666:	80 91 78 01 	lds	r24, 0x0178
    166a:	88 23       	and	r24, r24
    166c:	19 f4       	brne	.+6      	; 0x1674 <openDoor+0x2a>
        turnOnMotor(); // Open the door
    166e:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <turnOnMotor>
    1672:	1c c0       	rjmp	.+56     	; 0x16ac <openDoor+0x62>
    }
    // If the password does not match and the error trial count is less than the maximum allowed, retry
    else if (flag == 0 && errorTrial < MAX_ERROR_TRIALS) {
    1674:	80 91 84 01 	lds	r24, 0x0184
    1678:	88 23       	and	r24, r24
    167a:	61 f4       	brne	.+24     	; 0x1694 <openDoor+0x4a>
    167c:	80 91 78 01 	lds	r24, 0x0178
    1680:	82 30       	cpi	r24, 0x02	; 2
    1682:	40 f4       	brcc	.+16     	; 0x1694 <openDoor+0x4a>
        errorTrial++; // Increase the error trial count
    1684:	80 91 78 01 	lds	r24, 0x0178
    1688:	8f 5f       	subi	r24, 0xFF	; 255
    168a:	80 93 78 01 	sts	0x0178, r24
        openDoor(); // Recursive call to retry the operation
    168e:	0e 94 25 0b 	call	0x164a	; 0x164a <openDoor>
    1692:	0c c0       	rjmp	.+24     	; 0x16ac <openDoor+0x62>
    }
    // If the error trial count exceeds the maximum allowed, sound the buzzer and reset the count
    else if ((errorTrial >= MAX_ERROR_TRIALS)&&(flag==0)) {
    1694:	80 91 78 01 	lds	r24, 0x0178
    1698:	82 30       	cpi	r24, 0x02	; 2
    169a:	40 f0       	brcs	.+16     	; 0x16ac <openDoor+0x62>
    169c:	80 91 84 01 	lds	r24, 0x0184
    16a0:	88 23       	and	r24, r24
    16a2:	21 f4       	brne	.+8      	; 0x16ac <openDoor+0x62>
    	turnOnBuzzer(); // Sound the buzzer to indicate multiple errors
    16a4:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <turnOnBuzzer>
        errorTrial = 0; // Reset the error trial count
    16a8:	10 92 78 01 	sts	0x0178, r1
    }
}
    16ac:	cf 91       	pop	r28
    16ae:	df 91       	pop	r29
    16b0:	08 95       	ret

000016b2 <Callback>:

/*
 * Description :
 * Function responsible for call back for timer 1 .
 */
void Callback(void) {
    16b2:	df 93       	push	r29
    16b4:	cf 93       	push	r28
    16b6:	cd b7       	in	r28, 0x3d	; 61
    16b8:	de b7       	in	r29, 0x3e	; 62
	TIMER1_g_ticks++;
    16ba:	80 91 79 01 	lds	r24, 0x0179
    16be:	90 91 7a 01 	lds	r25, 0x017A
    16c2:	01 96       	adiw	r24, 0x01	; 1
    16c4:	90 93 7a 01 	sts	0x017A, r25
    16c8:	80 93 79 01 	sts	0x0179, r24
}
    16cc:	cf 91       	pop	r28
    16ce:	df 91       	pop	r29
    16d0:	08 95       	ret

000016d2 <turnOnBuzzer>:
/*
 * Description:
 * Function responsible for turning on the buzzer to indicate errors.
 */
void turnOnBuzzer(void) {
    16d2:	df 93       	push	r29
    16d4:	cf 93       	push	r28
    16d6:	cd b7       	in	r28, 0x3d	; 61
    16d8:	de b7       	in	r29, 0x3e	; 62
    TIMER1_g_ticks = 0; // Reset the timer ticks to 0
    16da:	10 92 7a 01 	sts	0x017A, r1
    16de:	10 92 79 01 	sts	0x0179, r1

    Buzzer_on(); // Turn on the buzzer to produce sound
    16e2:	0e 94 0a 07 	call	0xe14	; 0xe14 <Buzzer_on>

    // Wait for a specified duration (DANGER_TIME) while the buzzer is on
    while (TIMER1_g_ticks < DANGER_TIME); // Wait until the timer reaches the specified danger time
    16e6:	80 91 79 01 	lds	r24, 0x0179
    16ea:	90 91 7a 01 	lds	r25, 0x017A
    16ee:	8c 33       	cpi	r24, 0x3C	; 60
    16f0:	91 05       	cpc	r25, r1
    16f2:	cc f3       	brlt	.-14     	; 0x16e6 <turnOnBuzzer+0x14>

    Buzzer_off(); // Turn off the buzzer after the specified duration
    16f4:	0e 94 16 07 	call	0xe2c	; 0xe2c <Buzzer_off>
}
    16f8:	cf 91       	pop	r28
    16fa:	df 91       	pop	r29
    16fc:	08 95       	ret

000016fe <turnOnMotor>:

/*
 * Description:
 * Function responsible for controlling the motor to perform door operations (OPEN - HOLD - CLOSE).
 */
void turnOnMotor(void) {
    16fe:	df 93       	push	r29
    1700:	cf 93       	push	r28
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
    TIMER1_g_ticks = 0; // Reset the timer ticks to 0
    1706:	10 92 7a 01 	sts	0x017A, r1
    170a:	10 92 79 01 	sts	0x0179, r1

    DcMotor_Rotate(CW); // Rotate the motor in the clockwise direction (OPEN)
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	0e 94 ef 0b 	call	0x17de	; 0x17de <DcMotor_Rotate>

    // Wait for the specified duration (OPEN_TIME) while the motor is rotating in the OPEN direction
    while (TIMER1_g_ticks < OPEN_TIME);
    1714:	80 91 79 01 	lds	r24, 0x0179
    1718:	90 91 7a 01 	lds	r25, 0x017A
    171c:	8f 30       	cpi	r24, 0x0F	; 15
    171e:	91 05       	cpc	r25, r1
    1720:	cc f3       	brlt	.-14     	; 0x1714 <turnOnMotor+0x16>

    DcMotor_Rotate(STOP); // Stop the motor (HOLD)
    1722:	80 e0       	ldi	r24, 0x00	; 0
    1724:	0e 94 ef 0b 	call	0x17de	; 0x17de <DcMotor_Rotate>

    // Wait for the specified duration (HOLDING_TIME) while the door is held in place
    while (TIMER1_g_ticks < OPEN_TIME + HOLDING_TIME);
    1728:	80 91 79 01 	lds	r24, 0x0179
    172c:	90 91 7a 01 	lds	r25, 0x017A
    1730:	82 31       	cpi	r24, 0x12	; 18
    1732:	91 05       	cpc	r25, r1
    1734:	cc f3       	brlt	.-14     	; 0x1728 <turnOnMotor+0x2a>

    DcMotor_Rotate(A_CW); // Rotate the motor in the anti-clockwise direction (CLOSE)
    1736:	82 e0       	ldi	r24, 0x02	; 2
    1738:	0e 94 ef 0b 	call	0x17de	; 0x17de <DcMotor_Rotate>

    // Wait for the specified duration (CLOSE_TIME) while the motor is rotating in the CLOSE direction
    while (TIMER1_g_ticks < OPEN_TIME + HOLDING_TIME + CLOSE_TIME);
    173c:	80 91 79 01 	lds	r24, 0x0179
    1740:	90 91 7a 01 	lds	r25, 0x017A
    1744:	81 32       	cpi	r24, 0x21	; 33
    1746:	91 05       	cpc	r25, r1
    1748:	cc f3       	brlt	.-14     	; 0x173c <turnOnMotor+0x3e>

    DcMotor_Rotate(STOP); // Stop the motor (Door is now closed)
    174a:	80 e0       	ldi	r24, 0x00	; 0
    174c:	0e 94 ef 0b 	call	0x17de	; 0x17de <DcMotor_Rotate>
}
    1750:	cf 91       	pop	r28
    1752:	df 91       	pop	r29
    1754:	08 95       	ret

00001756 <changePass>:

/*
 * Description:
 * Function responsible for changing the password based on user input and handling error conditions.
 */
void changePass(void) {
    1756:	df 93       	push	r29
    1758:	cf 93       	push	r28
    175a:	cd b7       	in	r28, 0x3d	; 61
    175c:	de b7       	in	r29, 0x3e	; 62
    // Check the entered password and set the 'flag' variable to indicate the result
    checkPass();
    175e:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <checkPass>

    // Send the 'flag' value back via UART
    UART_sendByte(flag);
    1762:	80 91 84 01 	lds	r24, 0x0184
    1766:	0e 94 47 13 	call	0x268e	; 0x268e <UART_sendByte>

    // If the error trial count has reached the maximum allowed, sound the buzzer and reset the count
    if (errorTrial >= MAX_ERROR_TRIALS) {
    176a:	80 91 78 01 	lds	r24, 0x0178
    176e:	82 30       	cpi	r24, 0x02	; 2
    1770:	28 f0       	brcs	.+10     	; 0x177c <changePass+0x26>
        turnOnBuzzer(); // Sound the buzzer to indicate multiple errors
    1772:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <turnOnBuzzer>
        errorTrial = 0; // Reset the error trial count
    1776:	10 92 78 01 	sts	0x0178, r1
    177a:	1a c0       	rjmp	.+52     	; 0x17b0 <changePass+0x5a>
    }
    // If the error trial count is within the limit and the entered password is correct, allow password change
    else if (errorTrial ==0 && flag == 1) {
    177c:	80 91 78 01 	lds	r24, 0x0178
    1780:	88 23       	and	r24, r24
    1782:	39 f4       	brne	.+14     	; 0x1792 <changePass+0x3c>
    1784:	80 91 84 01 	lds	r24, 0x0184
    1788:	81 30       	cpi	r24, 0x01	; 1
    178a:	19 f4       	brne	.+6      	; 0x1792 <changePass+0x3c>
        createNewPass(); // Initiate the process to create a new password
    178c:	0e 94 bb 07 	call	0xf76	; 0xf76 <createNewPass>
    1790:	0f c0       	rjmp	.+30     	; 0x17b0 <changePass+0x5a>
    }
    // If the error trial count is within the limit, the entered password is incorrect, and not exceeding the limit, retry
    else if (flag == 0 && errorTrial < MAX_ERROR_TRIALS) {
    1792:	80 91 84 01 	lds	r24, 0x0184
    1796:	88 23       	and	r24, r24
    1798:	59 f4       	brne	.+22     	; 0x17b0 <changePass+0x5a>
    179a:	80 91 78 01 	lds	r24, 0x0178
    179e:	82 30       	cpi	r24, 0x02	; 2
    17a0:	38 f4       	brcc	.+14     	; 0x17b0 <changePass+0x5a>
        errorTrial++; // Increase the error trial count
    17a2:	80 91 78 01 	lds	r24, 0x0178
    17a6:	8f 5f       	subi	r24, 0xFF	; 255
    17a8:	80 93 78 01 	sts	0x0178, r24
        changePass(); // Recursive call to retry the password change
    17ac:	0e 94 ab 0b 	call	0x1756	; 0x1756 <changePass>
    }
}
    17b0:	cf 91       	pop	r28
    17b2:	df 91       	pop	r29
    17b4:	08 95       	ret

000017b6 <DcMotor_Init>:
/*
 * Description :
 * setup the direction for the two motor pins through the GPIO driver.
 * Stop at the DC-Motor at the beginning through the GPIO driver.
 */
void DcMotor_Init(void){
    17b6:	df 93       	push	r29
    17b8:	cf 93       	push	r28
    17ba:	cd b7       	in	r28, 0x3d	; 61
    17bc:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(DC_MOTOR_PIN1_PORT_ID,DC_MOTOR_PIN1_ID,PIN_OUTPUT);
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	60 e0       	ldi	r22, 0x00	; 0
    17c2:	41 e0       	ldi	r20, 0x01	; 1
    17c4:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PIN2_PORT_ID,DC_MOTOR_PIN2_ID,PIN_OUTPUT);
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	61 e0       	ldi	r22, 0x01	; 1
    17cc:	41 e0       	ldi	r20, 0x01	; 1
    17ce:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <GPIO_setupPinDirection>
	DcMotor_Rotate(STOP);
    17d2:	80 e0       	ldi	r24, 0x00	; 0
    17d4:	0e 94 ef 0b 	call	0x17de	; 0x17de <DcMotor_Rotate>
}
    17d8:	cf 91       	pop	r28
    17da:	df 91       	pop	r29
    17dc:	08 95       	ret

000017de <DcMotor_Rotate>:
/*
 * Description :
 * rotate the DC Motor CW/ or A-CW or stop the motor based on the state input state value.
 * Send the required duty cycle to the PWM driver based on the required speed value.
 */
void DcMotor_Rotate(DcMotor_State state) {
    17de:	df 93       	push	r29
    17e0:	cf 93       	push	r28
    17e2:	00 d0       	rcall	.+0      	; 0x17e4 <DcMotor_Rotate+0x6>
    17e4:	0f 92       	push	r0
    17e6:	cd b7       	in	r28, 0x3d	; 61
    17e8:	de b7       	in	r29, 0x3e	; 62
    17ea:	89 83       	std	Y+1, r24	; 0x01

	switch (state) {
    17ec:	89 81       	ldd	r24, Y+1	; 0x01
    17ee:	28 2f       	mov	r18, r24
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	3b 83       	std	Y+3, r19	; 0x03
    17f4:	2a 83       	std	Y+2, r18	; 0x02
    17f6:	8a 81       	ldd	r24, Y+2	; 0x02
    17f8:	9b 81       	ldd	r25, Y+3	; 0x03
    17fa:	81 30       	cpi	r24, 0x01	; 1
    17fc:	91 05       	cpc	r25, r1
    17fe:	a1 f0       	breq	.+40     	; 0x1828 <DcMotor_Rotate+0x4a>
    1800:	2a 81       	ldd	r18, Y+2	; 0x02
    1802:	3b 81       	ldd	r19, Y+3	; 0x03
    1804:	22 30       	cpi	r18, 0x02	; 2
    1806:	31 05       	cpc	r19, r1
    1808:	d1 f0       	breq	.+52     	; 0x183e <DcMotor_Rotate+0x60>
    180a:	8a 81       	ldd	r24, Y+2	; 0x02
    180c:	9b 81       	ldd	r25, Y+3	; 0x03
    180e:	00 97       	sbiw	r24, 0x00	; 0
    1810:	01 f5       	brne	.+64     	; 0x1852 <DcMotor_Rotate+0x74>
	case STOP:
		GPIO_writePin(DC_MOTOR_PIN1_PORT_ID, DC_MOTOR_PIN1_ID, LOGIC_LOW);
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	60 e0       	ldi	r22, 0x00	; 0
    1816:	40 e0       	ldi	r20, 0x00	; 0
    1818:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PIN2_PORT_ID, DC_MOTOR_PIN2_ID, LOGIC_LOW);
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	61 e0       	ldi	r22, 0x01	; 1
    1820:	40 e0       	ldi	r20, 0x00	; 0
    1822:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <GPIO_writePin>
    1826:	15 c0       	rjmp	.+42     	; 0x1852 <DcMotor_Rotate+0x74>
		break;
	case CW:
		GPIO_writePin(DC_MOTOR_PIN1_PORT_ID, DC_MOTOR_PIN1_ID, LOGIC_LOW);
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	60 e0       	ldi	r22, 0x00	; 0
    182c:	40 e0       	ldi	r20, 0x00	; 0
    182e:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PIN2_PORT_ID, DC_MOTOR_PIN2_ID, LOGIC_HIGH);
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	61 e0       	ldi	r22, 0x01	; 1
    1836:	41 e0       	ldi	r20, 0x01	; 1
    1838:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <GPIO_writePin>
    183c:	0a c0       	rjmp	.+20     	; 0x1852 <DcMotor_Rotate+0x74>
		break;
	case A_CW:
		GPIO_writePin(DC_MOTOR_PIN1_PORT_ID, DC_MOTOR_PIN1_ID, LOGIC_HIGH);
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	60 e0       	ldi	r22, 0x00	; 0
    1842:	41 e0       	ldi	r20, 0x01	; 1
    1844:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PIN2_PORT_ID, DC_MOTOR_PIN2_ID, LOGIC_LOW);
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	61 e0       	ldi	r22, 0x01	; 1
    184c:	40 e0       	ldi	r20, 0x00	; 0
    184e:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <GPIO_writePin>
		break;
	}
	Timer0_PWM_Start(100);
    1852:	84 e6       	ldi	r24, 0x64	; 100
    1854:	0e 94 89 10 	call	0x2112	; 0x2112 <Timer0_PWM_Start>

}
    1858:	0f 90       	pop	r0
    185a:	0f 90       	pop	r0
    185c:	0f 90       	pop	r0
    185e:	cf 91       	pop	r28
    1860:	df 91       	pop	r29
    1862:	08 95       	ret

00001864 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1864:	df 93       	push	r29
    1866:	cf 93       	push	r28
    1868:	00 d0       	rcall	.+0      	; 0x186a <EEPROM_writeByte+0x6>
    186a:	00 d0       	rcall	.+0      	; 0x186c <EEPROM_writeByte+0x8>
    186c:	cd b7       	in	r28, 0x3d	; 61
    186e:	de b7       	in	r29, 0x3e	; 62
    1870:	9a 83       	std	Y+2, r25	; 0x02
    1872:	89 83       	std	Y+1, r24	; 0x01
    1874:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1876:	0e 94 c6 11 	call	0x238c	; 0x238c <TWI_start>
    if (TWI_getStatus() != TWI_START)
    187a:	0e 94 1e 12 	call	0x243c	; 0x243c <TWI_getStatus>
    187e:	88 30       	cpi	r24, 0x08	; 8
    1880:	11 f0       	breq	.+4      	; 0x1886 <EEPROM_writeByte+0x22>
        return ERROR;
    1882:	1c 82       	std	Y+4, r1	; 0x04
    1884:	28 c0       	rjmp	.+80     	; 0x18d6 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1886:	89 81       	ldd	r24, Y+1	; 0x01
    1888:	9a 81       	ldd	r25, Y+2	; 0x02
    188a:	80 70       	andi	r24, 0x00	; 0
    188c:	97 70       	andi	r25, 0x07	; 7
    188e:	88 0f       	add	r24, r24
    1890:	89 2f       	mov	r24, r25
    1892:	88 1f       	adc	r24, r24
    1894:	99 0b       	sbc	r25, r25
    1896:	91 95       	neg	r25
    1898:	80 6a       	ori	r24, 0xA0	; 160
    189a:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    189e:	0e 94 1e 12 	call	0x243c	; 0x243c <TWI_getStatus>
    18a2:	88 31       	cpi	r24, 0x18	; 24
    18a4:	11 f0       	breq	.+4      	; 0x18aa <EEPROM_writeByte+0x46>
        return ERROR; 
    18a6:	1c 82       	std	Y+4, r1	; 0x04
    18a8:	16 c0       	rjmp	.+44     	; 0x18d6 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    18aa:	89 81       	ldd	r24, Y+1	; 0x01
    18ac:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    18b0:	0e 94 1e 12 	call	0x243c	; 0x243c <TWI_getStatus>
    18b4:	88 32       	cpi	r24, 0x28	; 40
    18b6:	11 f0       	breq	.+4      	; 0x18bc <EEPROM_writeByte+0x58>
        return ERROR;
    18b8:	1c 82       	std	Y+4, r1	; 0x04
    18ba:	0d c0       	rjmp	.+26     	; 0x18d6 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    18bc:	8b 81       	ldd	r24, Y+3	; 0x03
    18be:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    18c2:	0e 94 1e 12 	call	0x243c	; 0x243c <TWI_getStatus>
    18c6:	88 32       	cpi	r24, 0x28	; 40
    18c8:	11 f0       	breq	.+4      	; 0x18ce <EEPROM_writeByte+0x6a>
        return ERROR;
    18ca:	1c 82       	std	Y+4, r1	; 0x04
    18cc:	04 c0       	rjmp	.+8      	; 0x18d6 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    18ce:	0e 94 d6 11 	call	0x23ac	; 0x23ac <TWI_stop>
	
    return SUCCESS;
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	8c 83       	std	Y+4, r24	; 0x04
    18d6:	8c 81       	ldd	r24, Y+4	; 0x04
}
    18d8:	0f 90       	pop	r0
    18da:	0f 90       	pop	r0
    18dc:	0f 90       	pop	r0
    18de:	0f 90       	pop	r0
    18e0:	cf 91       	pop	r28
    18e2:	df 91       	pop	r29
    18e4:	08 95       	ret

000018e6 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    18e6:	df 93       	push	r29
    18e8:	cf 93       	push	r28
    18ea:	00 d0       	rcall	.+0      	; 0x18ec <EEPROM_readByte+0x6>
    18ec:	00 d0       	rcall	.+0      	; 0x18ee <EEPROM_readByte+0x8>
    18ee:	0f 92       	push	r0
    18f0:	cd b7       	in	r28, 0x3d	; 61
    18f2:	de b7       	in	r29, 0x3e	; 62
    18f4:	9a 83       	std	Y+2, r25	; 0x02
    18f6:	89 83       	std	Y+1, r24	; 0x01
    18f8:	7c 83       	std	Y+4, r23	; 0x04
    18fa:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    18fc:	0e 94 c6 11 	call	0x238c	; 0x238c <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1900:	0e 94 1e 12 	call	0x243c	; 0x243c <TWI_getStatus>
    1904:	88 30       	cpi	r24, 0x08	; 8
    1906:	11 f0       	breq	.+4      	; 0x190c <EEPROM_readByte+0x26>
        return ERROR;
    1908:	1d 82       	std	Y+5, r1	; 0x05
    190a:	44 c0       	rjmp	.+136    	; 0x1994 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    190c:	89 81       	ldd	r24, Y+1	; 0x01
    190e:	9a 81       	ldd	r25, Y+2	; 0x02
    1910:	80 70       	andi	r24, 0x00	; 0
    1912:	97 70       	andi	r25, 0x07	; 7
    1914:	88 0f       	add	r24, r24
    1916:	89 2f       	mov	r24, r25
    1918:	88 1f       	adc	r24, r24
    191a:	99 0b       	sbc	r25, r25
    191c:	91 95       	neg	r25
    191e:	80 6a       	ori	r24, 0xA0	; 160
    1920:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1924:	0e 94 1e 12 	call	0x243c	; 0x243c <TWI_getStatus>
    1928:	88 31       	cpi	r24, 0x18	; 24
    192a:	11 f0       	breq	.+4      	; 0x1930 <EEPROM_readByte+0x4a>
        return ERROR;
    192c:	1d 82       	std	Y+5, r1	; 0x05
    192e:	32 c0       	rjmp	.+100    	; 0x1994 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1930:	89 81       	ldd	r24, Y+1	; 0x01
    1932:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1936:	0e 94 1e 12 	call	0x243c	; 0x243c <TWI_getStatus>
    193a:	88 32       	cpi	r24, 0x28	; 40
    193c:	11 f0       	breq	.+4      	; 0x1942 <EEPROM_readByte+0x5c>
        return ERROR;
    193e:	1d 82       	std	Y+5, r1	; 0x05
    1940:	29 c0       	rjmp	.+82     	; 0x1994 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1942:	0e 94 c6 11 	call	0x238c	; 0x238c <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1946:	0e 94 1e 12 	call	0x243c	; 0x243c <TWI_getStatus>
    194a:	80 31       	cpi	r24, 0x10	; 16
    194c:	11 f0       	breq	.+4      	; 0x1952 <EEPROM_readByte+0x6c>
        return ERROR;
    194e:	1d 82       	std	Y+5, r1	; 0x05
    1950:	21 c0       	rjmp	.+66     	; 0x1994 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1952:	89 81       	ldd	r24, Y+1	; 0x01
    1954:	9a 81       	ldd	r25, Y+2	; 0x02
    1956:	80 70       	andi	r24, 0x00	; 0
    1958:	97 70       	andi	r25, 0x07	; 7
    195a:	88 0f       	add	r24, r24
    195c:	89 2f       	mov	r24, r25
    195e:	88 1f       	adc	r24, r24
    1960:	99 0b       	sbc	r25, r25
    1962:	91 95       	neg	r25
    1964:	81 6a       	ori	r24, 0xA1	; 161
    1966:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    196a:	0e 94 1e 12 	call	0x243c	; 0x243c <TWI_getStatus>
    196e:	80 34       	cpi	r24, 0x40	; 64
    1970:	11 f0       	breq	.+4      	; 0x1976 <EEPROM_readByte+0x90>
        return ERROR;
    1972:	1d 82       	std	Y+5, r1	; 0x05
    1974:	0f c0       	rjmp	.+30     	; 0x1994 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1976:	0e 94 0b 12 	call	0x2416	; 0x2416 <TWI_readByteWithNACK>
    197a:	eb 81       	ldd	r30, Y+3	; 0x03
    197c:	fc 81       	ldd	r31, Y+4	; 0x04
    197e:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1980:	0e 94 1e 12 	call	0x243c	; 0x243c <TWI_getStatus>
    1984:	88 35       	cpi	r24, 0x58	; 88
    1986:	11 f0       	breq	.+4      	; 0x198c <EEPROM_readByte+0xa6>
        return ERROR;
    1988:	1d 82       	std	Y+5, r1	; 0x05
    198a:	04 c0       	rjmp	.+8      	; 0x1994 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    198c:	0e 94 d6 11 	call	0x23ac	; 0x23ac <TWI_stop>

    return SUCCESS;
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	8d 83       	std	Y+5, r24	; 0x05
    1994:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1996:	0f 90       	pop	r0
    1998:	0f 90       	pop	r0
    199a:	0f 90       	pop	r0
    199c:	0f 90       	pop	r0
    199e:	0f 90       	pop	r0
    19a0:	cf 91       	pop	r28
    19a2:	df 91       	pop	r29
    19a4:	08 95       	ret

000019a6 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    19a6:	df 93       	push	r29
    19a8:	cf 93       	push	r28
    19aa:	00 d0       	rcall	.+0      	; 0x19ac <GPIO_setupPinDirection+0x6>
    19ac:	00 d0       	rcall	.+0      	; 0x19ae <GPIO_setupPinDirection+0x8>
    19ae:	0f 92       	push	r0
    19b0:	cd b7       	in	r28, 0x3d	; 61
    19b2:	de b7       	in	r29, 0x3e	; 62
    19b4:	89 83       	std	Y+1, r24	; 0x01
    19b6:	6a 83       	std	Y+2, r22	; 0x02
    19b8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    19ba:	8a 81       	ldd	r24, Y+2	; 0x02
    19bc:	88 30       	cpi	r24, 0x08	; 8
    19be:	08 f0       	brcs	.+2      	; 0x19c2 <GPIO_setupPinDirection+0x1c>
    19c0:	d5 c0       	rjmp	.+426    	; 0x1b6c <GPIO_setupPinDirection+0x1c6>
    19c2:	89 81       	ldd	r24, Y+1	; 0x01
    19c4:	84 30       	cpi	r24, 0x04	; 4
    19c6:	08 f0       	brcs	.+2      	; 0x19ca <GPIO_setupPinDirection+0x24>
    19c8:	d1 c0       	rjmp	.+418    	; 0x1b6c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    19ca:	89 81       	ldd	r24, Y+1	; 0x01
    19cc:	28 2f       	mov	r18, r24
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	3d 83       	std	Y+5, r19	; 0x05
    19d2:	2c 83       	std	Y+4, r18	; 0x04
    19d4:	8c 81       	ldd	r24, Y+4	; 0x04
    19d6:	9d 81       	ldd	r25, Y+5	; 0x05
    19d8:	81 30       	cpi	r24, 0x01	; 1
    19da:	91 05       	cpc	r25, r1
    19dc:	09 f4       	brne	.+2      	; 0x19e0 <GPIO_setupPinDirection+0x3a>
    19de:	43 c0       	rjmp	.+134    	; 0x1a66 <GPIO_setupPinDirection+0xc0>
    19e0:	2c 81       	ldd	r18, Y+4	; 0x04
    19e2:	3d 81       	ldd	r19, Y+5	; 0x05
    19e4:	22 30       	cpi	r18, 0x02	; 2
    19e6:	31 05       	cpc	r19, r1
    19e8:	2c f4       	brge	.+10     	; 0x19f4 <GPIO_setupPinDirection+0x4e>
    19ea:	8c 81       	ldd	r24, Y+4	; 0x04
    19ec:	9d 81       	ldd	r25, Y+5	; 0x05
    19ee:	00 97       	sbiw	r24, 0x00	; 0
    19f0:	71 f0       	breq	.+28     	; 0x1a0e <GPIO_setupPinDirection+0x68>
    19f2:	bc c0       	rjmp	.+376    	; 0x1b6c <GPIO_setupPinDirection+0x1c6>
    19f4:	2c 81       	ldd	r18, Y+4	; 0x04
    19f6:	3d 81       	ldd	r19, Y+5	; 0x05
    19f8:	22 30       	cpi	r18, 0x02	; 2
    19fa:	31 05       	cpc	r19, r1
    19fc:	09 f4       	brne	.+2      	; 0x1a00 <GPIO_setupPinDirection+0x5a>
    19fe:	5f c0       	rjmp	.+190    	; 0x1abe <GPIO_setupPinDirection+0x118>
    1a00:	8c 81       	ldd	r24, Y+4	; 0x04
    1a02:	9d 81       	ldd	r25, Y+5	; 0x05
    1a04:	83 30       	cpi	r24, 0x03	; 3
    1a06:	91 05       	cpc	r25, r1
    1a08:	09 f4       	brne	.+2      	; 0x1a0c <GPIO_setupPinDirection+0x66>
    1a0a:	85 c0       	rjmp	.+266    	; 0x1b16 <GPIO_setupPinDirection+0x170>
    1a0c:	af c0       	rjmp	.+350    	; 0x1b6c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a10:	81 30       	cpi	r24, 0x01	; 1
    1a12:	a1 f4       	brne	.+40     	; 0x1a3c <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1a14:	aa e3       	ldi	r26, 0x3A	; 58
    1a16:	b0 e0       	ldi	r27, 0x00	; 0
    1a18:	ea e3       	ldi	r30, 0x3A	; 58
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 81       	ld	r24, Z
    1a1e:	48 2f       	mov	r20, r24
    1a20:	8a 81       	ldd	r24, Y+2	; 0x02
    1a22:	28 2f       	mov	r18, r24
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	02 2e       	mov	r0, r18
    1a2c:	02 c0       	rjmp	.+4      	; 0x1a32 <GPIO_setupPinDirection+0x8c>
    1a2e:	88 0f       	add	r24, r24
    1a30:	99 1f       	adc	r25, r25
    1a32:	0a 94       	dec	r0
    1a34:	e2 f7       	brpl	.-8      	; 0x1a2e <GPIO_setupPinDirection+0x88>
    1a36:	84 2b       	or	r24, r20
    1a38:	8c 93       	st	X, r24
    1a3a:	98 c0       	rjmp	.+304    	; 0x1b6c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1a3c:	aa e3       	ldi	r26, 0x3A	; 58
    1a3e:	b0 e0       	ldi	r27, 0x00	; 0
    1a40:	ea e3       	ldi	r30, 0x3A	; 58
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	80 81       	ld	r24, Z
    1a46:	48 2f       	mov	r20, r24
    1a48:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4a:	28 2f       	mov	r18, r24
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	02 2e       	mov	r0, r18
    1a54:	02 c0       	rjmp	.+4      	; 0x1a5a <GPIO_setupPinDirection+0xb4>
    1a56:	88 0f       	add	r24, r24
    1a58:	99 1f       	adc	r25, r25
    1a5a:	0a 94       	dec	r0
    1a5c:	e2 f7       	brpl	.-8      	; 0x1a56 <GPIO_setupPinDirection+0xb0>
    1a5e:	80 95       	com	r24
    1a60:	84 23       	and	r24, r20
    1a62:	8c 93       	st	X, r24
    1a64:	83 c0       	rjmp	.+262    	; 0x1b6c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1a66:	8b 81       	ldd	r24, Y+3	; 0x03
    1a68:	81 30       	cpi	r24, 0x01	; 1
    1a6a:	a1 f4       	brne	.+40     	; 0x1a94 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1a6c:	a7 e3       	ldi	r26, 0x37	; 55
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
    1a70:	e7 e3       	ldi	r30, 0x37	; 55
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	48 2f       	mov	r20, r24
    1a78:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7a:	28 2f       	mov	r18, r24
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	02 2e       	mov	r0, r18
    1a84:	02 c0       	rjmp	.+4      	; 0x1a8a <GPIO_setupPinDirection+0xe4>
    1a86:	88 0f       	add	r24, r24
    1a88:	99 1f       	adc	r25, r25
    1a8a:	0a 94       	dec	r0
    1a8c:	e2 f7       	brpl	.-8      	; 0x1a86 <GPIO_setupPinDirection+0xe0>
    1a8e:	84 2b       	or	r24, r20
    1a90:	8c 93       	st	X, r24
    1a92:	6c c0       	rjmp	.+216    	; 0x1b6c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1a94:	a7 e3       	ldi	r26, 0x37	; 55
    1a96:	b0 e0       	ldi	r27, 0x00	; 0
    1a98:	e7 e3       	ldi	r30, 0x37	; 55
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	48 2f       	mov	r20, r24
    1aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa2:	28 2f       	mov	r18, r24
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	02 2e       	mov	r0, r18
    1aac:	02 c0       	rjmp	.+4      	; 0x1ab2 <GPIO_setupPinDirection+0x10c>
    1aae:	88 0f       	add	r24, r24
    1ab0:	99 1f       	adc	r25, r25
    1ab2:	0a 94       	dec	r0
    1ab4:	e2 f7       	brpl	.-8      	; 0x1aae <GPIO_setupPinDirection+0x108>
    1ab6:	80 95       	com	r24
    1ab8:	84 23       	and	r24, r20
    1aba:	8c 93       	st	X, r24
    1abc:	57 c0       	rjmp	.+174    	; 0x1b6c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1abe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac0:	81 30       	cpi	r24, 0x01	; 1
    1ac2:	a1 f4       	brne	.+40     	; 0x1aec <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1ac4:	a4 e3       	ldi	r26, 0x34	; 52
    1ac6:	b0 e0       	ldi	r27, 0x00	; 0
    1ac8:	e4 e3       	ldi	r30, 0x34	; 52
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	80 81       	ld	r24, Z
    1ace:	48 2f       	mov	r20, r24
    1ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad2:	28 2f       	mov	r18, r24
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	02 2e       	mov	r0, r18
    1adc:	02 c0       	rjmp	.+4      	; 0x1ae2 <GPIO_setupPinDirection+0x13c>
    1ade:	88 0f       	add	r24, r24
    1ae0:	99 1f       	adc	r25, r25
    1ae2:	0a 94       	dec	r0
    1ae4:	e2 f7       	brpl	.-8      	; 0x1ade <GPIO_setupPinDirection+0x138>
    1ae6:	84 2b       	or	r24, r20
    1ae8:	8c 93       	st	X, r24
    1aea:	40 c0       	rjmp	.+128    	; 0x1b6c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1aec:	a4 e3       	ldi	r26, 0x34	; 52
    1aee:	b0 e0       	ldi	r27, 0x00	; 0
    1af0:	e4 e3       	ldi	r30, 0x34	; 52
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	80 81       	ld	r24, Z
    1af6:	48 2f       	mov	r20, r24
    1af8:	8a 81       	ldd	r24, Y+2	; 0x02
    1afa:	28 2f       	mov	r18, r24
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	02 2e       	mov	r0, r18
    1b04:	02 c0       	rjmp	.+4      	; 0x1b0a <GPIO_setupPinDirection+0x164>
    1b06:	88 0f       	add	r24, r24
    1b08:	99 1f       	adc	r25, r25
    1b0a:	0a 94       	dec	r0
    1b0c:	e2 f7       	brpl	.-8      	; 0x1b06 <GPIO_setupPinDirection+0x160>
    1b0e:	80 95       	com	r24
    1b10:	84 23       	and	r24, r20
    1b12:	8c 93       	st	X, r24
    1b14:	2b c0       	rjmp	.+86     	; 0x1b6c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1b16:	8b 81       	ldd	r24, Y+3	; 0x03
    1b18:	81 30       	cpi	r24, 0x01	; 1
    1b1a:	a1 f4       	brne	.+40     	; 0x1b44 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1b1c:	a1 e3       	ldi	r26, 0x31	; 49
    1b1e:	b0 e0       	ldi	r27, 0x00	; 0
    1b20:	e1 e3       	ldi	r30, 0x31	; 49
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	80 81       	ld	r24, Z
    1b26:	48 2f       	mov	r20, r24
    1b28:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2a:	28 2f       	mov	r18, r24
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	02 2e       	mov	r0, r18
    1b34:	02 c0       	rjmp	.+4      	; 0x1b3a <GPIO_setupPinDirection+0x194>
    1b36:	88 0f       	add	r24, r24
    1b38:	99 1f       	adc	r25, r25
    1b3a:	0a 94       	dec	r0
    1b3c:	e2 f7       	brpl	.-8      	; 0x1b36 <GPIO_setupPinDirection+0x190>
    1b3e:	84 2b       	or	r24, r20
    1b40:	8c 93       	st	X, r24
    1b42:	14 c0       	rjmp	.+40     	; 0x1b6c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1b44:	a1 e3       	ldi	r26, 0x31	; 49
    1b46:	b0 e0       	ldi	r27, 0x00	; 0
    1b48:	e1 e3       	ldi	r30, 0x31	; 49
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	48 2f       	mov	r20, r24
    1b50:	8a 81       	ldd	r24, Y+2	; 0x02
    1b52:	28 2f       	mov	r18, r24
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	02 2e       	mov	r0, r18
    1b5c:	02 c0       	rjmp	.+4      	; 0x1b62 <GPIO_setupPinDirection+0x1bc>
    1b5e:	88 0f       	add	r24, r24
    1b60:	99 1f       	adc	r25, r25
    1b62:	0a 94       	dec	r0
    1b64:	e2 f7       	brpl	.-8      	; 0x1b5e <GPIO_setupPinDirection+0x1b8>
    1b66:	80 95       	com	r24
    1b68:	84 23       	and	r24, r20
    1b6a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1b6c:	0f 90       	pop	r0
    1b6e:	0f 90       	pop	r0
    1b70:	0f 90       	pop	r0
    1b72:	0f 90       	pop	r0
    1b74:	0f 90       	pop	r0
    1b76:	cf 91       	pop	r28
    1b78:	df 91       	pop	r29
    1b7a:	08 95       	ret

00001b7c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1b7c:	df 93       	push	r29
    1b7e:	cf 93       	push	r28
    1b80:	00 d0       	rcall	.+0      	; 0x1b82 <GPIO_writePin+0x6>
    1b82:	00 d0       	rcall	.+0      	; 0x1b84 <GPIO_writePin+0x8>
    1b84:	0f 92       	push	r0
    1b86:	cd b7       	in	r28, 0x3d	; 61
    1b88:	de b7       	in	r29, 0x3e	; 62
    1b8a:	89 83       	std	Y+1, r24	; 0x01
    1b8c:	6a 83       	std	Y+2, r22	; 0x02
    1b8e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1b90:	8a 81       	ldd	r24, Y+2	; 0x02
    1b92:	88 30       	cpi	r24, 0x08	; 8
    1b94:	08 f0       	brcs	.+2      	; 0x1b98 <GPIO_writePin+0x1c>
    1b96:	d5 c0       	rjmp	.+426    	; 0x1d42 <GPIO_writePin+0x1c6>
    1b98:	89 81       	ldd	r24, Y+1	; 0x01
    1b9a:	84 30       	cpi	r24, 0x04	; 4
    1b9c:	08 f0       	brcs	.+2      	; 0x1ba0 <GPIO_writePin+0x24>
    1b9e:	d1 c0       	rjmp	.+418    	; 0x1d42 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1ba0:	89 81       	ldd	r24, Y+1	; 0x01
    1ba2:	28 2f       	mov	r18, r24
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	3d 83       	std	Y+5, r19	; 0x05
    1ba8:	2c 83       	std	Y+4, r18	; 0x04
    1baa:	8c 81       	ldd	r24, Y+4	; 0x04
    1bac:	9d 81       	ldd	r25, Y+5	; 0x05
    1bae:	81 30       	cpi	r24, 0x01	; 1
    1bb0:	91 05       	cpc	r25, r1
    1bb2:	09 f4       	brne	.+2      	; 0x1bb6 <GPIO_writePin+0x3a>
    1bb4:	43 c0       	rjmp	.+134    	; 0x1c3c <GPIO_writePin+0xc0>
    1bb6:	2c 81       	ldd	r18, Y+4	; 0x04
    1bb8:	3d 81       	ldd	r19, Y+5	; 0x05
    1bba:	22 30       	cpi	r18, 0x02	; 2
    1bbc:	31 05       	cpc	r19, r1
    1bbe:	2c f4       	brge	.+10     	; 0x1bca <GPIO_writePin+0x4e>
    1bc0:	8c 81       	ldd	r24, Y+4	; 0x04
    1bc2:	9d 81       	ldd	r25, Y+5	; 0x05
    1bc4:	00 97       	sbiw	r24, 0x00	; 0
    1bc6:	71 f0       	breq	.+28     	; 0x1be4 <GPIO_writePin+0x68>
    1bc8:	bc c0       	rjmp	.+376    	; 0x1d42 <GPIO_writePin+0x1c6>
    1bca:	2c 81       	ldd	r18, Y+4	; 0x04
    1bcc:	3d 81       	ldd	r19, Y+5	; 0x05
    1bce:	22 30       	cpi	r18, 0x02	; 2
    1bd0:	31 05       	cpc	r19, r1
    1bd2:	09 f4       	brne	.+2      	; 0x1bd6 <GPIO_writePin+0x5a>
    1bd4:	5f c0       	rjmp	.+190    	; 0x1c94 <GPIO_writePin+0x118>
    1bd6:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd8:	9d 81       	ldd	r25, Y+5	; 0x05
    1bda:	83 30       	cpi	r24, 0x03	; 3
    1bdc:	91 05       	cpc	r25, r1
    1bde:	09 f4       	brne	.+2      	; 0x1be2 <GPIO_writePin+0x66>
    1be0:	85 c0       	rjmp	.+266    	; 0x1cec <GPIO_writePin+0x170>
    1be2:	af c0       	rjmp	.+350    	; 0x1d42 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1be4:	8b 81       	ldd	r24, Y+3	; 0x03
    1be6:	81 30       	cpi	r24, 0x01	; 1
    1be8:	a1 f4       	brne	.+40     	; 0x1c12 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1bea:	ab e3       	ldi	r26, 0x3B	; 59
    1bec:	b0 e0       	ldi	r27, 0x00	; 0
    1bee:	eb e3       	ldi	r30, 0x3B	; 59
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	80 81       	ld	r24, Z
    1bf4:	48 2f       	mov	r20, r24
    1bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf8:	28 2f       	mov	r18, r24
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	02 2e       	mov	r0, r18
    1c02:	02 c0       	rjmp	.+4      	; 0x1c08 <GPIO_writePin+0x8c>
    1c04:	88 0f       	add	r24, r24
    1c06:	99 1f       	adc	r25, r25
    1c08:	0a 94       	dec	r0
    1c0a:	e2 f7       	brpl	.-8      	; 0x1c04 <GPIO_writePin+0x88>
    1c0c:	84 2b       	or	r24, r20
    1c0e:	8c 93       	st	X, r24
    1c10:	98 c0       	rjmp	.+304    	; 0x1d42 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1c12:	ab e3       	ldi	r26, 0x3B	; 59
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	eb e3       	ldi	r30, 0x3B	; 59
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	48 2f       	mov	r20, r24
    1c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c20:	28 2f       	mov	r18, r24
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	02 2e       	mov	r0, r18
    1c2a:	02 c0       	rjmp	.+4      	; 0x1c30 <GPIO_writePin+0xb4>
    1c2c:	88 0f       	add	r24, r24
    1c2e:	99 1f       	adc	r25, r25
    1c30:	0a 94       	dec	r0
    1c32:	e2 f7       	brpl	.-8      	; 0x1c2c <GPIO_writePin+0xb0>
    1c34:	80 95       	com	r24
    1c36:	84 23       	and	r24, r20
    1c38:	8c 93       	st	X, r24
    1c3a:	83 c0       	rjmp	.+262    	; 0x1d42 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3e:	81 30       	cpi	r24, 0x01	; 1
    1c40:	a1 f4       	brne	.+40     	; 0x1c6a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1c42:	a8 e3       	ldi	r26, 0x38	; 56
    1c44:	b0 e0       	ldi	r27, 0x00	; 0
    1c46:	e8 e3       	ldi	r30, 0x38	; 56
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	48 2f       	mov	r20, r24
    1c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c50:	28 2f       	mov	r18, r24
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	02 2e       	mov	r0, r18
    1c5a:	02 c0       	rjmp	.+4      	; 0x1c60 <GPIO_writePin+0xe4>
    1c5c:	88 0f       	add	r24, r24
    1c5e:	99 1f       	adc	r25, r25
    1c60:	0a 94       	dec	r0
    1c62:	e2 f7       	brpl	.-8      	; 0x1c5c <GPIO_writePin+0xe0>
    1c64:	84 2b       	or	r24, r20
    1c66:	8c 93       	st	X, r24
    1c68:	6c c0       	rjmp	.+216    	; 0x1d42 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1c6a:	a8 e3       	ldi	r26, 0x38	; 56
    1c6c:	b0 e0       	ldi	r27, 0x00	; 0
    1c6e:	e8 e3       	ldi	r30, 0x38	; 56
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	80 81       	ld	r24, Z
    1c74:	48 2f       	mov	r20, r24
    1c76:	8a 81       	ldd	r24, Y+2	; 0x02
    1c78:	28 2f       	mov	r18, r24
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	02 2e       	mov	r0, r18
    1c82:	02 c0       	rjmp	.+4      	; 0x1c88 <GPIO_writePin+0x10c>
    1c84:	88 0f       	add	r24, r24
    1c86:	99 1f       	adc	r25, r25
    1c88:	0a 94       	dec	r0
    1c8a:	e2 f7       	brpl	.-8      	; 0x1c84 <GPIO_writePin+0x108>
    1c8c:	80 95       	com	r24
    1c8e:	84 23       	and	r24, r20
    1c90:	8c 93       	st	X, r24
    1c92:	57 c0       	rjmp	.+174    	; 0x1d42 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1c94:	8b 81       	ldd	r24, Y+3	; 0x03
    1c96:	81 30       	cpi	r24, 0x01	; 1
    1c98:	a1 f4       	brne	.+40     	; 0x1cc2 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1c9a:	a5 e3       	ldi	r26, 0x35	; 53
    1c9c:	b0 e0       	ldi	r27, 0x00	; 0
    1c9e:	e5 e3       	ldi	r30, 0x35	; 53
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	80 81       	ld	r24, Z
    1ca4:	48 2f       	mov	r20, r24
    1ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca8:	28 2f       	mov	r18, r24
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	02 2e       	mov	r0, r18
    1cb2:	02 c0       	rjmp	.+4      	; 0x1cb8 <GPIO_writePin+0x13c>
    1cb4:	88 0f       	add	r24, r24
    1cb6:	99 1f       	adc	r25, r25
    1cb8:	0a 94       	dec	r0
    1cba:	e2 f7       	brpl	.-8      	; 0x1cb4 <GPIO_writePin+0x138>
    1cbc:	84 2b       	or	r24, r20
    1cbe:	8c 93       	st	X, r24
    1cc0:	40 c0       	rjmp	.+128    	; 0x1d42 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1cc2:	a5 e3       	ldi	r26, 0x35	; 53
    1cc4:	b0 e0       	ldi	r27, 0x00	; 0
    1cc6:	e5 e3       	ldi	r30, 0x35	; 53
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	80 81       	ld	r24, Z
    1ccc:	48 2f       	mov	r20, r24
    1cce:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd0:	28 2f       	mov	r18, r24
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	02 2e       	mov	r0, r18
    1cda:	02 c0       	rjmp	.+4      	; 0x1ce0 <GPIO_writePin+0x164>
    1cdc:	88 0f       	add	r24, r24
    1cde:	99 1f       	adc	r25, r25
    1ce0:	0a 94       	dec	r0
    1ce2:	e2 f7       	brpl	.-8      	; 0x1cdc <GPIO_writePin+0x160>
    1ce4:	80 95       	com	r24
    1ce6:	84 23       	and	r24, r20
    1ce8:	8c 93       	st	X, r24
    1cea:	2b c0       	rjmp	.+86     	; 0x1d42 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1cec:	8b 81       	ldd	r24, Y+3	; 0x03
    1cee:	81 30       	cpi	r24, 0x01	; 1
    1cf0:	a1 f4       	brne	.+40     	; 0x1d1a <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1cf2:	a2 e3       	ldi	r26, 0x32	; 50
    1cf4:	b0 e0       	ldi	r27, 0x00	; 0
    1cf6:	e2 e3       	ldi	r30, 0x32	; 50
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	80 81       	ld	r24, Z
    1cfc:	48 2f       	mov	r20, r24
    1cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1d00:	28 2f       	mov	r18, r24
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	02 2e       	mov	r0, r18
    1d0a:	02 c0       	rjmp	.+4      	; 0x1d10 <GPIO_writePin+0x194>
    1d0c:	88 0f       	add	r24, r24
    1d0e:	99 1f       	adc	r25, r25
    1d10:	0a 94       	dec	r0
    1d12:	e2 f7       	brpl	.-8      	; 0x1d0c <GPIO_writePin+0x190>
    1d14:	84 2b       	or	r24, r20
    1d16:	8c 93       	st	X, r24
    1d18:	14 c0       	rjmp	.+40     	; 0x1d42 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1d1a:	a2 e3       	ldi	r26, 0x32	; 50
    1d1c:	b0 e0       	ldi	r27, 0x00	; 0
    1d1e:	e2 e3       	ldi	r30, 0x32	; 50
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	80 81       	ld	r24, Z
    1d24:	48 2f       	mov	r20, r24
    1d26:	8a 81       	ldd	r24, Y+2	; 0x02
    1d28:	28 2f       	mov	r18, r24
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	02 2e       	mov	r0, r18
    1d32:	02 c0       	rjmp	.+4      	; 0x1d38 <GPIO_writePin+0x1bc>
    1d34:	88 0f       	add	r24, r24
    1d36:	99 1f       	adc	r25, r25
    1d38:	0a 94       	dec	r0
    1d3a:	e2 f7       	brpl	.-8      	; 0x1d34 <GPIO_writePin+0x1b8>
    1d3c:	80 95       	com	r24
    1d3e:	84 23       	and	r24, r20
    1d40:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1d42:	0f 90       	pop	r0
    1d44:	0f 90       	pop	r0
    1d46:	0f 90       	pop	r0
    1d48:	0f 90       	pop	r0
    1d4a:	0f 90       	pop	r0
    1d4c:	cf 91       	pop	r28
    1d4e:	df 91       	pop	r29
    1d50:	08 95       	ret

00001d52 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1d52:	df 93       	push	r29
    1d54:	cf 93       	push	r28
    1d56:	00 d0       	rcall	.+0      	; 0x1d58 <GPIO_readPin+0x6>
    1d58:	00 d0       	rcall	.+0      	; 0x1d5a <GPIO_readPin+0x8>
    1d5a:	0f 92       	push	r0
    1d5c:	cd b7       	in	r28, 0x3d	; 61
    1d5e:	de b7       	in	r29, 0x3e	; 62
    1d60:	8a 83       	std	Y+2, r24	; 0x02
    1d62:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1d64:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1d66:	8b 81       	ldd	r24, Y+3	; 0x03
    1d68:	88 30       	cpi	r24, 0x08	; 8
    1d6a:	08 f0       	brcs	.+2      	; 0x1d6e <GPIO_readPin+0x1c>
    1d6c:	84 c0       	rjmp	.+264    	; 0x1e76 <GPIO_readPin+0x124>
    1d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d70:	84 30       	cpi	r24, 0x04	; 4
    1d72:	08 f0       	brcs	.+2      	; 0x1d76 <GPIO_readPin+0x24>
    1d74:	80 c0       	rjmp	.+256    	; 0x1e76 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1d76:	8a 81       	ldd	r24, Y+2	; 0x02
    1d78:	28 2f       	mov	r18, r24
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	3d 83       	std	Y+5, r19	; 0x05
    1d7e:	2c 83       	std	Y+4, r18	; 0x04
    1d80:	4c 81       	ldd	r20, Y+4	; 0x04
    1d82:	5d 81       	ldd	r21, Y+5	; 0x05
    1d84:	41 30       	cpi	r20, 0x01	; 1
    1d86:	51 05       	cpc	r21, r1
    1d88:	79 f1       	breq	.+94     	; 0x1de8 <GPIO_readPin+0x96>
    1d8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d8c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d8e:	82 30       	cpi	r24, 0x02	; 2
    1d90:	91 05       	cpc	r25, r1
    1d92:	34 f4       	brge	.+12     	; 0x1da0 <GPIO_readPin+0x4e>
    1d94:	2c 81       	ldd	r18, Y+4	; 0x04
    1d96:	3d 81       	ldd	r19, Y+5	; 0x05
    1d98:	21 15       	cp	r18, r1
    1d9a:	31 05       	cpc	r19, r1
    1d9c:	69 f0       	breq	.+26     	; 0x1db8 <GPIO_readPin+0x66>
    1d9e:	6b c0       	rjmp	.+214    	; 0x1e76 <GPIO_readPin+0x124>
    1da0:	4c 81       	ldd	r20, Y+4	; 0x04
    1da2:	5d 81       	ldd	r21, Y+5	; 0x05
    1da4:	42 30       	cpi	r20, 0x02	; 2
    1da6:	51 05       	cpc	r21, r1
    1da8:	b9 f1       	breq	.+110    	; 0x1e18 <GPIO_readPin+0xc6>
    1daa:	8c 81       	ldd	r24, Y+4	; 0x04
    1dac:	9d 81       	ldd	r25, Y+5	; 0x05
    1dae:	83 30       	cpi	r24, 0x03	; 3
    1db0:	91 05       	cpc	r25, r1
    1db2:	09 f4       	brne	.+2      	; 0x1db6 <GPIO_readPin+0x64>
    1db4:	49 c0       	rjmp	.+146    	; 0x1e48 <GPIO_readPin+0xf6>
    1db6:	5f c0       	rjmp	.+190    	; 0x1e76 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1db8:	e9 e3       	ldi	r30, 0x39	; 57
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	80 81       	ld	r24, Z
    1dbe:	28 2f       	mov	r18, r24
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc4:	88 2f       	mov	r24, r24
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	a9 01       	movw	r20, r18
    1dca:	02 c0       	rjmp	.+4      	; 0x1dd0 <GPIO_readPin+0x7e>
    1dcc:	55 95       	asr	r21
    1dce:	47 95       	ror	r20
    1dd0:	8a 95       	dec	r24
    1dd2:	e2 f7       	brpl	.-8      	; 0x1dcc <GPIO_readPin+0x7a>
    1dd4:	ca 01       	movw	r24, r20
    1dd6:	81 70       	andi	r24, 0x01	; 1
    1dd8:	90 70       	andi	r25, 0x00	; 0
    1dda:	88 23       	and	r24, r24
    1ddc:	19 f0       	breq	.+6      	; 0x1de4 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	89 83       	std	Y+1, r24	; 0x01
    1de2:	49 c0       	rjmp	.+146    	; 0x1e76 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1de4:	19 82       	std	Y+1, r1	; 0x01
    1de6:	47 c0       	rjmp	.+142    	; 0x1e76 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1de8:	e6 e3       	ldi	r30, 0x36	; 54
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	28 2f       	mov	r18, r24
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	8b 81       	ldd	r24, Y+3	; 0x03
    1df4:	88 2f       	mov	r24, r24
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	a9 01       	movw	r20, r18
    1dfa:	02 c0       	rjmp	.+4      	; 0x1e00 <GPIO_readPin+0xae>
    1dfc:	55 95       	asr	r21
    1dfe:	47 95       	ror	r20
    1e00:	8a 95       	dec	r24
    1e02:	e2 f7       	brpl	.-8      	; 0x1dfc <GPIO_readPin+0xaa>
    1e04:	ca 01       	movw	r24, r20
    1e06:	81 70       	andi	r24, 0x01	; 1
    1e08:	90 70       	andi	r25, 0x00	; 0
    1e0a:	88 23       	and	r24, r24
    1e0c:	19 f0       	breq	.+6      	; 0x1e14 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	89 83       	std	Y+1, r24	; 0x01
    1e12:	31 c0       	rjmp	.+98     	; 0x1e76 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1e14:	19 82       	std	Y+1, r1	; 0x01
    1e16:	2f c0       	rjmp	.+94     	; 0x1e76 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1e18:	e3 e3       	ldi	r30, 0x33	; 51
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	80 81       	ld	r24, Z
    1e1e:	28 2f       	mov	r18, r24
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	8b 81       	ldd	r24, Y+3	; 0x03
    1e24:	88 2f       	mov	r24, r24
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	a9 01       	movw	r20, r18
    1e2a:	02 c0       	rjmp	.+4      	; 0x1e30 <GPIO_readPin+0xde>
    1e2c:	55 95       	asr	r21
    1e2e:	47 95       	ror	r20
    1e30:	8a 95       	dec	r24
    1e32:	e2 f7       	brpl	.-8      	; 0x1e2c <GPIO_readPin+0xda>
    1e34:	ca 01       	movw	r24, r20
    1e36:	81 70       	andi	r24, 0x01	; 1
    1e38:	90 70       	andi	r25, 0x00	; 0
    1e3a:	88 23       	and	r24, r24
    1e3c:	19 f0       	breq	.+6      	; 0x1e44 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	89 83       	std	Y+1, r24	; 0x01
    1e42:	19 c0       	rjmp	.+50     	; 0x1e76 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1e44:	19 82       	std	Y+1, r1	; 0x01
    1e46:	17 c0       	rjmp	.+46     	; 0x1e76 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1e48:	e0 e3       	ldi	r30, 0x30	; 48
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	80 81       	ld	r24, Z
    1e4e:	28 2f       	mov	r18, r24
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	8b 81       	ldd	r24, Y+3	; 0x03
    1e54:	88 2f       	mov	r24, r24
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	a9 01       	movw	r20, r18
    1e5a:	02 c0       	rjmp	.+4      	; 0x1e60 <GPIO_readPin+0x10e>
    1e5c:	55 95       	asr	r21
    1e5e:	47 95       	ror	r20
    1e60:	8a 95       	dec	r24
    1e62:	e2 f7       	brpl	.-8      	; 0x1e5c <GPIO_readPin+0x10a>
    1e64:	ca 01       	movw	r24, r20
    1e66:	81 70       	andi	r24, 0x01	; 1
    1e68:	90 70       	andi	r25, 0x00	; 0
    1e6a:	88 23       	and	r24, r24
    1e6c:	19 f0       	breq	.+6      	; 0x1e74 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	89 83       	std	Y+1, r24	; 0x01
    1e72:	01 c0       	rjmp	.+2      	; 0x1e76 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1e74:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1e76:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e78:	0f 90       	pop	r0
    1e7a:	0f 90       	pop	r0
    1e7c:	0f 90       	pop	r0
    1e7e:	0f 90       	pop	r0
    1e80:	0f 90       	pop	r0
    1e82:	cf 91       	pop	r28
    1e84:	df 91       	pop	r29
    1e86:	08 95       	ret

00001e88 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1e88:	df 93       	push	r29
    1e8a:	cf 93       	push	r28
    1e8c:	00 d0       	rcall	.+0      	; 0x1e8e <GPIO_setupPortDirection+0x6>
    1e8e:	00 d0       	rcall	.+0      	; 0x1e90 <GPIO_setupPortDirection+0x8>
    1e90:	cd b7       	in	r28, 0x3d	; 61
    1e92:	de b7       	in	r29, 0x3e	; 62
    1e94:	89 83       	std	Y+1, r24	; 0x01
    1e96:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1e98:	89 81       	ldd	r24, Y+1	; 0x01
    1e9a:	84 30       	cpi	r24, 0x04	; 4
    1e9c:	90 f5       	brcc	.+100    	; 0x1f02 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1e9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ea0:	28 2f       	mov	r18, r24
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	3c 83       	std	Y+4, r19	; 0x04
    1ea6:	2b 83       	std	Y+3, r18	; 0x03
    1ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eaa:	9c 81       	ldd	r25, Y+4	; 0x04
    1eac:	81 30       	cpi	r24, 0x01	; 1
    1eae:	91 05       	cpc	r25, r1
    1eb0:	d1 f0       	breq	.+52     	; 0x1ee6 <GPIO_setupPortDirection+0x5e>
    1eb2:	2b 81       	ldd	r18, Y+3	; 0x03
    1eb4:	3c 81       	ldd	r19, Y+4	; 0x04
    1eb6:	22 30       	cpi	r18, 0x02	; 2
    1eb8:	31 05       	cpc	r19, r1
    1eba:	2c f4       	brge	.+10     	; 0x1ec6 <GPIO_setupPortDirection+0x3e>
    1ebc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ebe:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec0:	00 97       	sbiw	r24, 0x00	; 0
    1ec2:	61 f0       	breq	.+24     	; 0x1edc <GPIO_setupPortDirection+0x54>
    1ec4:	1e c0       	rjmp	.+60     	; 0x1f02 <GPIO_setupPortDirection+0x7a>
    1ec6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ec8:	3c 81       	ldd	r19, Y+4	; 0x04
    1eca:	22 30       	cpi	r18, 0x02	; 2
    1ecc:	31 05       	cpc	r19, r1
    1ece:	81 f0       	breq	.+32     	; 0x1ef0 <GPIO_setupPortDirection+0x68>
    1ed0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed4:	83 30       	cpi	r24, 0x03	; 3
    1ed6:	91 05       	cpc	r25, r1
    1ed8:	81 f0       	breq	.+32     	; 0x1efa <GPIO_setupPortDirection+0x72>
    1eda:	13 c0       	rjmp	.+38     	; 0x1f02 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1edc:	ea e3       	ldi	r30, 0x3A	; 58
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee2:	80 83       	st	Z, r24
    1ee4:	0e c0       	rjmp	.+28     	; 0x1f02 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1ee6:	e7 e3       	ldi	r30, 0x37	; 55
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	8a 81       	ldd	r24, Y+2	; 0x02
    1eec:	80 83       	st	Z, r24
    1eee:	09 c0       	rjmp	.+18     	; 0x1f02 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1ef0:	e4 e3       	ldi	r30, 0x34	; 52
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef6:	80 83       	st	Z, r24
    1ef8:	04 c0       	rjmp	.+8      	; 0x1f02 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1efa:	e1 e3       	ldi	r30, 0x31	; 49
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	8a 81       	ldd	r24, Y+2	; 0x02
    1f00:	80 83       	st	Z, r24
			break;
		}
	}
}
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	0f 90       	pop	r0
    1f08:	0f 90       	pop	r0
    1f0a:	cf 91       	pop	r28
    1f0c:	df 91       	pop	r29
    1f0e:	08 95       	ret

00001f10 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1f10:	df 93       	push	r29
    1f12:	cf 93       	push	r28
    1f14:	00 d0       	rcall	.+0      	; 0x1f16 <GPIO_writePort+0x6>
    1f16:	00 d0       	rcall	.+0      	; 0x1f18 <GPIO_writePort+0x8>
    1f18:	cd b7       	in	r28, 0x3d	; 61
    1f1a:	de b7       	in	r29, 0x3e	; 62
    1f1c:	89 83       	std	Y+1, r24	; 0x01
    1f1e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1f20:	89 81       	ldd	r24, Y+1	; 0x01
    1f22:	84 30       	cpi	r24, 0x04	; 4
    1f24:	90 f5       	brcc	.+100    	; 0x1f8a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1f26:	89 81       	ldd	r24, Y+1	; 0x01
    1f28:	28 2f       	mov	r18, r24
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	3c 83       	std	Y+4, r19	; 0x04
    1f2e:	2b 83       	std	Y+3, r18	; 0x03
    1f30:	8b 81       	ldd	r24, Y+3	; 0x03
    1f32:	9c 81       	ldd	r25, Y+4	; 0x04
    1f34:	81 30       	cpi	r24, 0x01	; 1
    1f36:	91 05       	cpc	r25, r1
    1f38:	d1 f0       	breq	.+52     	; 0x1f6e <GPIO_writePort+0x5e>
    1f3a:	2b 81       	ldd	r18, Y+3	; 0x03
    1f3c:	3c 81       	ldd	r19, Y+4	; 0x04
    1f3e:	22 30       	cpi	r18, 0x02	; 2
    1f40:	31 05       	cpc	r19, r1
    1f42:	2c f4       	brge	.+10     	; 0x1f4e <GPIO_writePort+0x3e>
    1f44:	8b 81       	ldd	r24, Y+3	; 0x03
    1f46:	9c 81       	ldd	r25, Y+4	; 0x04
    1f48:	00 97       	sbiw	r24, 0x00	; 0
    1f4a:	61 f0       	breq	.+24     	; 0x1f64 <GPIO_writePort+0x54>
    1f4c:	1e c0       	rjmp	.+60     	; 0x1f8a <GPIO_writePort+0x7a>
    1f4e:	2b 81       	ldd	r18, Y+3	; 0x03
    1f50:	3c 81       	ldd	r19, Y+4	; 0x04
    1f52:	22 30       	cpi	r18, 0x02	; 2
    1f54:	31 05       	cpc	r19, r1
    1f56:	81 f0       	breq	.+32     	; 0x1f78 <GPIO_writePort+0x68>
    1f58:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f5c:	83 30       	cpi	r24, 0x03	; 3
    1f5e:	91 05       	cpc	r25, r1
    1f60:	81 f0       	breq	.+32     	; 0x1f82 <GPIO_writePort+0x72>
    1f62:	13 c0       	rjmp	.+38     	; 0x1f8a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1f64:	eb e3       	ldi	r30, 0x3B	; 59
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6a:	80 83       	st	Z, r24
    1f6c:	0e c0       	rjmp	.+28     	; 0x1f8a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1f6e:	e8 e3       	ldi	r30, 0x38	; 56
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	8a 81       	ldd	r24, Y+2	; 0x02
    1f74:	80 83       	st	Z, r24
    1f76:	09 c0       	rjmp	.+18     	; 0x1f8a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1f78:	e5 e3       	ldi	r30, 0x35	; 53
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7e:	80 83       	st	Z, r24
    1f80:	04 c0       	rjmp	.+8      	; 0x1f8a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1f82:	e2 e3       	ldi	r30, 0x32	; 50
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	8a 81       	ldd	r24, Y+2	; 0x02
    1f88:	80 83       	st	Z, r24
			break;
		}
	}
}
    1f8a:	0f 90       	pop	r0
    1f8c:	0f 90       	pop	r0
    1f8e:	0f 90       	pop	r0
    1f90:	0f 90       	pop	r0
    1f92:	cf 91       	pop	r28
    1f94:	df 91       	pop	r29
    1f96:	08 95       	ret

00001f98 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1f98:	df 93       	push	r29
    1f9a:	cf 93       	push	r28
    1f9c:	00 d0       	rcall	.+0      	; 0x1f9e <GPIO_readPort+0x6>
    1f9e:	00 d0       	rcall	.+0      	; 0x1fa0 <GPIO_readPort+0x8>
    1fa0:	cd b7       	in	r28, 0x3d	; 61
    1fa2:	de b7       	in	r29, 0x3e	; 62
    1fa4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1fa6:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1fa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1faa:	84 30       	cpi	r24, 0x04	; 4
    1fac:	90 f5       	brcc	.+100    	; 0x2012 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1fae:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb0:	28 2f       	mov	r18, r24
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	3c 83       	std	Y+4, r19	; 0x04
    1fb6:	2b 83       	std	Y+3, r18	; 0x03
    1fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fba:	9c 81       	ldd	r25, Y+4	; 0x04
    1fbc:	81 30       	cpi	r24, 0x01	; 1
    1fbe:	91 05       	cpc	r25, r1
    1fc0:	d1 f0       	breq	.+52     	; 0x1ff6 <GPIO_readPort+0x5e>
    1fc2:	2b 81       	ldd	r18, Y+3	; 0x03
    1fc4:	3c 81       	ldd	r19, Y+4	; 0x04
    1fc6:	22 30       	cpi	r18, 0x02	; 2
    1fc8:	31 05       	cpc	r19, r1
    1fca:	2c f4       	brge	.+10     	; 0x1fd6 <GPIO_readPort+0x3e>
    1fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fce:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd0:	00 97       	sbiw	r24, 0x00	; 0
    1fd2:	61 f0       	breq	.+24     	; 0x1fec <GPIO_readPort+0x54>
    1fd4:	1e c0       	rjmp	.+60     	; 0x2012 <GPIO_readPort+0x7a>
    1fd6:	2b 81       	ldd	r18, Y+3	; 0x03
    1fd8:	3c 81       	ldd	r19, Y+4	; 0x04
    1fda:	22 30       	cpi	r18, 0x02	; 2
    1fdc:	31 05       	cpc	r19, r1
    1fde:	81 f0       	breq	.+32     	; 0x2000 <GPIO_readPort+0x68>
    1fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe4:	83 30       	cpi	r24, 0x03	; 3
    1fe6:	91 05       	cpc	r25, r1
    1fe8:	81 f0       	breq	.+32     	; 0x200a <GPIO_readPort+0x72>
    1fea:	13 c0       	rjmp	.+38     	; 0x2012 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1fec:	e9 e3       	ldi	r30, 0x39	; 57
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	80 81       	ld	r24, Z
    1ff2:	89 83       	std	Y+1, r24	; 0x01
    1ff4:	0e c0       	rjmp	.+28     	; 0x2012 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1ff6:	e6 e3       	ldi	r30, 0x36	; 54
    1ff8:	f0 e0       	ldi	r31, 0x00	; 0
    1ffa:	80 81       	ld	r24, Z
    1ffc:	89 83       	std	Y+1, r24	; 0x01
    1ffe:	09 c0       	rjmp	.+18     	; 0x2012 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2000:	e3 e3       	ldi	r30, 0x33	; 51
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	80 81       	ld	r24, Z
    2006:	89 83       	std	Y+1, r24	; 0x01
    2008:	04 c0       	rjmp	.+8      	; 0x2012 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    200a:	e0 e3       	ldi	r30, 0x30	; 48
    200c:	f0 e0       	ldi	r31, 0x00	; 0
    200e:	80 81       	ld	r24, Z
    2010:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2012:	89 81       	ldd	r24, Y+1	; 0x01
}
    2014:	0f 90       	pop	r0
    2016:	0f 90       	pop	r0
    2018:	0f 90       	pop	r0
    201a:	0f 90       	pop	r0
    201c:	cf 91       	pop	r28
    201e:	df 91       	pop	r29
    2020:	08 95       	ret

00002022 <Timer0_init>:
#include"gpio.h"
#include"common_macros.h"
#include"avr/io.h"

void Timer0_init(const Timer0_Config *Config_Ptr)
{
    2022:	df 93       	push	r29
    2024:	cf 93       	push	r28
    2026:	00 d0       	rcall	.+0      	; 0x2028 <Timer0_init+0x6>
    2028:	00 d0       	rcall	.+0      	; 0x202a <Timer0_init+0x8>
    202a:	cd b7       	in	r28, 0x3d	; 61
    202c:	de b7       	in	r29, 0x3e	; 62
    202e:	9a 83       	std	Y+2, r25	; 0x02
    2030:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0;
    2032:	e2 e5       	ldi	r30, 0x52	; 82
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	10 82       	st	Z, r1

	GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	63 e0       	ldi	r22, 0x03	; 3
    203c:	41 e0       	ldi	r20, 0x01	; 1
    203e:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <GPIO_setupPinDirection>

	switch (Config_Ptr->timer_mode) {
    2042:	e9 81       	ldd	r30, Y+1	; 0x01
    2044:	fa 81       	ldd	r31, Y+2	; 0x02
    2046:	80 81       	ld	r24, Z
    2048:	28 2f       	mov	r18, r24
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	3c 83       	std	Y+4, r19	; 0x04
    204e:	2b 83       	std	Y+3, r18	; 0x03
    2050:	8b 81       	ldd	r24, Y+3	; 0x03
    2052:	9c 81       	ldd	r25, Y+4	; 0x04
    2054:	81 30       	cpi	r24, 0x01	; 1
    2056:	91 05       	cpc	r25, r1
    2058:	c1 f0       	breq	.+48     	; 0x208a <Timer0_init+0x68>
    205a:	2b 81       	ldd	r18, Y+3	; 0x03
    205c:	3c 81       	ldd	r19, Y+4	; 0x04
    205e:	22 30       	cpi	r18, 0x02	; 2
    2060:	31 05       	cpc	r19, r1
    2062:	11 f1       	breq	.+68     	; 0x20a8 <Timer0_init+0x86>
    2064:	8b 81       	ldd	r24, Y+3	; 0x03
    2066:	9c 81       	ldd	r25, Y+4	; 0x04
    2068:	00 97       	sbiw	r24, 0x00	; 0
    206a:	61 f5       	brne	.+88     	; 0x20c4 <Timer0_init+0xa2>
		case (NORMAL0_MODE):
			CLEAR_BIT(TCCR0, WGM00);
    206c:	a3 e5       	ldi	r26, 0x53	; 83
    206e:	b0 e0       	ldi	r27, 0x00	; 0
    2070:	e3 e5       	ldi	r30, 0x53	; 83
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	80 81       	ld	r24, Z
    2076:	8f 7b       	andi	r24, 0xBF	; 191
    2078:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0, WGM01);
    207a:	a3 e5       	ldi	r26, 0x53	; 83
    207c:	b0 e0       	ldi	r27, 0x00	; 0
    207e:	e3 e5       	ldi	r30, 0x53	; 83
    2080:	f0 e0       	ldi	r31, 0x00	; 0
    2082:	80 81       	ld	r24, Z
    2084:	87 7f       	andi	r24, 0xF7	; 247
    2086:	8c 93       	st	X, r24
    2088:	1d c0       	rjmp	.+58     	; 0x20c4 <Timer0_init+0xa2>
			break;
		case COMPARE0_MODE:
			CLEAR_BIT(TCCR0, WGM00);
    208a:	a3 e5       	ldi	r26, 0x53	; 83
    208c:	b0 e0       	ldi	r27, 0x00	; 0
    208e:	e3 e5       	ldi	r30, 0x53	; 83
    2090:	f0 e0       	ldi	r31, 0x00	; 0
    2092:	80 81       	ld	r24, Z
    2094:	8f 7b       	andi	r24, 0xBF	; 191
    2096:	8c 93       	st	X, r24
			SET_BIT(TCCR0, WGM01);
    2098:	a3 e5       	ldi	r26, 0x53	; 83
    209a:	b0 e0       	ldi	r27, 0x00	; 0
    209c:	e3 e5       	ldi	r30, 0x53	; 83
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	80 81       	ld	r24, Z
    20a2:	88 60       	ori	r24, 0x08	; 8
    20a4:	8c 93       	st	X, r24
    20a6:	0e c0       	rjmp	.+28     	; 0x20c4 <Timer0_init+0xa2>
			break;
		case FAST_PWM_MODE:
			SET_BIT(TCCR0, WGM00);
    20a8:	a3 e5       	ldi	r26, 0x53	; 83
    20aa:	b0 e0       	ldi	r27, 0x00	; 0
    20ac:	e3 e5       	ldi	r30, 0x53	; 83
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	80 81       	ld	r24, Z
    20b2:	80 64       	ori	r24, 0x40	; 64
    20b4:	8c 93       	st	X, r24
			SET_BIT(TCCR0, WGM01);
    20b6:	a3 e5       	ldi	r26, 0x53	; 83
    20b8:	b0 e0       	ldi	r27, 0x00	; 0
    20ba:	e3 e5       	ldi	r30, 0x53	; 83
    20bc:	f0 e0       	ldi	r31, 0x00	; 0
    20be:	80 81       	ld	r24, Z
    20c0:	88 60       	ori	r24, 0x08	; 8
    20c2:	8c 93       	st	X, r24
			break;
		}
	TCCR0 = (TCCR0 & 0xf8) | (Config_Ptr->clock);
    20c4:	a3 e5       	ldi	r26, 0x53	; 83
    20c6:	b0 e0       	ldi	r27, 0x00	; 0
    20c8:	e3 e5       	ldi	r30, 0x53	; 83
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	80 81       	ld	r24, Z
    20ce:	98 2f       	mov	r25, r24
    20d0:	98 7f       	andi	r25, 0xF8	; 248
    20d2:	e9 81       	ldd	r30, Y+1	; 0x01
    20d4:	fa 81       	ldd	r31, Y+2	; 0x02
    20d6:	82 81       	ldd	r24, Z+2	; 0x02
    20d8:	89 2b       	or	r24, r25
    20da:	8c 93       	st	X, r24
	TCCR0 = (TCCR0 & 0xcf) | (Config_Ptr->pwm_mode << 4);
    20dc:	a3 e5       	ldi	r26, 0x53	; 83
    20de:	b0 e0       	ldi	r27, 0x00	; 0
    20e0:	e3 e5       	ldi	r30, 0x53	; 83
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	80 81       	ld	r24, Z
    20e6:	28 2f       	mov	r18, r24
    20e8:	2f 7c       	andi	r18, 0xCF	; 207
    20ea:	e9 81       	ldd	r30, Y+1	; 0x01
    20ec:	fa 81       	ldd	r31, Y+2	; 0x02
    20ee:	81 81       	ldd	r24, Z+1	; 0x01
    20f0:	88 2f       	mov	r24, r24
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	82 95       	swap	r24
    20f6:	92 95       	swap	r25
    20f8:	90 7f       	andi	r25, 0xF0	; 240
    20fa:	98 27       	eor	r25, r24
    20fc:	80 7f       	andi	r24, 0xF0	; 240
    20fe:	98 27       	eor	r25, r24
    2100:	82 2b       	or	r24, r18
    2102:	8c 93       	st	X, r24
}
    2104:	0f 90       	pop	r0
    2106:	0f 90       	pop	r0
    2108:	0f 90       	pop	r0
    210a:	0f 90       	pop	r0
    210c:	cf 91       	pop	r28
    210e:	df 91       	pop	r29
    2110:	08 95       	ret

00002112 <Timer0_PWM_Start>:
/*
 * Description :
 *  Setup the compare value based on the required input duty cycle.
 */
void Timer0_PWM_Start(uint8 duty_cycle_percentage) {
    2112:	df 93       	push	r29
    2114:	cf 93       	push	r28
    2116:	00 d0       	rcall	.+0      	; 0x2118 <Timer0_PWM_Start+0x6>
    2118:	cd b7       	in	r28, 0x3d	; 61
    211a:	de b7       	in	r29, 0x3e	; 62
    211c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 top = (float) (duty_cycle_percentage / 100.0) * TIMER0_MAX_VALUE;
    211e:	8a 81       	ldd	r24, Y+2	; 0x02
    2120:	88 2f       	mov	r24, r24
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	aa 27       	eor	r26, r26
    2126:	97 fd       	sbrc	r25, 7
    2128:	a0 95       	com	r26
    212a:	ba 2f       	mov	r27, r26
    212c:	bc 01       	movw	r22, r24
    212e:	cd 01       	movw	r24, r26
    2130:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	bc 01       	movw	r22, r24
    213a:	cd 01       	movw	r24, r26
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	48 ec       	ldi	r20, 0xC8	; 200
    2142:	52 e4       	ldi	r21, 0x42	; 66
    2144:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	bc 01       	movw	r22, r24
    214e:	cd 01       	movw	r24, r26
    2150:	20 e0       	ldi	r18, 0x00	; 0
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	4f e7       	ldi	r20, 0x7F	; 127
    2156:	53 e4       	ldi	r21, 0x43	; 67
    2158:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    215c:	dc 01       	movw	r26, r24
    215e:	cb 01       	movw	r24, r22
    2160:	bc 01       	movw	r22, r24
    2162:	cd 01       	movw	r24, r26
    2164:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2168:	dc 01       	movw	r26, r24
    216a:	cb 01       	movw	r24, r22
    216c:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = top;
    216e:	ec e5       	ldi	r30, 0x5C	; 92
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	89 81       	ldd	r24, Y+1	; 0x01
    2174:	80 83       	st	Z, r24
}
    2176:	0f 90       	pop	r0
    2178:	0f 90       	pop	r0
    217a:	cf 91       	pop	r28
    217c:	df 91       	pop	r29
    217e:	08 95       	ret

00002180 <TIMER0_deinit>:
/*
 * Description :
 * Function responsible for De_initialize the TIMER_0 driver.
 */
void TIMER0_deinit() {
    2180:	df 93       	push	r29
    2182:	cf 93       	push	r28
    2184:	cd b7       	in	r28, 0x3d	; 61
    2186:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = OCR0 = TCCR0 = 0;
    2188:	22 e5       	ldi	r18, 0x52	; 82
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	ac e5       	ldi	r26, 0x5C	; 92
    218e:	b0 e0       	ldi	r27, 0x00	; 0
    2190:	e3 e5       	ldi	r30, 0x53	; 83
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	10 82       	st	Z, r1
    2196:	80 81       	ld	r24, Z
    2198:	8c 93       	st	X, r24
    219a:	8c 91       	ld	r24, X
    219c:	f9 01       	movw	r30, r18
    219e:	80 83       	st	Z, r24
}
    21a0:	cf 91       	pop	r28
    21a2:	df 91       	pop	r29
    21a4:	08 95       	ret

000021a6 <__vector_7>:
static volatile void(*callBack_ptr)(void) = NULL_PTR;


/* Interrupt Service Routine for timer1 compare mode */
ISR(TIMER1_COMPA_vect)
{
    21a6:	1f 92       	push	r1
    21a8:	0f 92       	push	r0
    21aa:	0f b6       	in	r0, 0x3f	; 63
    21ac:	0f 92       	push	r0
    21ae:	11 24       	eor	r1, r1
    21b0:	2f 93       	push	r18
    21b2:	3f 93       	push	r19
    21b4:	4f 93       	push	r20
    21b6:	5f 93       	push	r21
    21b8:	6f 93       	push	r22
    21ba:	7f 93       	push	r23
    21bc:	8f 93       	push	r24
    21be:	9f 93       	push	r25
    21c0:	af 93       	push	r26
    21c2:	bf 93       	push	r27
    21c4:	ef 93       	push	r30
    21c6:	ff 93       	push	r31
    21c8:	df 93       	push	r29
    21ca:	cf 93       	push	r28
    21cc:	cd b7       	in	r28, 0x3d	; 61
    21ce:	de b7       	in	r29, 0x3e	; 62
	if(callBack_ptr != NULL_PTR){
    21d0:	80 91 7b 01 	lds	r24, 0x017B
    21d4:	90 91 7c 01 	lds	r25, 0x017C
    21d8:	00 97       	sbiw	r24, 0x00	; 0
    21da:	29 f0       	breq	.+10     	; 0x21e6 <__vector_7+0x40>
			(*callBack_ptr)();
    21dc:	e0 91 7b 01 	lds	r30, 0x017B
    21e0:	f0 91 7c 01 	lds	r31, 0x017C
    21e4:	09 95       	icall
		}
}
    21e6:	cf 91       	pop	r28
    21e8:	df 91       	pop	r29
    21ea:	ff 91       	pop	r31
    21ec:	ef 91       	pop	r30
    21ee:	bf 91       	pop	r27
    21f0:	af 91       	pop	r26
    21f2:	9f 91       	pop	r25
    21f4:	8f 91       	pop	r24
    21f6:	7f 91       	pop	r23
    21f8:	6f 91       	pop	r22
    21fa:	5f 91       	pop	r21
    21fc:	4f 91       	pop	r20
    21fe:	3f 91       	pop	r19
    2200:	2f 91       	pop	r18
    2202:	0f 90       	pop	r0
    2204:	0f be       	out	0x3f, r0	; 63
    2206:	0f 90       	pop	r0
    2208:	1f 90       	pop	r1
    220a:	18 95       	reti

0000220c <Timer1_init>:

/*
 * Description :
 * Function to initialize the Timer driver
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    220c:	df 93       	push	r29
    220e:	cf 93       	push	r28
    2210:	00 d0       	rcall	.+0      	; 0x2212 <Timer1_init+0x6>
    2212:	cd b7       	in	r28, 0x3d	; 61
    2214:	de b7       	in	r29, 0x3e	; 62
    2216:	9a 83       	std	Y+2, r25	; 0x02
    2218:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=Config_Ptr->initial_value;           /* Set timer1 initial count */
    221a:	ac e4       	ldi	r26, 0x4C	; 76
    221c:	b0 e0       	ldi	r27, 0x00	; 0
    221e:	e9 81       	ldd	r30, Y+1	; 0x01
    2220:	fa 81       	ldd	r31, Y+2	; 0x02
    2222:	80 81       	ld	r24, Z
    2224:	91 81       	ldd	r25, Z+1	; 0x01
    2226:	11 96       	adiw	r26, 0x01	; 1
    2228:	9c 93       	st	X, r25
    222a:	8e 93       	st	-X, r24
	OCR1A=Config_Ptr->compare_value;           /* Set the Compare value*/
    222c:	aa e4       	ldi	r26, 0x4A	; 74
    222e:	b0 e0       	ldi	r27, 0x00	; 0
    2230:	e9 81       	ldd	r30, Y+1	; 0x01
    2232:	fa 81       	ldd	r31, Y+2	; 0x02
    2234:	82 81       	ldd	r24, Z+2	; 0x02
    2236:	93 81       	ldd	r25, Z+3	; 0x03
    2238:	11 96       	adiw	r26, 0x01	; 1
    223a:	9c 93       	st	X, r25
    223c:	8e 93       	st	-X, r24

	if((Config_Ptr->mode)==0){
    223e:	e9 81       	ldd	r30, Y+1	; 0x01
    2240:	fa 81       	ldd	r31, Y+2	; 0x02
    2242:	85 81       	ldd	r24, Z+5	; 0x05
    2244:	88 23       	and	r24, r24
    2246:	41 f4       	brne	.+16     	; 0x2258 <Timer1_init+0x4c>
				/*normal mode is selected*/
		TIMSK |= (1<<TOIE1); /* Enable Timer1 normal-mode Interrupt */
    2248:	a9 e5       	ldi	r26, 0x59	; 89
    224a:	b0 e0       	ldi	r27, 0x00	; 0
    224c:	e9 e5       	ldi	r30, 0x59	; 89
    224e:	f0 e0       	ldi	r31, 0x00	; 0
    2250:	80 81       	ld	r24, Z
    2252:	84 60       	ori	r24, 0x04	; 4
    2254:	8c 93       	st	X, r24
    2256:	0c c0       	rjmp	.+24     	; 0x2270 <Timer1_init+0x64>
					}
		else if((Config_Ptr->mode)==4) {
    2258:	e9 81       	ldd	r30, Y+1	; 0x01
    225a:	fa 81       	ldd	r31, Y+2	; 0x02
    225c:	85 81       	ldd	r24, Z+5	; 0x05
    225e:	84 30       	cpi	r24, 0x04	; 4
    2260:	39 f4       	brne	.+14     	; 0x2270 <Timer1_init+0x64>
			/*comare mode is selected*/
			TIMSK |= (1 << OCIE1A);  /* Enable Timer1 compare-mode Interrupt */
    2262:	a9 e5       	ldi	r26, 0x59	; 89
    2264:	b0 e0       	ldi	r27, 0x00	; 0
    2266:	e9 e5       	ldi	r30, 0x59	; 89
    2268:	f0 e0       	ldi	r31, 0x00	; 0
    226a:	80 81       	ld	r24, Z
    226c:	80 61       	ori	r24, 0x10	; 16
    226e:	8c 93       	st	X, r24

	/*
	 * FOC1A : It will be set when Timer1 Operate in non PWM Mode
	 * Set First 2-bits From Mode Member to Specify which Mode Timer1 Will Operate
	*/
	TCCR1A = (1<<FOC1A) | (1<<FOC1B) | ((TCCR1A & 0xFC) | (Config_Ptr->mode & 0x03));
    2270:	af e4       	ldi	r26, 0x4F	; 79
    2272:	b0 e0       	ldi	r27, 0x00	; 0
    2274:	ef e4       	ldi	r30, 0x4F	; 79
    2276:	f0 e0       	ldi	r31, 0x00	; 0
    2278:	80 81       	ld	r24, Z
    227a:	98 2f       	mov	r25, r24
    227c:	9c 7f       	andi	r25, 0xFC	; 252
    227e:	e9 81       	ldd	r30, Y+1	; 0x01
    2280:	fa 81       	ldd	r31, Y+2	; 0x02
    2282:	85 81       	ldd	r24, Z+5	; 0x05
    2284:	83 70       	andi	r24, 0x03	; 3
    2286:	89 2b       	or	r24, r25
    2288:	8c 60       	ori	r24, 0x0C	; 12
    228a:	8c 93       	st	X, r24

	/*
		 * insert the required clock value in the first three bits (CS10, CS11 and CS12) of TCCR1B Register
		 * Set Last 2-bits From Mode Member to Specify Which Mode Timer1 Will Operate
	 */
	TCCR1B = (TCCR1B & 0xF8) | ((Config_Ptr->prescaler)& 0x07) | ((TCCR1B & 0xE7) | ((Config_Ptr->mode & 0x0C)<<1));
    228c:	ae e4       	ldi	r26, 0x4E	; 78
    228e:	b0 e0       	ldi	r27, 0x00	; 0
    2290:	ee e4       	ldi	r30, 0x4E	; 78
    2292:	f0 e0       	ldi	r31, 0x00	; 0
    2294:	80 81       	ld	r24, Z
    2296:	98 2f       	mov	r25, r24
    2298:	98 7f       	andi	r25, 0xF8	; 248
    229a:	e9 81       	ldd	r30, Y+1	; 0x01
    229c:	fa 81       	ldd	r31, Y+2	; 0x02
    229e:	84 81       	ldd	r24, Z+4	; 0x04
    22a0:	87 70       	andi	r24, 0x07	; 7
    22a2:	39 2f       	mov	r19, r25
    22a4:	38 2b       	or	r19, r24
    22a6:	ee e4       	ldi	r30, 0x4E	; 78
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	80 81       	ld	r24, Z
    22ac:	28 2f       	mov	r18, r24
    22ae:	27 7e       	andi	r18, 0xE7	; 231
    22b0:	e9 81       	ldd	r30, Y+1	; 0x01
    22b2:	fa 81       	ldd	r31, Y+2	; 0x02
    22b4:	85 81       	ldd	r24, Z+5	; 0x05
    22b6:	88 2f       	mov	r24, r24
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	8c 70       	andi	r24, 0x0C	; 12
    22bc:	90 70       	andi	r25, 0x00	; 0
    22be:	88 0f       	add	r24, r24
    22c0:	99 1f       	adc	r25, r25
    22c2:	82 2b       	or	r24, r18
    22c4:	83 2b       	or	r24, r19
    22c6:	8c 93       	st	X, r24




}
    22c8:	0f 90       	pop	r0
    22ca:	0f 90       	pop	r0
    22cc:	cf 91       	pop	r28
    22ce:	df 91       	pop	r29
    22d0:	08 95       	ret

000022d2 <Timer1_deInit>:

/*
 * Description :
 *  Function to disable the Timer1.
 */
void Timer1_deInit(void){
    22d2:	df 93       	push	r29
    22d4:	cf 93       	push	r28
    22d6:	cd b7       	in	r28, 0x3d	; 61
    22d8:	de b7       	in	r29, 0x3e	; 62
	/* Clear Timer Register */
	TCNT1 = OCR1A =TCCR1A= TCCR1B = 0;
    22da:	4c e4       	ldi	r20, 0x4C	; 76
    22dc:	50 e0       	ldi	r21, 0x00	; 0
    22de:	2a e4       	ldi	r18, 0x4A	; 74
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	af e4       	ldi	r26, 0x4F	; 79
    22e4:	b0 e0       	ldi	r27, 0x00	; 0
    22e6:	ee e4       	ldi	r30, 0x4E	; 78
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	10 82       	st	Z, r1
    22ec:	80 81       	ld	r24, Z
    22ee:	8c 93       	st	X, r24
    22f0:	8c 91       	ld	r24, X
    22f2:	88 2f       	mov	r24, r24
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	f9 01       	movw	r30, r18
    22f8:	91 83       	std	Z+1, r25	; 0x01
    22fa:	80 83       	st	Z, r24
    22fc:	f9 01       	movw	r30, r18
    22fe:	80 81       	ld	r24, Z
    2300:	91 81       	ldd	r25, Z+1	; 0x01
    2302:	fa 01       	movw	r30, r20
    2304:	91 83       	std	Z+1, r25	; 0x01
    2306:	80 83       	st	Z, r24
	/* Disable Interrupt */
	TIMSK &= ~(1 << OCIE1A) & (~(1<<TOIE1));
    2308:	a9 e5       	ldi	r26, 0x59	; 89
    230a:	b0 e0       	ldi	r27, 0x00	; 0
    230c:	e9 e5       	ldi	r30, 0x59	; 89
    230e:	f0 e0       	ldi	r31, 0x00	; 0
    2310:	80 81       	ld	r24, Z
    2312:	8b 7e       	andi	r24, 0xEB	; 235
    2314:	8c 93       	st	X, r24
}
    2316:	cf 91       	pop	r28
    2318:	df 91       	pop	r29
    231a:	08 95       	ret

0000231c <Timer1_setCallBack>:
/*
 * Description :
 *  Function to set the Call Back function address.
 */
void Timer1_setCallBack(void(*a_ptr)(void)){
    231c:	df 93       	push	r29
    231e:	cf 93       	push	r28
    2320:	00 d0       	rcall	.+0      	; 0x2322 <Timer1_setCallBack+0x6>
    2322:	cd b7       	in	r28, 0x3d	; 61
    2324:	de b7       	in	r29, 0x3e	; 62
    2326:	9a 83       	std	Y+2, r25	; 0x02
    2328:	89 83       	std	Y+1, r24	; 0x01
	/* Make global variable points to same function to be called in ISR when an detection occur*/
		callBack_ptr = a_ptr;
    232a:	89 81       	ldd	r24, Y+1	; 0x01
    232c:	9a 81       	ldd	r25, Y+2	; 0x02
    232e:	90 93 7c 01 	sts	0x017C, r25
    2332:	80 93 7b 01 	sts	0x017B, r24
}
    2336:	0f 90       	pop	r0
    2338:	0f 90       	pop	r0
    233a:	cf 91       	pop	r28
    233c:	df 91       	pop	r29
    233e:	08 95       	ret

00002340 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType *config_ptr)
{
    2340:	df 93       	push	r29
    2342:	cf 93       	push	r28
    2344:	00 d0       	rcall	.+0      	; 0x2346 <TWI_init+0x6>
    2346:	cd b7       	in	r28, 0x3d	; 61
    2348:	de b7       	in	r29, 0x3e	; 62
    234a:	9a 83       	std	Y+2, r25	; 0x02
    234c:	89 83       	std	Y+1, r24	; 0x01

    TWBR = config_ptr->bit_rate.SCKFactor;
    234e:	a0 e2       	ldi	r26, 0x20	; 32
    2350:	b0 e0       	ldi	r27, 0x00	; 0
    2352:	e9 81       	ldd	r30, Y+1	; 0x01
    2354:	fa 81       	ldd	r31, Y+2	; 0x02
    2356:	82 81       	ldd	r24, Z+2	; 0x02
    2358:	8c 93       	st	X, r24
	TWSR = config_ptr->bit_rate.prescaler;
    235a:	a1 e2       	ldi	r26, 0x21	; 33
    235c:	b0 e0       	ldi	r27, 0x00	; 0
    235e:	e9 81       	ldd	r30, Y+1	; 0x01
    2360:	fa 81       	ldd	r31, Y+2	; 0x02
    2362:	81 81       	ldd	r24, Z+1	; 0x01
    2364:	8c 93       	st	X, r24
	TWAR =config_ptr->address<<1;
    2366:	a2 e2       	ldi	r26, 0x22	; 34
    2368:	b0 e0       	ldi	r27, 0x00	; 0
    236a:	e9 81       	ldd	r30, Y+1	; 0x01
    236c:	fa 81       	ldd	r31, Y+2	; 0x02
    236e:	80 81       	ld	r24, Z
    2370:	88 0f       	add	r24, r24
    2372:	8c 93       	st	X, r24
	
	SET_BIT(TWCR, TWEN);   /* enable TWI */
    2374:	a6 e5       	ldi	r26, 0x56	; 86
    2376:	b0 e0       	ldi	r27, 0x00	; 0
    2378:	e6 e5       	ldi	r30, 0x56	; 86
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	80 81       	ld	r24, Z
    237e:	84 60       	ori	r24, 0x04	; 4
    2380:	8c 93       	st	X, r24


}
    2382:	0f 90       	pop	r0
    2384:	0f 90       	pop	r0
    2386:	cf 91       	pop	r28
    2388:	df 91       	pop	r29
    238a:	08 95       	ret

0000238c <TWI_start>:

void TWI_start(void)
{
    238c:	df 93       	push	r29
    238e:	cf 93       	push	r28
    2390:	cd b7       	in	r28, 0x3d	; 61
    2392:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2394:	e6 e5       	ldi	r30, 0x56	; 86
    2396:	f0 e0       	ldi	r31, 0x00	; 0
    2398:	84 ea       	ldi	r24, 0xA4	; 164
    239a:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    239c:	e6 e5       	ldi	r30, 0x56	; 86
    239e:	f0 e0       	ldi	r31, 0x00	; 0
    23a0:	80 81       	ld	r24, Z
    23a2:	88 23       	and	r24, r24
    23a4:	dc f7       	brge	.-10     	; 0x239c <TWI_start+0x10>
}
    23a6:	cf 91       	pop	r28
    23a8:	df 91       	pop	r29
    23aa:	08 95       	ret

000023ac <TWI_stop>:

void TWI_stop(void)
{
    23ac:	df 93       	push	r29
    23ae:	cf 93       	push	r28
    23b0:	cd b7       	in	r28, 0x3d	; 61
    23b2:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    23b4:	e6 e5       	ldi	r30, 0x56	; 86
    23b6:	f0 e0       	ldi	r31, 0x00	; 0
    23b8:	84 e9       	ldi	r24, 0x94	; 148
    23ba:	80 83       	st	Z, r24
}
    23bc:	cf 91       	pop	r28
    23be:	df 91       	pop	r29
    23c0:	08 95       	ret

000023c2 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    23c2:	df 93       	push	r29
    23c4:	cf 93       	push	r28
    23c6:	0f 92       	push	r0
    23c8:	cd b7       	in	r28, 0x3d	; 61
    23ca:	de b7       	in	r29, 0x3e	; 62
    23cc:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    23ce:	e3 e2       	ldi	r30, 0x23	; 35
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	89 81       	ldd	r24, Y+1	; 0x01
    23d4:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    23d6:	e6 e5       	ldi	r30, 0x56	; 86
    23d8:	f0 e0       	ldi	r31, 0x00	; 0
    23da:	84 e8       	ldi	r24, 0x84	; 132
    23dc:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    23de:	e6 e5       	ldi	r30, 0x56	; 86
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	80 81       	ld	r24, Z
    23e4:	88 23       	and	r24, r24
    23e6:	dc f7       	brge	.-10     	; 0x23de <TWI_writeByte+0x1c>
}
    23e8:	0f 90       	pop	r0
    23ea:	cf 91       	pop	r28
    23ec:	df 91       	pop	r29
    23ee:	08 95       	ret

000023f0 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    23f0:	df 93       	push	r29
    23f2:	cf 93       	push	r28
    23f4:	cd b7       	in	r28, 0x3d	; 61
    23f6:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    23f8:	e6 e5       	ldi	r30, 0x56	; 86
    23fa:	f0 e0       	ldi	r31, 0x00	; 0
    23fc:	84 ec       	ldi	r24, 0xC4	; 196
    23fe:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2400:	e6 e5       	ldi	r30, 0x56	; 86
    2402:	f0 e0       	ldi	r31, 0x00	; 0
    2404:	80 81       	ld	r24, Z
    2406:	88 23       	and	r24, r24
    2408:	dc f7       	brge	.-10     	; 0x2400 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    240a:	e3 e2       	ldi	r30, 0x23	; 35
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	80 81       	ld	r24, Z
}
    2410:	cf 91       	pop	r28
    2412:	df 91       	pop	r29
    2414:	08 95       	ret

00002416 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    2416:	df 93       	push	r29
    2418:	cf 93       	push	r28
    241a:	cd b7       	in	r28, 0x3d	; 61
    241c:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    241e:	e6 e5       	ldi	r30, 0x56	; 86
    2420:	f0 e0       	ldi	r31, 0x00	; 0
    2422:	84 e8       	ldi	r24, 0x84	; 132
    2424:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2426:	e6 e5       	ldi	r30, 0x56	; 86
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	80 81       	ld	r24, Z
    242c:	88 23       	and	r24, r24
    242e:	dc f7       	brge	.-10     	; 0x2426 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2430:	e3 e2       	ldi	r30, 0x23	; 35
    2432:	f0 e0       	ldi	r31, 0x00	; 0
    2434:	80 81       	ld	r24, Z
}
    2436:	cf 91       	pop	r28
    2438:	df 91       	pop	r29
    243a:	08 95       	ret

0000243c <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    243c:	df 93       	push	r29
    243e:	cf 93       	push	r28
    2440:	0f 92       	push	r0
    2442:	cd b7       	in	r28, 0x3d	; 61
    2444:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    2446:	e1 e2       	ldi	r30, 0x21	; 33
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	80 81       	ld	r24, Z
    244c:	88 7f       	andi	r24, 0xF8	; 248
    244e:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2450:	89 81       	ldd	r24, Y+1	; 0x01
}
    2452:	0f 90       	pop	r0
    2454:	cf 91       	pop	r28
    2456:	df 91       	pop	r29
    2458:	08 95       	ret

0000245a <UART_init>:
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)

{
    245a:	df 93       	push	r29
    245c:	cf 93       	push	r28
    245e:	00 d0       	rcall	.+0      	; 0x2460 <UART_init+0x6>
    2460:	00 d0       	rcall	.+0      	; 0x2462 <UART_init+0x8>
    2462:	00 d0       	rcall	.+0      	; 0x2464 <UART_init+0xa>
    2464:	cd b7       	in	r28, 0x3d	; 61
    2466:	de b7       	in	r29, 0x3e	; 62
    2468:	9c 83       	std	Y+4, r25	; 0x04
    246a:	8b 83       	std	Y+3, r24	; 0x03
//	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
//
//	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
//	UBRRH = ubrr_value>>8;
//	UBRRL = ubrr_value;
	uint16 ubrr_value = 0;
    246c:	1a 82       	std	Y+2, r1	; 0x02
    246e:	19 82       	std	Y+1, r1	; 0x01
		SET_BIT(UCSRA, U2X);
    2470:	ab e2       	ldi	r26, 0x2B	; 43
    2472:	b0 e0       	ldi	r27, 0x00	; 0
    2474:	eb e2       	ldi	r30, 0x2B	; 43
    2476:	f0 e0       	ldi	r31, 0x00	; 0
    2478:	80 81       	ld	r24, Z
    247a:	82 60       	ori	r24, 0x02	; 2
    247c:	8c 93       	st	X, r24
		SET_BIT(UCSRB, RXEN);
    247e:	aa e2       	ldi	r26, 0x2A	; 42
    2480:	b0 e0       	ldi	r27, 0x00	; 0
    2482:	ea e2       	ldi	r30, 0x2A	; 42
    2484:	f0 e0       	ldi	r31, 0x00	; 0
    2486:	80 81       	ld	r24, Z
    2488:	80 61       	ori	r24, 0x10	; 16
    248a:	8c 93       	st	X, r24
		SET_BIT(UCSRB, TXEN);
    248c:	aa e2       	ldi	r26, 0x2A	; 42
    248e:	b0 e0       	ldi	r27, 0x00	; 0
    2490:	ea e2       	ldi	r30, 0x2A	; 42
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	80 81       	ld	r24, Z
    2496:	88 60       	ori	r24, 0x08	; 8
    2498:	8c 93       	st	X, r24
		ubrr_value = (uint16) ((F_CPU / (Config_Ptr->baud_rate * 8UL)) - 1);
    249a:	eb 81       	ldd	r30, Y+3	; 0x03
    249c:	fc 81       	ldd	r31, Y+4	; 0x04
    249e:	83 81       	ldd	r24, Z+3	; 0x03
    24a0:	94 81       	ldd	r25, Z+4	; 0x04
    24a2:	a5 81       	ldd	r26, Z+5	; 0x05
    24a4:	b6 81       	ldd	r27, Z+6	; 0x06
    24a6:	88 0f       	add	r24, r24
    24a8:	99 1f       	adc	r25, r25
    24aa:	aa 1f       	adc	r26, r26
    24ac:	bb 1f       	adc	r27, r27
    24ae:	88 0f       	add	r24, r24
    24b0:	99 1f       	adc	r25, r25
    24b2:	aa 1f       	adc	r26, r26
    24b4:	bb 1f       	adc	r27, r27
    24b6:	88 0f       	add	r24, r24
    24b8:	99 1f       	adc	r25, r25
    24ba:	aa 1f       	adc	r26, r26
    24bc:	bb 1f       	adc	r27, r27
    24be:	9c 01       	movw	r18, r24
    24c0:	ad 01       	movw	r20, r26
    24c2:	80 e0       	ldi	r24, 0x00	; 0
    24c4:	92 e1       	ldi	r25, 0x12	; 18
    24c6:	aa e7       	ldi	r26, 0x7A	; 122
    24c8:	b0 e0       	ldi	r27, 0x00	; 0
    24ca:	bc 01       	movw	r22, r24
    24cc:	cd 01       	movw	r24, r26
    24ce:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <__udivmodsi4>
    24d2:	da 01       	movw	r26, r20
    24d4:	c9 01       	movw	r24, r18
    24d6:	01 97       	sbiw	r24, 0x01	; 1
    24d8:	9a 83       	std	Y+2, r25	; 0x02
    24da:	89 83       	std	Y+1, r24	; 0x01
		UBRRH = ubrr_value >> 8;
    24dc:	e0 e4       	ldi	r30, 0x40	; 64
    24de:	f0 e0       	ldi	r31, 0x00	; 0
    24e0:	89 81       	ldd	r24, Y+1	; 0x01
    24e2:	9a 81       	ldd	r25, Y+2	; 0x02
    24e4:	89 2f       	mov	r24, r25
    24e6:	99 27       	eor	r25, r25
    24e8:	80 83       	st	Z, r24
		UBRRL = ubrr_value;
    24ea:	e9 e2       	ldi	r30, 0x29	; 41
    24ec:	f0 e0       	ldi	r31, 0x00	; 0
    24ee:	89 81       	ldd	r24, Y+1	; 0x01
    24f0:	80 83       	st	Z, r24
		SET_BIT(UCSRC, URSEL);
    24f2:	a0 e4       	ldi	r26, 0x40	; 64
    24f4:	b0 e0       	ldi	r27, 0x00	; 0
    24f6:	e0 e4       	ldi	r30, 0x40	; 64
    24f8:	f0 e0       	ldi	r31, 0x00	; 0
    24fa:	80 81       	ld	r24, Z
    24fc:	80 68       	ori	r24, 0x80	; 128
    24fe:	8c 93       	st	X, r24
		switch (Config_Ptr->bit_data) {
    2500:	eb 81       	ldd	r30, Y+3	; 0x03
    2502:	fc 81       	ldd	r31, Y+4	; 0x04
    2504:	80 81       	ld	r24, Z
    2506:	28 2f       	mov	r18, r24
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	3e 83       	std	Y+6, r19	; 0x06
    250c:	2d 83       	std	Y+5, r18	; 0x05
    250e:	8d 81       	ldd	r24, Y+5	; 0x05
    2510:	9e 81       	ldd	r25, Y+6	; 0x06
    2512:	82 30       	cpi	r24, 0x02	; 2
    2514:	91 05       	cpc	r25, r1
    2516:	09 f4       	brne	.+2      	; 0x251a <UART_init+0xc0>
    2518:	48 c0       	rjmp	.+144    	; 0x25aa <UART_init+0x150>
    251a:	2d 81       	ldd	r18, Y+5	; 0x05
    251c:	3e 81       	ldd	r19, Y+6	; 0x06
    251e:	23 30       	cpi	r18, 0x03	; 3
    2520:	31 05       	cpc	r19, r1
    2522:	54 f4       	brge	.+20     	; 0x2538 <UART_init+0xde>
    2524:	8d 81       	ldd	r24, Y+5	; 0x05
    2526:	9e 81       	ldd	r25, Y+6	; 0x06
    2528:	00 97       	sbiw	r24, 0x00	; 0
    252a:	99 f0       	breq	.+38     	; 0x2552 <UART_init+0xf8>
    252c:	2d 81       	ldd	r18, Y+5	; 0x05
    252e:	3e 81       	ldd	r19, Y+6	; 0x06
    2530:	21 30       	cpi	r18, 0x01	; 1
    2532:	31 05       	cpc	r19, r1
    2534:	21 f1       	breq	.+72     	; 0x257e <UART_init+0x124>
    2536:	7a c0       	rjmp	.+244    	; 0x262c <UART_init+0x1d2>
    2538:	8d 81       	ldd	r24, Y+5	; 0x05
    253a:	9e 81       	ldd	r25, Y+6	; 0x06
    253c:	83 30       	cpi	r24, 0x03	; 3
    253e:	91 05       	cpc	r25, r1
    2540:	09 f4       	brne	.+2      	; 0x2544 <UART_init+0xea>
    2542:	49 c0       	rjmp	.+146    	; 0x25d6 <UART_init+0x17c>
    2544:	2d 81       	ldd	r18, Y+5	; 0x05
    2546:	3e 81       	ldd	r19, Y+6	; 0x06
    2548:	27 30       	cpi	r18, 0x07	; 7
    254a:	31 05       	cpc	r19, r1
    254c:	09 f4       	brne	.+2      	; 0x2550 <UART_init+0xf6>
    254e:	59 c0       	rjmp	.+178    	; 0x2602 <UART_init+0x1a8>
    2550:	6d c0       	rjmp	.+218    	; 0x262c <UART_init+0x1d2>
		case 0:
			CLEAR_BIT(UCSRC, UCSZ0);
    2552:	a0 e4       	ldi	r26, 0x40	; 64
    2554:	b0 e0       	ldi	r27, 0x00	; 0
    2556:	e0 e4       	ldi	r30, 0x40	; 64
    2558:	f0 e0       	ldi	r31, 0x00	; 0
    255a:	80 81       	ld	r24, Z
    255c:	8d 7f       	andi	r24, 0xFD	; 253
    255e:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRC, UCSZ1);
    2560:	a0 e4       	ldi	r26, 0x40	; 64
    2562:	b0 e0       	ldi	r27, 0x00	; 0
    2564:	e0 e4       	ldi	r30, 0x40	; 64
    2566:	f0 e0       	ldi	r31, 0x00	; 0
    2568:	80 81       	ld	r24, Z
    256a:	8b 7f       	andi	r24, 0xFB	; 251
    256c:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRB, UCSZ2);
    256e:	aa e2       	ldi	r26, 0x2A	; 42
    2570:	b0 e0       	ldi	r27, 0x00	; 0
    2572:	ea e2       	ldi	r30, 0x2A	; 42
    2574:	f0 e0       	ldi	r31, 0x00	; 0
    2576:	80 81       	ld	r24, Z
    2578:	8b 7f       	andi	r24, 0xFB	; 251
    257a:	8c 93       	st	X, r24
    257c:	57 c0       	rjmp	.+174    	; 0x262c <UART_init+0x1d2>
			break;
		case 1:
			SET_BIT(UCSRC, UCSZ0);
    257e:	a0 e4       	ldi	r26, 0x40	; 64
    2580:	b0 e0       	ldi	r27, 0x00	; 0
    2582:	e0 e4       	ldi	r30, 0x40	; 64
    2584:	f0 e0       	ldi	r31, 0x00	; 0
    2586:	80 81       	ld	r24, Z
    2588:	82 60       	ori	r24, 0x02	; 2
    258a:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRC, UCSZ1);
    258c:	a0 e4       	ldi	r26, 0x40	; 64
    258e:	b0 e0       	ldi	r27, 0x00	; 0
    2590:	e0 e4       	ldi	r30, 0x40	; 64
    2592:	f0 e0       	ldi	r31, 0x00	; 0
    2594:	80 81       	ld	r24, Z
    2596:	8b 7f       	andi	r24, 0xFB	; 251
    2598:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRB, UCSZ2);
    259a:	aa e2       	ldi	r26, 0x2A	; 42
    259c:	b0 e0       	ldi	r27, 0x00	; 0
    259e:	ea e2       	ldi	r30, 0x2A	; 42
    25a0:	f0 e0       	ldi	r31, 0x00	; 0
    25a2:	80 81       	ld	r24, Z
    25a4:	8b 7f       	andi	r24, 0xFB	; 251
    25a6:	8c 93       	st	X, r24
    25a8:	41 c0       	rjmp	.+130    	; 0x262c <UART_init+0x1d2>
			break;
		case 2:
			CLEAR_BIT(UCSRC, UCSZ0);
    25aa:	a0 e4       	ldi	r26, 0x40	; 64
    25ac:	b0 e0       	ldi	r27, 0x00	; 0
    25ae:	e0 e4       	ldi	r30, 0x40	; 64
    25b0:	f0 e0       	ldi	r31, 0x00	; 0
    25b2:	80 81       	ld	r24, Z
    25b4:	8d 7f       	andi	r24, 0xFD	; 253
    25b6:	8c 93       	st	X, r24
			SET_BIT(UCSRC, UCSZ1);
    25b8:	a0 e4       	ldi	r26, 0x40	; 64
    25ba:	b0 e0       	ldi	r27, 0x00	; 0
    25bc:	e0 e4       	ldi	r30, 0x40	; 64
    25be:	f0 e0       	ldi	r31, 0x00	; 0
    25c0:	80 81       	ld	r24, Z
    25c2:	84 60       	ori	r24, 0x04	; 4
    25c4:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRB, UCSZ2);
    25c6:	aa e2       	ldi	r26, 0x2A	; 42
    25c8:	b0 e0       	ldi	r27, 0x00	; 0
    25ca:	ea e2       	ldi	r30, 0x2A	; 42
    25cc:	f0 e0       	ldi	r31, 0x00	; 0
    25ce:	80 81       	ld	r24, Z
    25d0:	8b 7f       	andi	r24, 0xFB	; 251
    25d2:	8c 93       	st	X, r24
    25d4:	2b c0       	rjmp	.+86     	; 0x262c <UART_init+0x1d2>
			break;
		case 3:
			SET_BIT(UCSRC, UCSZ0);
    25d6:	a0 e4       	ldi	r26, 0x40	; 64
    25d8:	b0 e0       	ldi	r27, 0x00	; 0
    25da:	e0 e4       	ldi	r30, 0x40	; 64
    25dc:	f0 e0       	ldi	r31, 0x00	; 0
    25de:	80 81       	ld	r24, Z
    25e0:	82 60       	ori	r24, 0x02	; 2
    25e2:	8c 93       	st	X, r24
			SET_BIT(UCSRC, UCSZ1);
    25e4:	a0 e4       	ldi	r26, 0x40	; 64
    25e6:	b0 e0       	ldi	r27, 0x00	; 0
    25e8:	e0 e4       	ldi	r30, 0x40	; 64
    25ea:	f0 e0       	ldi	r31, 0x00	; 0
    25ec:	80 81       	ld	r24, Z
    25ee:	84 60       	ori	r24, 0x04	; 4
    25f0:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRB, UCSZ2);
    25f2:	aa e2       	ldi	r26, 0x2A	; 42
    25f4:	b0 e0       	ldi	r27, 0x00	; 0
    25f6:	ea e2       	ldi	r30, 0x2A	; 42
    25f8:	f0 e0       	ldi	r31, 0x00	; 0
    25fa:	80 81       	ld	r24, Z
    25fc:	8b 7f       	andi	r24, 0xFB	; 251
    25fe:	8c 93       	st	X, r24
    2600:	15 c0       	rjmp	.+42     	; 0x262c <UART_init+0x1d2>
			break;
		case 7:
			SET_BIT(UCSRC, UCSZ0);
    2602:	a0 e4       	ldi	r26, 0x40	; 64
    2604:	b0 e0       	ldi	r27, 0x00	; 0
    2606:	e0 e4       	ldi	r30, 0x40	; 64
    2608:	f0 e0       	ldi	r31, 0x00	; 0
    260a:	80 81       	ld	r24, Z
    260c:	82 60       	ori	r24, 0x02	; 2
    260e:	8c 93       	st	X, r24
			SET_BIT(UCSRC, UCSZ1);
    2610:	a0 e4       	ldi	r26, 0x40	; 64
    2612:	b0 e0       	ldi	r27, 0x00	; 0
    2614:	e0 e4       	ldi	r30, 0x40	; 64
    2616:	f0 e0       	ldi	r31, 0x00	; 0
    2618:	80 81       	ld	r24, Z
    261a:	84 60       	ori	r24, 0x04	; 4
    261c:	8c 93       	st	X, r24
			SET_BIT(UCSRB, UCSZ2);
    261e:	aa e2       	ldi	r26, 0x2A	; 42
    2620:	b0 e0       	ldi	r27, 0x00	; 0
    2622:	ea e2       	ldi	r30, 0x2A	; 42
    2624:	f0 e0       	ldi	r31, 0x00	; 0
    2626:	80 81       	ld	r24, Z
    2628:	84 60       	ori	r24, 0x04	; 4
    262a:	8c 93       	st	X, r24
			break;
		}
		UCSRC = (UCSRC & 0xcf) | (Config_Ptr->parity<< 4);
    262c:	a0 e4       	ldi	r26, 0x40	; 64
    262e:	b0 e0       	ldi	r27, 0x00	; 0
    2630:	e0 e4       	ldi	r30, 0x40	; 64
    2632:	f0 e0       	ldi	r31, 0x00	; 0
    2634:	80 81       	ld	r24, Z
    2636:	28 2f       	mov	r18, r24
    2638:	2f 7c       	andi	r18, 0xCF	; 207
    263a:	eb 81       	ldd	r30, Y+3	; 0x03
    263c:	fc 81       	ldd	r31, Y+4	; 0x04
    263e:	81 81       	ldd	r24, Z+1	; 0x01
    2640:	88 2f       	mov	r24, r24
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	82 95       	swap	r24
    2646:	92 95       	swap	r25
    2648:	90 7f       	andi	r25, 0xF0	; 240
    264a:	98 27       	eor	r25, r24
    264c:	80 7f       	andi	r24, 0xF0	; 240
    264e:	98 27       	eor	r25, r24
    2650:	82 2b       	or	r24, r18
    2652:	8c 93       	st	X, r24
		if (Config_Ptr->stop_bit == ONE_STOP_BIT) {
    2654:	eb 81       	ldd	r30, Y+3	; 0x03
    2656:	fc 81       	ldd	r31, Y+4	; 0x04
    2658:	82 81       	ldd	r24, Z+2	; 0x02
    265a:	88 23       	and	r24, r24
    265c:	41 f4       	brne	.+16     	; 0x266e <UART_init+0x214>
			CLEAR_BIT(UCSRC, USBS);
    265e:	a0 e4       	ldi	r26, 0x40	; 64
    2660:	b0 e0       	ldi	r27, 0x00	; 0
    2662:	e0 e4       	ldi	r30, 0x40	; 64
    2664:	f0 e0       	ldi	r31, 0x00	; 0
    2666:	80 81       	ld	r24, Z
    2668:	87 7f       	andi	r24, 0xF7	; 247
    266a:	8c 93       	st	X, r24
    266c:	07 c0       	rjmp	.+14     	; 0x267c <UART_init+0x222>
		} else {
			SET_BIT(UCSRC, USBS);
    266e:	a0 e4       	ldi	r26, 0x40	; 64
    2670:	b0 e0       	ldi	r27, 0x00	; 0
    2672:	e0 e4       	ldi	r30, 0x40	; 64
    2674:	f0 e0       	ldi	r31, 0x00	; 0
    2676:	80 81       	ld	r24, Z
    2678:	88 60       	ori	r24, 0x08	; 8
    267a:	8c 93       	st	X, r24
		}

	
}
    267c:	26 96       	adiw	r28, 0x06	; 6
    267e:	0f b6       	in	r0, 0x3f	; 63
    2680:	f8 94       	cli
    2682:	de bf       	out	0x3e, r29	; 62
    2684:	0f be       	out	0x3f, r0	; 63
    2686:	cd bf       	out	0x3d, r28	; 61
    2688:	cf 91       	pop	r28
    268a:	df 91       	pop	r29
    268c:	08 95       	ret

0000268e <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    268e:	df 93       	push	r29
    2690:	cf 93       	push	r28
    2692:	0f 92       	push	r0
    2694:	cd b7       	in	r28, 0x3d	; 61
    2696:	de b7       	in	r29, 0x3e	; 62
    2698:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    269a:	eb e2       	ldi	r30, 0x2B	; 43
    269c:	f0 e0       	ldi	r31, 0x00	; 0
    269e:	80 81       	ld	r24, Z
    26a0:	88 2f       	mov	r24, r24
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	80 72       	andi	r24, 0x20	; 32
    26a6:	90 70       	andi	r25, 0x00	; 0
    26a8:	00 97       	sbiw	r24, 0x00	; 0
    26aa:	b9 f3       	breq	.-18     	; 0x269a <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    26ac:	ec e2       	ldi	r30, 0x2C	; 44
    26ae:	f0 e0       	ldi	r31, 0x00	; 0
    26b0:	89 81       	ldd	r24, Y+1	; 0x01
    26b2:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    26b4:	0f 90       	pop	r0
    26b6:	cf 91       	pop	r28
    26b8:	df 91       	pop	r29
    26ba:	08 95       	ret

000026bc <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    26bc:	df 93       	push	r29
    26be:	cf 93       	push	r28
    26c0:	cd b7       	in	r28, 0x3d	; 61
    26c2:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    26c4:	eb e2       	ldi	r30, 0x2B	; 43
    26c6:	f0 e0       	ldi	r31, 0x00	; 0
    26c8:	80 81       	ld	r24, Z
    26ca:	88 23       	and	r24, r24
    26cc:	dc f7       	brge	.-10     	; 0x26c4 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    26ce:	ec e2       	ldi	r30, 0x2C	; 44
    26d0:	f0 e0       	ldi	r31, 0x00	; 0
    26d2:	80 81       	ld	r24, Z
}
    26d4:	cf 91       	pop	r28
    26d6:	df 91       	pop	r29
    26d8:	08 95       	ret

000026da <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    26da:	df 93       	push	r29
    26dc:	cf 93       	push	r28
    26de:	00 d0       	rcall	.+0      	; 0x26e0 <UART_sendString+0x6>
    26e0:	0f 92       	push	r0
    26e2:	cd b7       	in	r28, 0x3d	; 61
    26e4:	de b7       	in	r29, 0x3e	; 62
    26e6:	9b 83       	std	Y+3, r25	; 0x03
    26e8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    26ea:	19 82       	std	Y+1, r1	; 0x01
    26ec:	0e c0       	rjmp	.+28     	; 0x270a <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    26ee:	89 81       	ldd	r24, Y+1	; 0x01
    26f0:	28 2f       	mov	r18, r24
    26f2:	30 e0       	ldi	r19, 0x00	; 0
    26f4:	8a 81       	ldd	r24, Y+2	; 0x02
    26f6:	9b 81       	ldd	r25, Y+3	; 0x03
    26f8:	fc 01       	movw	r30, r24
    26fa:	e2 0f       	add	r30, r18
    26fc:	f3 1f       	adc	r31, r19
    26fe:	80 81       	ld	r24, Z
    2700:	0e 94 47 13 	call	0x268e	; 0x268e <UART_sendByte>
		i++;
    2704:	89 81       	ldd	r24, Y+1	; 0x01
    2706:	8f 5f       	subi	r24, 0xFF	; 255
    2708:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    270a:	89 81       	ldd	r24, Y+1	; 0x01
    270c:	28 2f       	mov	r18, r24
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	8a 81       	ldd	r24, Y+2	; 0x02
    2712:	9b 81       	ldd	r25, Y+3	; 0x03
    2714:	fc 01       	movw	r30, r24
    2716:	e2 0f       	add	r30, r18
    2718:	f3 1f       	adc	r31, r19
    271a:	80 81       	ld	r24, Z
    271c:	88 23       	and	r24, r24
    271e:	39 f7       	brne	.-50     	; 0x26ee <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2720:	0f 90       	pop	r0
    2722:	0f 90       	pop	r0
    2724:	0f 90       	pop	r0
    2726:	cf 91       	pop	r28
    2728:	df 91       	pop	r29
    272a:	08 95       	ret

0000272c <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    272c:	0f 93       	push	r16
    272e:	1f 93       	push	r17
    2730:	df 93       	push	r29
    2732:	cf 93       	push	r28
    2734:	00 d0       	rcall	.+0      	; 0x2736 <UART_receiveString+0xa>
    2736:	0f 92       	push	r0
    2738:	cd b7       	in	r28, 0x3d	; 61
    273a:	de b7       	in	r29, 0x3e	; 62
    273c:	9b 83       	std	Y+3, r25	; 0x03
    273e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2740:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2742:	89 81       	ldd	r24, Y+1	; 0x01
    2744:	28 2f       	mov	r18, r24
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	8a 81       	ldd	r24, Y+2	; 0x02
    274a:	9b 81       	ldd	r25, Y+3	; 0x03
    274c:	8c 01       	movw	r16, r24
    274e:	02 0f       	add	r16, r18
    2750:	13 1f       	adc	r17, r19
    2752:	0e 94 5e 13 	call	0x26bc	; 0x26bc <UART_recieveByte>
    2756:	f8 01       	movw	r30, r16
    2758:	80 83       	st	Z, r24
    275a:	0f c0       	rjmp	.+30     	; 0x277a <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    275c:	89 81       	ldd	r24, Y+1	; 0x01
    275e:	8f 5f       	subi	r24, 0xFF	; 255
    2760:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2762:	89 81       	ldd	r24, Y+1	; 0x01
    2764:	28 2f       	mov	r18, r24
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	8a 81       	ldd	r24, Y+2	; 0x02
    276a:	9b 81       	ldd	r25, Y+3	; 0x03
    276c:	8c 01       	movw	r16, r24
    276e:	02 0f       	add	r16, r18
    2770:	13 1f       	adc	r17, r19
    2772:	0e 94 5e 13 	call	0x26bc	; 0x26bc <UART_recieveByte>
    2776:	f8 01       	movw	r30, r16
    2778:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    277a:	89 81       	ldd	r24, Y+1	; 0x01
    277c:	28 2f       	mov	r18, r24
    277e:	30 e0       	ldi	r19, 0x00	; 0
    2780:	8a 81       	ldd	r24, Y+2	; 0x02
    2782:	9b 81       	ldd	r25, Y+3	; 0x03
    2784:	fc 01       	movw	r30, r24
    2786:	e2 0f       	add	r30, r18
    2788:	f3 1f       	adc	r31, r19
    278a:	80 81       	ld	r24, Z
    278c:	83 32       	cpi	r24, 0x23	; 35
    278e:	31 f7       	brne	.-52     	; 0x275c <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2790:	89 81       	ldd	r24, Y+1	; 0x01
    2792:	28 2f       	mov	r18, r24
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	8a 81       	ldd	r24, Y+2	; 0x02
    2798:	9b 81       	ldd	r25, Y+3	; 0x03
    279a:	fc 01       	movw	r30, r24
    279c:	e2 0f       	add	r30, r18
    279e:	f3 1f       	adc	r31, r19
    27a0:	10 82       	st	Z, r1
}
    27a2:	0f 90       	pop	r0
    27a4:	0f 90       	pop	r0
    27a6:	0f 90       	pop	r0
    27a8:	cf 91       	pop	r28
    27aa:	df 91       	pop	r29
    27ac:	1f 91       	pop	r17
    27ae:	0f 91       	pop	r16
    27b0:	08 95       	ret

000027b2 <__udivmodsi4>:
    27b2:	a1 e2       	ldi	r26, 0x21	; 33
    27b4:	1a 2e       	mov	r1, r26
    27b6:	aa 1b       	sub	r26, r26
    27b8:	bb 1b       	sub	r27, r27
    27ba:	fd 01       	movw	r30, r26
    27bc:	0d c0       	rjmp	.+26     	; 0x27d8 <__udivmodsi4_ep>

000027be <__udivmodsi4_loop>:
    27be:	aa 1f       	adc	r26, r26
    27c0:	bb 1f       	adc	r27, r27
    27c2:	ee 1f       	adc	r30, r30
    27c4:	ff 1f       	adc	r31, r31
    27c6:	a2 17       	cp	r26, r18
    27c8:	b3 07       	cpc	r27, r19
    27ca:	e4 07       	cpc	r30, r20
    27cc:	f5 07       	cpc	r31, r21
    27ce:	20 f0       	brcs	.+8      	; 0x27d8 <__udivmodsi4_ep>
    27d0:	a2 1b       	sub	r26, r18
    27d2:	b3 0b       	sbc	r27, r19
    27d4:	e4 0b       	sbc	r30, r20
    27d6:	f5 0b       	sbc	r31, r21

000027d8 <__udivmodsi4_ep>:
    27d8:	66 1f       	adc	r22, r22
    27da:	77 1f       	adc	r23, r23
    27dc:	88 1f       	adc	r24, r24
    27de:	99 1f       	adc	r25, r25
    27e0:	1a 94       	dec	r1
    27e2:	69 f7       	brne	.-38     	; 0x27be <__udivmodsi4_loop>
    27e4:	60 95       	com	r22
    27e6:	70 95       	com	r23
    27e8:	80 95       	com	r24
    27ea:	90 95       	com	r25
    27ec:	9b 01       	movw	r18, r22
    27ee:	ac 01       	movw	r20, r24
    27f0:	bd 01       	movw	r22, r26
    27f2:	cf 01       	movw	r24, r30
    27f4:	08 95       	ret

000027f6 <__prologue_saves__>:
    27f6:	2f 92       	push	r2
    27f8:	3f 92       	push	r3
    27fa:	4f 92       	push	r4
    27fc:	5f 92       	push	r5
    27fe:	6f 92       	push	r6
    2800:	7f 92       	push	r7
    2802:	8f 92       	push	r8
    2804:	9f 92       	push	r9
    2806:	af 92       	push	r10
    2808:	bf 92       	push	r11
    280a:	cf 92       	push	r12
    280c:	df 92       	push	r13
    280e:	ef 92       	push	r14
    2810:	ff 92       	push	r15
    2812:	0f 93       	push	r16
    2814:	1f 93       	push	r17
    2816:	cf 93       	push	r28
    2818:	df 93       	push	r29
    281a:	cd b7       	in	r28, 0x3d	; 61
    281c:	de b7       	in	r29, 0x3e	; 62
    281e:	ca 1b       	sub	r28, r26
    2820:	db 0b       	sbc	r29, r27
    2822:	0f b6       	in	r0, 0x3f	; 63
    2824:	f8 94       	cli
    2826:	de bf       	out	0x3e, r29	; 62
    2828:	0f be       	out	0x3f, r0	; 63
    282a:	cd bf       	out	0x3d, r28	; 61
    282c:	09 94       	ijmp

0000282e <__epilogue_restores__>:
    282e:	2a 88       	ldd	r2, Y+18	; 0x12
    2830:	39 88       	ldd	r3, Y+17	; 0x11
    2832:	48 88       	ldd	r4, Y+16	; 0x10
    2834:	5f 84       	ldd	r5, Y+15	; 0x0f
    2836:	6e 84       	ldd	r6, Y+14	; 0x0e
    2838:	7d 84       	ldd	r7, Y+13	; 0x0d
    283a:	8c 84       	ldd	r8, Y+12	; 0x0c
    283c:	9b 84       	ldd	r9, Y+11	; 0x0b
    283e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2840:	b9 84       	ldd	r11, Y+9	; 0x09
    2842:	c8 84       	ldd	r12, Y+8	; 0x08
    2844:	df 80       	ldd	r13, Y+7	; 0x07
    2846:	ee 80       	ldd	r14, Y+6	; 0x06
    2848:	fd 80       	ldd	r15, Y+5	; 0x05
    284a:	0c 81       	ldd	r16, Y+4	; 0x04
    284c:	1b 81       	ldd	r17, Y+3	; 0x03
    284e:	aa 81       	ldd	r26, Y+2	; 0x02
    2850:	b9 81       	ldd	r27, Y+1	; 0x01
    2852:	ce 0f       	add	r28, r30
    2854:	d1 1d       	adc	r29, r1
    2856:	0f b6       	in	r0, 0x3f	; 63
    2858:	f8 94       	cli
    285a:	de bf       	out	0x3e, r29	; 62
    285c:	0f be       	out	0x3f, r0	; 63
    285e:	cd bf       	out	0x3d, r28	; 61
    2860:	ed 01       	movw	r28, r26
    2862:	08 95       	ret

00002864 <_exit>:
    2864:	f8 94       	cli

00002866 <__stop_program>:
    2866:	ff cf       	rjmp	.-2      	; 0x2866 <__stop_program>
