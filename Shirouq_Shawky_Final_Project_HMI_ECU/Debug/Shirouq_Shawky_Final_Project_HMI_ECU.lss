
Shirouq_Shawky_Final_Project_HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003568  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ca  00800060  00003568  000035fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  0080012a  0080012a  000036c6  2**0
                  ALLOC
  3 .stab         00002f70  00000000  00000000  000036c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001323  00000000  00000000  00006638  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000795b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007a9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007c0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009854  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a73f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b4ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b64c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b8d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c0a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 68 17 	jmp	0x2ed0	; 0x2ed0 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 9b 17 	jmp	0x2f36	; 0x2f36 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e6       	ldi	r30, 0x68	; 104
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 32       	cpi	r26, 0x2A	; 42
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e2       	ldi	r26, 0x2A	; 42
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 33       	cpi	r26, 0x3C	; 60
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 b2 1a 	jmp	0x3564	; 0x3564 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 36 1a 	jmp	0x346c	; 0x346c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e1       	ldi	r26, 0x14	; 20
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 52 1a 	jmp	0x34a4	; 0x34a4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 42 1a 	jmp	0x3484	; 0x3484 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5e 1a 	jmp	0x34bc	; 0x34bc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 42 1a 	jmp	0x3484	; 0x3484 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5e 1a 	jmp	0x34bc	; 0x34bc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 36 1a 	jmp	0x346c	; 0x346c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 e1       	ldi	r24, 0x14	; 20
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 52 1a 	jmp	0x34a4	; 0x34a4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 42 1a 	jmp	0x3484	; 0x3484 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 5e 1a 	jmp	0x34bc	; 0x34bc <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 42 1a 	jmp	0x3484	; 0x3484 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 5e 1a 	jmp	0x34bc	; 0x34bc <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 42 1a 	jmp	0x3484	; 0x3484 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 5e 1a 	jmp	0x34bc	; 0x34bc <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 46 1a 	jmp	0x348c	; 0x348c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 62 1a 	jmp	0x34c4	; 0x34c4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
void turnOnMotor(void);
/****************************************************************
*                            functions definitions
****************************************************************/

int main (void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	67 97       	sbiw	r28, 0x17	; 23
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	sei();
     b5a:	78 94       	sei
	LCD_init();
     b5c:	0e 94 3d 12 	call	0x247a	; 0x247a <LCD_init>
	UART_ConfigType uart_configuration = {BIT_DATA_8, DISABLE_PARITY, ONE_STOP_BIT, 9600 };
     b60:	ce 01       	movw	r24, r28
     b62:	01 96       	adiw	r24, 0x01	; 1
     b64:	9f 87       	std	Y+15, r25	; 0x0f
     b66:	8e 87       	std	Y+14, r24	; 0x0e
     b68:	e2 e2       	ldi	r30, 0x22	; 34
     b6a:	f1 e0       	ldi	r31, 0x01	; 1
     b6c:	f9 8b       	std	Y+17, r31	; 0x11
     b6e:	e8 8b       	std	Y+16, r30	; 0x10
     b70:	f7 e0       	ldi	r31, 0x07	; 7
     b72:	fa 8b       	std	Y+18, r31	; 0x12
     b74:	e8 89       	ldd	r30, Y+16	; 0x10
     b76:	f9 89       	ldd	r31, Y+17	; 0x11
     b78:	00 80       	ld	r0, Z
     b7a:	88 89       	ldd	r24, Y+16	; 0x10
     b7c:	99 89       	ldd	r25, Y+17	; 0x11
     b7e:	01 96       	adiw	r24, 0x01	; 1
     b80:	99 8b       	std	Y+17, r25	; 0x11
     b82:	88 8b       	std	Y+16, r24	; 0x10
     b84:	ee 85       	ldd	r30, Y+14	; 0x0e
     b86:	ff 85       	ldd	r31, Y+15	; 0x0f
     b88:	00 82       	st	Z, r0
     b8a:	8e 85       	ldd	r24, Y+14	; 0x0e
     b8c:	9f 85       	ldd	r25, Y+15	; 0x0f
     b8e:	01 96       	adiw	r24, 0x01	; 1
     b90:	9f 87       	std	Y+15, r25	; 0x0f
     b92:	8e 87       	std	Y+14, r24	; 0x0e
     b94:	9a 89       	ldd	r25, Y+18	; 0x12
     b96:	91 50       	subi	r25, 0x01	; 1
     b98:	9a 8b       	std	Y+18, r25	; 0x12
     b9a:	ea 89       	ldd	r30, Y+18	; 0x12
     b9c:	ee 23       	and	r30, r30
     b9e:	51 f7       	brne	.-44     	; 0xb74 <main+0x2e>
	UART_init(&uart_configuration);
     ba0:	ce 01       	movw	r24, r28
     ba2:	01 96       	adiw	r24, 0x01	; 1
     ba4:	0e 94 68 18 	call	0x30d0	; 0x30d0 <UART_init>

	Timer1_setCallBack(Callback);
     ba8:	85 ec       	ldi	r24, 0xC5	; 197
     baa:	9d e0       	ldi	r25, 0x0D	; 13
     bac:	0e 94 56 18 	call	0x30ac	; 0x30ac <Timer1_setCallBack>
	Timer1_ConfigType Timer1_configuration = { 0, 8000, F_CPU_CLOCK_1024, COMPARE_MODE };
     bb0:	ce 01       	movw	r24, r28
     bb2:	08 96       	adiw	r24, 0x08	; 8
     bb4:	9c 8b       	std	Y+20, r25	; 0x14
     bb6:	8b 8b       	std	Y+19, r24	; 0x13
     bb8:	ec e1       	ldi	r30, 0x1C	; 28
     bba:	f1 e0       	ldi	r31, 0x01	; 1
     bbc:	fe 8b       	std	Y+22, r31	; 0x16
     bbe:	ed 8b       	std	Y+21, r30	; 0x15
     bc0:	f6 e0       	ldi	r31, 0x06	; 6
     bc2:	ff 8b       	std	Y+23, r31	; 0x17
     bc4:	ed 89       	ldd	r30, Y+21	; 0x15
     bc6:	fe 89       	ldd	r31, Y+22	; 0x16
     bc8:	00 80       	ld	r0, Z
     bca:	8d 89       	ldd	r24, Y+21	; 0x15
     bcc:	9e 89       	ldd	r25, Y+22	; 0x16
     bce:	01 96       	adiw	r24, 0x01	; 1
     bd0:	9e 8b       	std	Y+22, r25	; 0x16
     bd2:	8d 8b       	std	Y+21, r24	; 0x15
     bd4:	eb 89       	ldd	r30, Y+19	; 0x13
     bd6:	fc 89       	ldd	r31, Y+20	; 0x14
     bd8:	00 82       	st	Z, r0
     bda:	8b 89       	ldd	r24, Y+19	; 0x13
     bdc:	9c 89       	ldd	r25, Y+20	; 0x14
     bde:	01 96       	adiw	r24, 0x01	; 1
     be0:	9c 8b       	std	Y+20, r25	; 0x14
     be2:	8b 8b       	std	Y+19, r24	; 0x13
     be4:	9f 89       	ldd	r25, Y+23	; 0x17
     be6:	91 50       	subi	r25, 0x01	; 1
     be8:	9f 8b       	std	Y+23, r25	; 0x17
     bea:	ef 89       	ldd	r30, Y+23	; 0x17
     bec:	ee 23       	and	r30, r30
     bee:	51 f7       	brne	.-44     	; 0xbc4 <main+0x7e>
	Timer1_init(&Timer1_configuration);
     bf0:	ce 01       	movw	r24, r28
     bf2:	08 96       	adiw	r24, 0x08	; 8
     bf4:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <Timer1_init>

	createNewPass();
     bf8:	0e 94 01 06 	call	0xc02	; 0xc02 <createNewPass>
	while(1){
		showOptions();
     bfc:	0e 94 3e 0c 	call	0x187c	; 0x187c <showOptions>
     c00:	fd cf       	rjmp	.-6      	; 0xbfc <main+0xb6>

00000c02 <createNewPass>:

/*
 * Description:
 * Function responsible for creating new passwords based on user input and confirming the new password.
 */
void createNewPass(void) {
     c02:	0f 93       	push	r16
     c04:	1f 93       	push	r17
     c06:	df 93       	push	r29
     c08:	cf 93       	push	r28
     c0a:	cd b7       	in	r28, 0x3d	; 61
     c0c:	de b7       	in	r29, 0x3e	; 62
     c0e:	c4 55       	subi	r28, 0x54	; 84
     c10:	d0 40       	sbci	r29, 0x00	; 0
     c12:	0f b6       	in	r0, 0x3f	; 63
     c14:	f8 94       	cli
     c16:	de bf       	out	0x3e, r29	; 62
     c18:	0f be       	out	0x3f, r0	; 63
     c1a:	cd bf       	out	0x3d, r28	; 61
    LCD_clearScreen();
     c1c:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <LCD_clearScreen>
    LCD_displayString("Plz Enter Pass:");
     c20:	80 e6       	ldi	r24, 0x60	; 96
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <LCD_displayString>
    LCD_moveCursor(1, 0);
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	60 e0       	ldi	r22, 0x00	; 0
     c2c:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <LCD_moveCursor>

     i = key = 0;
     c30:	10 92 3b 01 	sts	0x013B, r1
     c34:	80 91 3b 01 	lds	r24, 0x013B
     c38:	80 93 3a 01 	sts	0x013A, r24
    flag = 1;
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	80 93 34 01 	sts	0x0134, r24

    // Loop to receive the user's input for the new password
    for (i = 0; i < PASS_LENGTH; i++) {
     c42:	10 92 3a 01 	sts	0x013A, r1
     c46:	cf c0       	rjmp	.+414    	; 0xde6 <createNewPass+0x1e4>
        key = KEYPAD_getPressedKey();
     c48:	0e 94 45 11 	call	0x228a	; 0x228a <KEYPAD_getPressedKey>
     c4c:	80 93 3b 01 	sts	0x013B, r24

        // Check if the key pressed is a valid numeric key (0-9)
        if (key >= 0 && key <= 9) {
     c50:	80 91 3b 01 	lds	r24, 0x013B
     c54:	8a 30       	cpi	r24, 0x0A	; 10
     c56:	08 f0       	brcs	.+2      	; 0xc5a <createNewPass+0x58>
     c58:	c1 c0       	rjmp	.+386    	; 0xddc <createNewPass+0x1da>
            LCD_displayCharacter('*'); // Display an asterisk to mask the input
     c5a:	8a e2       	ldi	r24, 0x2A	; 42
     c5c:	0e 94 c8 14 	call	0x2990	; 0x2990 <LCD_displayCharacter>
            Password_1[i] = key; // Store the entered digit in the password array
     c60:	80 91 3a 01 	lds	r24, 0x013A
     c64:	88 2f       	mov	r24, r24
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	20 91 3b 01 	lds	r18, 0x013B
     c6c:	fc 01       	movw	r30, r24
     c6e:	e1 5d       	subi	r30, 0xD1	; 209
     c70:	fe 4f       	sbci	r31, 0xFE	; 254
     c72:	20 83       	st	Z, r18
     c74:	fe 01       	movw	r30, r28
     c76:	ef 5a       	subi	r30, 0xAF	; 175
     c78:	ff 4f       	sbci	r31, 0xFF	; 255
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	a8 ec       	ldi	r26, 0xC8	; 200
     c80:	b3 e4       	ldi	r27, 0x43	; 67
     c82:	80 83       	st	Z, r24
     c84:	91 83       	std	Z+1, r25	; 0x01
     c86:	a2 83       	std	Z+2, r26	; 0x02
     c88:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c8a:	8e 01       	movw	r16, r28
     c8c:	03 5b       	subi	r16, 0xB3	; 179
     c8e:	1f 4f       	sbci	r17, 0xFF	; 255
     c90:	fe 01       	movw	r30, r28
     c92:	ef 5a       	subi	r30, 0xAF	; 175
     c94:	ff 4f       	sbci	r31, 0xFF	; 255
     c96:	60 81       	ld	r22, Z
     c98:	71 81       	ldd	r23, Z+1	; 0x01
     c9a:	82 81       	ldd	r24, Z+2	; 0x02
     c9c:	93 81       	ldd	r25, Z+3	; 0x03
     c9e:	20 e0       	ldi	r18, 0x00	; 0
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	4a ef       	ldi	r20, 0xFA	; 250
     ca4:	54 e4       	ldi	r21, 0x44	; 68
     ca6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     caa:	dc 01       	movw	r26, r24
     cac:	cb 01       	movw	r24, r22
     cae:	f8 01       	movw	r30, r16
     cb0:	80 83       	st	Z, r24
     cb2:	91 83       	std	Z+1, r25	; 0x01
     cb4:	a2 83       	std	Z+2, r26	; 0x02
     cb6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     cb8:	fe 01       	movw	r30, r28
     cba:	e3 5b       	subi	r30, 0xB3	; 179
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	60 81       	ld	r22, Z
     cc0:	71 81       	ldd	r23, Z+1	; 0x01
     cc2:	82 81       	ldd	r24, Z+2	; 0x02
     cc4:	93 81       	ldd	r25, Z+3	; 0x03
     cc6:	20 e0       	ldi	r18, 0x00	; 0
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	40 e8       	ldi	r20, 0x80	; 128
     ccc:	5f e3       	ldi	r21, 0x3F	; 63
     cce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cd2:	88 23       	and	r24, r24
     cd4:	44 f4       	brge	.+16     	; 0xce6 <createNewPass+0xe4>
		__ticks = 1;
     cd6:	fe 01       	movw	r30, r28
     cd8:	e5 5b       	subi	r30, 0xB5	; 181
     cda:	ff 4f       	sbci	r31, 0xFF	; 255
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	91 83       	std	Z+1, r25	; 0x01
     ce2:	80 83       	st	Z, r24
     ce4:	64 c0       	rjmp	.+200    	; 0xdae <createNewPass+0x1ac>
	else if (__tmp > 65535)
     ce6:	fe 01       	movw	r30, r28
     ce8:	e3 5b       	subi	r30, 0xB3	; 179
     cea:	ff 4f       	sbci	r31, 0xFF	; 255
     cec:	60 81       	ld	r22, Z
     cee:	71 81       	ldd	r23, Z+1	; 0x01
     cf0:	82 81       	ldd	r24, Z+2	; 0x02
     cf2:	93 81       	ldd	r25, Z+3	; 0x03
     cf4:	20 e0       	ldi	r18, 0x00	; 0
     cf6:	3f ef       	ldi	r19, 0xFF	; 255
     cf8:	4f e7       	ldi	r20, 0x7F	; 127
     cfa:	57 e4       	ldi	r21, 0x47	; 71
     cfc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d00:	18 16       	cp	r1, r24
     d02:	0c f0       	brlt	.+2      	; 0xd06 <createNewPass+0x104>
     d04:	43 c0       	rjmp	.+134    	; 0xd8c <createNewPass+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d06:	fe 01       	movw	r30, r28
     d08:	ef 5a       	subi	r30, 0xAF	; 175
     d0a:	ff 4f       	sbci	r31, 0xFF	; 255
     d0c:	60 81       	ld	r22, Z
     d0e:	71 81       	ldd	r23, Z+1	; 0x01
     d10:	82 81       	ldd	r24, Z+2	; 0x02
     d12:	93 81       	ldd	r25, Z+3	; 0x03
     d14:	20 e0       	ldi	r18, 0x00	; 0
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	40 e2       	ldi	r20, 0x20	; 32
     d1a:	51 e4       	ldi	r21, 0x41	; 65
     d1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d20:	dc 01       	movw	r26, r24
     d22:	cb 01       	movw	r24, r22
     d24:	8e 01       	movw	r16, r28
     d26:	05 5b       	subi	r16, 0xB5	; 181
     d28:	1f 4f       	sbci	r17, 0xFF	; 255
     d2a:	bc 01       	movw	r22, r24
     d2c:	cd 01       	movw	r24, r26
     d2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d32:	dc 01       	movw	r26, r24
     d34:	cb 01       	movw	r24, r22
     d36:	f8 01       	movw	r30, r16
     d38:	91 83       	std	Z+1, r25	; 0x01
     d3a:	80 83       	st	Z, r24
     d3c:	1f c0       	rjmp	.+62     	; 0xd7c <createNewPass+0x17a>
     d3e:	fe 01       	movw	r30, r28
     d40:	e7 5b       	subi	r30, 0xB7	; 183
     d42:	ff 4f       	sbci	r31, 0xFF	; 255
     d44:	88 ec       	ldi	r24, 0xC8	; 200
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	91 83       	std	Z+1, r25	; 0x01
     d4a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d4c:	fe 01       	movw	r30, r28
     d4e:	e7 5b       	subi	r30, 0xB7	; 183
     d50:	ff 4f       	sbci	r31, 0xFF	; 255
     d52:	80 81       	ld	r24, Z
     d54:	91 81       	ldd	r25, Z+1	; 0x01
     d56:	01 97       	sbiw	r24, 0x01	; 1
     d58:	f1 f7       	brne	.-4      	; 0xd56 <createNewPass+0x154>
     d5a:	fe 01       	movw	r30, r28
     d5c:	e7 5b       	subi	r30, 0xB7	; 183
     d5e:	ff 4f       	sbci	r31, 0xFF	; 255
     d60:	91 83       	std	Z+1, r25	; 0x01
     d62:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d64:	de 01       	movw	r26, r28
     d66:	a5 5b       	subi	r26, 0xB5	; 181
     d68:	bf 4f       	sbci	r27, 0xFF	; 255
     d6a:	fe 01       	movw	r30, r28
     d6c:	e5 5b       	subi	r30, 0xB5	; 181
     d6e:	ff 4f       	sbci	r31, 0xFF	; 255
     d70:	80 81       	ld	r24, Z
     d72:	91 81       	ldd	r25, Z+1	; 0x01
     d74:	01 97       	sbiw	r24, 0x01	; 1
     d76:	11 96       	adiw	r26, 0x01	; 1
     d78:	9c 93       	st	X, r25
     d7a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d7c:	fe 01       	movw	r30, r28
     d7e:	e5 5b       	subi	r30, 0xB5	; 181
     d80:	ff 4f       	sbci	r31, 0xFF	; 255
     d82:	80 81       	ld	r24, Z
     d84:	91 81       	ldd	r25, Z+1	; 0x01
     d86:	00 97       	sbiw	r24, 0x00	; 0
     d88:	d1 f6       	brne	.-76     	; 0xd3e <createNewPass+0x13c>
     d8a:	28 c0       	rjmp	.+80     	; 0xddc <createNewPass+0x1da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d8c:	8e 01       	movw	r16, r28
     d8e:	05 5b       	subi	r16, 0xB5	; 181
     d90:	1f 4f       	sbci	r17, 0xFF	; 255
     d92:	fe 01       	movw	r30, r28
     d94:	e3 5b       	subi	r30, 0xB3	; 179
     d96:	ff 4f       	sbci	r31, 0xFF	; 255
     d98:	60 81       	ld	r22, Z
     d9a:	71 81       	ldd	r23, Z+1	; 0x01
     d9c:	82 81       	ldd	r24, Z+2	; 0x02
     d9e:	93 81       	ldd	r25, Z+3	; 0x03
     da0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     da4:	dc 01       	movw	r26, r24
     da6:	cb 01       	movw	r24, r22
     da8:	f8 01       	movw	r30, r16
     daa:	91 83       	std	Z+1, r25	; 0x01
     dac:	80 83       	st	Z, r24
     dae:	de 01       	movw	r26, r28
     db0:	a9 5b       	subi	r26, 0xB9	; 185
     db2:	bf 4f       	sbci	r27, 0xFF	; 255
     db4:	fe 01       	movw	r30, r28
     db6:	e5 5b       	subi	r30, 0xB5	; 181
     db8:	ff 4f       	sbci	r31, 0xFF	; 255
     dba:	80 81       	ld	r24, Z
     dbc:	91 81       	ldd	r25, Z+1	; 0x01
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	9c 93       	st	X, r25
     dc2:	8e 93       	st	-X, r24
     dc4:	fe 01       	movw	r30, r28
     dc6:	e9 5b       	subi	r30, 0xB9	; 185
     dc8:	ff 4f       	sbci	r31, 0xFF	; 255
     dca:	80 81       	ld	r24, Z
     dcc:	91 81       	ldd	r25, Z+1	; 0x01
     dce:	01 97       	sbiw	r24, 0x01	; 1
     dd0:	f1 f7       	brne	.-4      	; 0xdce <createNewPass+0x1cc>
     dd2:	fe 01       	movw	r30, r28
     dd4:	e9 5b       	subi	r30, 0xB9	; 185
     dd6:	ff 4f       	sbci	r31, 0xFF	; 255
     dd8:	91 83       	std	Z+1, r25	; 0x01
     dda:	80 83       	st	Z, r24

     i = key = 0;
    flag = 1;

    // Loop to receive the user's input for the new password
    for (i = 0; i < PASS_LENGTH; i++) {
     ddc:	80 91 3a 01 	lds	r24, 0x013A
     de0:	8f 5f       	subi	r24, 0xFF	; 255
     de2:	80 93 3a 01 	sts	0x013A, r24
     de6:	80 91 3a 01 	lds	r24, 0x013A
     dea:	85 30       	cpi	r24, 0x05	; 5
     dec:	08 f4       	brcc	.+2      	; 0xdf0 <createNewPass+0x1ee>
     dee:	2c cf       	rjmp	.-424    	; 0xc48 <createNewPass+0x46>
            Password_1[i] = key; // Store the entered digit in the password array
            _delay_ms(KEY_DELAY); // Delay for stability
        }
    }
    // Wait for the user to press the "Enter" button on the keypad
    while (KEYPAD_getPressedKey() != ENTER_BUTTON);
     df0:	0e 94 45 11 	call	0x228a	; 0x228a <KEYPAD_getPressedKey>
     df4:	8d 30       	cpi	r24, 0x0D	; 13
     df6:	e1 f7       	brne	.-8      	; 0xdf0 <createNewPass+0x1ee>

     // Send the first part of the new password via UART
    for (i = 0; i < PASS_LENGTH; i++) {
     df8:	10 92 3a 01 	sts	0x013A, r1
     dfc:	94 c0       	rjmp	.+296    	; 0xf26 <createNewPass+0x324>
        UART_sendByte(Password_1[i]);
     dfe:	80 91 3a 01 	lds	r24, 0x013A
     e02:	88 2f       	mov	r24, r24
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	fc 01       	movw	r30, r24
     e08:	e1 5d       	subi	r30, 0xD1	; 209
     e0a:	fe 4f       	sbci	r31, 0xFE	; 254
     e0c:	80 81       	ld	r24, Z
     e0e:	0e 94 82 19 	call	0x3304	; 0x3304 <UART_sendByte>
     e12:	fe 01       	movw	r30, r28
     e14:	ed 5b       	subi	r30, 0xBD	; 189
     e16:	ff 4f       	sbci	r31, 0xFF	; 255
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	a8 e4       	ldi	r26, 0x48	; 72
     e1e:	b2 e4       	ldi	r27, 0x42	; 66
     e20:	80 83       	st	Z, r24
     e22:	91 83       	std	Z+1, r25	; 0x01
     e24:	a2 83       	std	Z+2, r26	; 0x02
     e26:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e28:	8e 01       	movw	r16, r28
     e2a:	01 5c       	subi	r16, 0xC1	; 193
     e2c:	1f 4f       	sbci	r17, 0xFF	; 255
     e2e:	fe 01       	movw	r30, r28
     e30:	ed 5b       	subi	r30, 0xBD	; 189
     e32:	ff 4f       	sbci	r31, 0xFF	; 255
     e34:	60 81       	ld	r22, Z
     e36:	71 81       	ldd	r23, Z+1	; 0x01
     e38:	82 81       	ldd	r24, Z+2	; 0x02
     e3a:	93 81       	ldd	r25, Z+3	; 0x03
     e3c:	20 e0       	ldi	r18, 0x00	; 0
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	4a ef       	ldi	r20, 0xFA	; 250
     e42:	54 e4       	ldi	r21, 0x44	; 68
     e44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e48:	dc 01       	movw	r26, r24
     e4a:	cb 01       	movw	r24, r22
     e4c:	f8 01       	movw	r30, r16
     e4e:	80 83       	st	Z, r24
     e50:	91 83       	std	Z+1, r25	; 0x01
     e52:	a2 83       	std	Z+2, r26	; 0x02
     e54:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e56:	fe 01       	movw	r30, r28
     e58:	ff 96       	adiw	r30, 0x3f	; 63
     e5a:	60 81       	ld	r22, Z
     e5c:	71 81       	ldd	r23, Z+1	; 0x01
     e5e:	82 81       	ldd	r24, Z+2	; 0x02
     e60:	93 81       	ldd	r25, Z+3	; 0x03
     e62:	20 e0       	ldi	r18, 0x00	; 0
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	40 e8       	ldi	r20, 0x80	; 128
     e68:	5f e3       	ldi	r21, 0x3F	; 63
     e6a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e6e:	88 23       	and	r24, r24
     e70:	2c f4       	brge	.+10     	; 0xe7c <createNewPass+0x27a>
		__ticks = 1;
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	9e af       	std	Y+62, r25	; 0x3e
     e78:	8d af       	std	Y+61, r24	; 0x3d
     e7a:	46 c0       	rjmp	.+140    	; 0xf08 <createNewPass+0x306>
	else if (__tmp > 65535)
     e7c:	fe 01       	movw	r30, r28
     e7e:	ff 96       	adiw	r30, 0x3f	; 63
     e80:	60 81       	ld	r22, Z
     e82:	71 81       	ldd	r23, Z+1	; 0x01
     e84:	82 81       	ldd	r24, Z+2	; 0x02
     e86:	93 81       	ldd	r25, Z+3	; 0x03
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	3f ef       	ldi	r19, 0xFF	; 255
     e8c:	4f e7       	ldi	r20, 0x7F	; 127
     e8e:	57 e4       	ldi	r21, 0x47	; 71
     e90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e94:	18 16       	cp	r1, r24
     e96:	64 f5       	brge	.+88     	; 0xef0 <createNewPass+0x2ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e98:	fe 01       	movw	r30, r28
     e9a:	ed 5b       	subi	r30, 0xBD	; 189
     e9c:	ff 4f       	sbci	r31, 0xFF	; 255
     e9e:	60 81       	ld	r22, Z
     ea0:	71 81       	ldd	r23, Z+1	; 0x01
     ea2:	82 81       	ldd	r24, Z+2	; 0x02
     ea4:	93 81       	ldd	r25, Z+3	; 0x03
     ea6:	20 e0       	ldi	r18, 0x00	; 0
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	40 e2       	ldi	r20, 0x20	; 32
     eac:	51 e4       	ldi	r21, 0x41	; 65
     eae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eb2:	dc 01       	movw	r26, r24
     eb4:	cb 01       	movw	r24, r22
     eb6:	bc 01       	movw	r22, r24
     eb8:	cd 01       	movw	r24, r26
     eba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ebe:	dc 01       	movw	r26, r24
     ec0:	cb 01       	movw	r24, r22
     ec2:	9e af       	std	Y+62, r25	; 0x3e
     ec4:	8d af       	std	Y+61, r24	; 0x3d
     ec6:	0f c0       	rjmp	.+30     	; 0xee6 <createNewPass+0x2e4>
     ec8:	88 ec       	ldi	r24, 0xC8	; 200
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	9c af       	std	Y+60, r25	; 0x3c
     ece:	8b af       	std	Y+59, r24	; 0x3b
     ed0:	8b ad       	ldd	r24, Y+59	; 0x3b
     ed2:	9c ad       	ldd	r25, Y+60	; 0x3c
     ed4:	01 97       	sbiw	r24, 0x01	; 1
     ed6:	f1 f7       	brne	.-4      	; 0xed4 <createNewPass+0x2d2>
     ed8:	9c af       	std	Y+60, r25	; 0x3c
     eda:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     edc:	8d ad       	ldd	r24, Y+61	; 0x3d
     ede:	9e ad       	ldd	r25, Y+62	; 0x3e
     ee0:	01 97       	sbiw	r24, 0x01	; 1
     ee2:	9e af       	std	Y+62, r25	; 0x3e
     ee4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ee6:	8d ad       	ldd	r24, Y+61	; 0x3d
     ee8:	9e ad       	ldd	r25, Y+62	; 0x3e
     eea:	00 97       	sbiw	r24, 0x00	; 0
     eec:	69 f7       	brne	.-38     	; 0xec8 <createNewPass+0x2c6>
     eee:	16 c0       	rjmp	.+44     	; 0xf1c <createNewPass+0x31a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ef0:	fe 01       	movw	r30, r28
     ef2:	ff 96       	adiw	r30, 0x3f	; 63
     ef4:	60 81       	ld	r22, Z
     ef6:	71 81       	ldd	r23, Z+1	; 0x01
     ef8:	82 81       	ldd	r24, Z+2	; 0x02
     efa:	93 81       	ldd	r25, Z+3	; 0x03
     efc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f00:	dc 01       	movw	r26, r24
     f02:	cb 01       	movw	r24, r22
     f04:	9e af       	std	Y+62, r25	; 0x3e
     f06:	8d af       	std	Y+61, r24	; 0x3d
     f08:	8d ad       	ldd	r24, Y+61	; 0x3d
     f0a:	9e ad       	ldd	r25, Y+62	; 0x3e
     f0c:	9a af       	std	Y+58, r25	; 0x3a
     f0e:	89 af       	std	Y+57, r24	; 0x39
     f10:	89 ad       	ldd	r24, Y+57	; 0x39
     f12:	9a ad       	ldd	r25, Y+58	; 0x3a
     f14:	01 97       	sbiw	r24, 0x01	; 1
     f16:	f1 f7       	brne	.-4      	; 0xf14 <createNewPass+0x312>
     f18:	9a af       	std	Y+58, r25	; 0x3a
     f1a:	89 af       	std	Y+57, r24	; 0x39
    }
    // Wait for the user to press the "Enter" button on the keypad
    while (KEYPAD_getPressedKey() != ENTER_BUTTON);

     // Send the first part of the new password via UART
    for (i = 0; i < PASS_LENGTH; i++) {
     f1c:	80 91 3a 01 	lds	r24, 0x013A
     f20:	8f 5f       	subi	r24, 0xFF	; 255
     f22:	80 93 3a 01 	sts	0x013A, r24
     f26:	80 91 3a 01 	lds	r24, 0x013A
     f2a:	85 30       	cpi	r24, 0x05	; 5
     f2c:	08 f4       	brcc	.+2      	; 0xf30 <createNewPass+0x32e>
     f2e:	67 cf       	rjmp	.-306    	; 0xdfe <createNewPass+0x1fc>
        _delay_ms(UART_DELAY);
    }


    // Clear the LCD and prompt the user to re-enter the password
    LCD_clearScreen();
     f30:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <LCD_clearScreen>
    LCD_displayString("Plz reEnter Pass:");
     f34:	80 e7       	ldi	r24, 0x70	; 112
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <LCD_displayString>
    LCD_moveCursor(1, 0);
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	60 e0       	ldi	r22, 0x00	; 0
     f40:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <LCD_moveCursor>

    // Loop to receive the user's confirmation of the new password
    for (i = 0; i < PASS_LENGTH; i++) {
     f44:	10 92 3a 01 	sts	0x013A, r1
     f48:	8d c0       	rjmp	.+282    	; 0x1064 <createNewPass+0x462>
        key = KEYPAD_getPressedKey();
     f4a:	0e 94 45 11 	call	0x228a	; 0x228a <KEYPAD_getPressedKey>
     f4e:	80 93 3b 01 	sts	0x013B, r24

        // Check if the key pressed is a valid numeric key (0-9)
        if (key >= 0 && key <= 9) {
     f52:	80 91 3b 01 	lds	r24, 0x013B
     f56:	8a 30       	cpi	r24, 0x0A	; 10
     f58:	08 f0       	brcs	.+2      	; 0xf5c <createNewPass+0x35a>
     f5a:	7f c0       	rjmp	.+254    	; 0x105a <createNewPass+0x458>
            LCD_displayCharacter('*'); // Display an asterisk to mask the input
     f5c:	8a e2       	ldi	r24, 0x2A	; 42
     f5e:	0e 94 c8 14 	call	0x2990	; 0x2990 <LCD_displayCharacter>
            Password_2[i] = key; // Store the entered digit in the confirmation password array
     f62:	80 91 3a 01 	lds	r24, 0x013A
     f66:	88 2f       	mov	r24, r24
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	20 91 3b 01 	lds	r18, 0x013B
     f6e:	fc 01       	movw	r30, r24
     f70:	eb 5c       	subi	r30, 0xCB	; 203
     f72:	fe 4f       	sbci	r31, 0xFE	; 254
     f74:	20 83       	st	Z, r18
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	a8 ec       	ldi	r26, 0xC8	; 200
     f7c:	b3 e4       	ldi	r27, 0x43	; 67
     f7e:	8d ab       	std	Y+53, r24	; 0x35
     f80:	9e ab       	std	Y+54, r25	; 0x36
     f82:	af ab       	std	Y+55, r26	; 0x37
     f84:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f86:	6d a9       	ldd	r22, Y+53	; 0x35
     f88:	7e a9       	ldd	r23, Y+54	; 0x36
     f8a:	8f a9       	ldd	r24, Y+55	; 0x37
     f8c:	98 ad       	ldd	r25, Y+56	; 0x38
     f8e:	20 e0       	ldi	r18, 0x00	; 0
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	4a ef       	ldi	r20, 0xFA	; 250
     f94:	54 e4       	ldi	r21, 0x44	; 68
     f96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f9a:	dc 01       	movw	r26, r24
     f9c:	cb 01       	movw	r24, r22
     f9e:	89 ab       	std	Y+49, r24	; 0x31
     fa0:	9a ab       	std	Y+50, r25	; 0x32
     fa2:	ab ab       	std	Y+51, r26	; 0x33
     fa4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     fa6:	69 a9       	ldd	r22, Y+49	; 0x31
     fa8:	7a a9       	ldd	r23, Y+50	; 0x32
     faa:	8b a9       	ldd	r24, Y+51	; 0x33
     fac:	9c a9       	ldd	r25, Y+52	; 0x34
     fae:	20 e0       	ldi	r18, 0x00	; 0
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	40 e8       	ldi	r20, 0x80	; 128
     fb4:	5f e3       	ldi	r21, 0x3F	; 63
     fb6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fba:	88 23       	and	r24, r24
     fbc:	2c f4       	brge	.+10     	; 0xfc8 <createNewPass+0x3c6>
		__ticks = 1;
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	98 ab       	std	Y+48, r25	; 0x30
     fc4:	8f a7       	std	Y+47, r24	; 0x2f
     fc6:	3f c0       	rjmp	.+126    	; 0x1046 <createNewPass+0x444>
	else if (__tmp > 65535)
     fc8:	69 a9       	ldd	r22, Y+49	; 0x31
     fca:	7a a9       	ldd	r23, Y+50	; 0x32
     fcc:	8b a9       	ldd	r24, Y+51	; 0x33
     fce:	9c a9       	ldd	r25, Y+52	; 0x34
     fd0:	20 e0       	ldi	r18, 0x00	; 0
     fd2:	3f ef       	ldi	r19, 0xFF	; 255
     fd4:	4f e7       	ldi	r20, 0x7F	; 127
     fd6:	57 e4       	ldi	r21, 0x47	; 71
     fd8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fdc:	18 16       	cp	r1, r24
     fde:	4c f5       	brge	.+82     	; 0x1032 <createNewPass+0x430>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fe0:	6d a9       	ldd	r22, Y+53	; 0x35
     fe2:	7e a9       	ldd	r23, Y+54	; 0x36
     fe4:	8f a9       	ldd	r24, Y+55	; 0x37
     fe6:	98 ad       	ldd	r25, Y+56	; 0x38
     fe8:	20 e0       	ldi	r18, 0x00	; 0
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	40 e2       	ldi	r20, 0x20	; 32
     fee:	51 e4       	ldi	r21, 0x41	; 65
     ff0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ff4:	dc 01       	movw	r26, r24
     ff6:	cb 01       	movw	r24, r22
     ff8:	bc 01       	movw	r22, r24
     ffa:	cd 01       	movw	r24, r26
     ffc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1000:	dc 01       	movw	r26, r24
    1002:	cb 01       	movw	r24, r22
    1004:	98 ab       	std	Y+48, r25	; 0x30
    1006:	8f a7       	std	Y+47, r24	; 0x2f
    1008:	0f c0       	rjmp	.+30     	; 0x1028 <createNewPass+0x426>
    100a:	88 ec       	ldi	r24, 0xC8	; 200
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	9e a7       	std	Y+46, r25	; 0x2e
    1010:	8d a7       	std	Y+45, r24	; 0x2d
    1012:	8d a5       	ldd	r24, Y+45	; 0x2d
    1014:	9e a5       	ldd	r25, Y+46	; 0x2e
    1016:	01 97       	sbiw	r24, 0x01	; 1
    1018:	f1 f7       	brne	.-4      	; 0x1016 <createNewPass+0x414>
    101a:	9e a7       	std	Y+46, r25	; 0x2e
    101c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    101e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1020:	98 a9       	ldd	r25, Y+48	; 0x30
    1022:	01 97       	sbiw	r24, 0x01	; 1
    1024:	98 ab       	std	Y+48, r25	; 0x30
    1026:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1028:	8f a5       	ldd	r24, Y+47	; 0x2f
    102a:	98 a9       	ldd	r25, Y+48	; 0x30
    102c:	00 97       	sbiw	r24, 0x00	; 0
    102e:	69 f7       	brne	.-38     	; 0x100a <createNewPass+0x408>
    1030:	14 c0       	rjmp	.+40     	; 0x105a <createNewPass+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1032:	69 a9       	ldd	r22, Y+49	; 0x31
    1034:	7a a9       	ldd	r23, Y+50	; 0x32
    1036:	8b a9       	ldd	r24, Y+51	; 0x33
    1038:	9c a9       	ldd	r25, Y+52	; 0x34
    103a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    103e:	dc 01       	movw	r26, r24
    1040:	cb 01       	movw	r24, r22
    1042:	98 ab       	std	Y+48, r25	; 0x30
    1044:	8f a7       	std	Y+47, r24	; 0x2f
    1046:	8f a5       	ldd	r24, Y+47	; 0x2f
    1048:	98 a9       	ldd	r25, Y+48	; 0x30
    104a:	9c a7       	std	Y+44, r25	; 0x2c
    104c:	8b a7       	std	Y+43, r24	; 0x2b
    104e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1050:	9c a5       	ldd	r25, Y+44	; 0x2c
    1052:	01 97       	sbiw	r24, 0x01	; 1
    1054:	f1 f7       	brne	.-4      	; 0x1052 <createNewPass+0x450>
    1056:	9c a7       	std	Y+44, r25	; 0x2c
    1058:	8b a7       	std	Y+43, r24	; 0x2b
    LCD_clearScreen();
    LCD_displayString("Plz reEnter Pass:");
    LCD_moveCursor(1, 0);

    // Loop to receive the user's confirmation of the new password
    for (i = 0; i < PASS_LENGTH; i++) {
    105a:	80 91 3a 01 	lds	r24, 0x013A
    105e:	8f 5f       	subi	r24, 0xFF	; 255
    1060:	80 93 3a 01 	sts	0x013A, r24
    1064:	80 91 3a 01 	lds	r24, 0x013A
    1068:	85 30       	cpi	r24, 0x05	; 5
    106a:	08 f4       	brcc	.+2      	; 0x106e <createNewPass+0x46c>
    106c:	6e cf       	rjmp	.-292    	; 0xf4a <createNewPass+0x348>
            _delay_ms(KEY_DELAY); // Delay for stability
        }
    }

    // Wait for the user to press the "Enter" button on the keypad
    while (KEYPAD_getPressedKey() != ENTER_BUTTON);
    106e:	0e 94 45 11 	call	0x228a	; 0x228a <KEYPAD_getPressedKey>
    1072:	8d 30       	cpi	r24, 0x0D	; 13
    1074:	e1 f7       	brne	.-8      	; 0x106e <createNewPass+0x46c>

    // Send the confirmation part of the new password via UART
    for (i = 0; i < PASS_LENGTH; i++) {
    1076:	10 92 3a 01 	sts	0x013A, r1
    107a:	81 c0       	rjmp	.+258    	; 0x117e <createNewPass+0x57c>
        UART_sendByte(Password_2[i]);
    107c:	80 91 3a 01 	lds	r24, 0x013A
    1080:	88 2f       	mov	r24, r24
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	fc 01       	movw	r30, r24
    1086:	eb 5c       	subi	r30, 0xCB	; 203
    1088:	fe 4f       	sbci	r31, 0xFE	; 254
    108a:	80 81       	ld	r24, Z
    108c:	0e 94 82 19 	call	0x3304	; 0x3304 <UART_sendByte>
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	a8 e4       	ldi	r26, 0x48	; 72
    1096:	b2 e4       	ldi	r27, 0x42	; 66
    1098:	8f a3       	std	Y+39, r24	; 0x27
    109a:	98 a7       	std	Y+40, r25	; 0x28
    109c:	a9 a7       	std	Y+41, r26	; 0x29
    109e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10a0:	6f a1       	ldd	r22, Y+39	; 0x27
    10a2:	78 a5       	ldd	r23, Y+40	; 0x28
    10a4:	89 a5       	ldd	r24, Y+41	; 0x29
    10a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    10a8:	20 e0       	ldi	r18, 0x00	; 0
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	4a ef       	ldi	r20, 0xFA	; 250
    10ae:	54 e4       	ldi	r21, 0x44	; 68
    10b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10b4:	dc 01       	movw	r26, r24
    10b6:	cb 01       	movw	r24, r22
    10b8:	8b a3       	std	Y+35, r24	; 0x23
    10ba:	9c a3       	std	Y+36, r25	; 0x24
    10bc:	ad a3       	std	Y+37, r26	; 0x25
    10be:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    10c0:	6b a1       	ldd	r22, Y+35	; 0x23
    10c2:	7c a1       	ldd	r23, Y+36	; 0x24
    10c4:	8d a1       	ldd	r24, Y+37	; 0x25
    10c6:	9e a1       	ldd	r25, Y+38	; 0x26
    10c8:	20 e0       	ldi	r18, 0x00	; 0
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	40 e8       	ldi	r20, 0x80	; 128
    10ce:	5f e3       	ldi	r21, 0x3F	; 63
    10d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10d4:	88 23       	and	r24, r24
    10d6:	2c f4       	brge	.+10     	; 0x10e2 <createNewPass+0x4e0>
		__ticks = 1;
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	9a a3       	std	Y+34, r25	; 0x22
    10de:	89 a3       	std	Y+33, r24	; 0x21
    10e0:	3f c0       	rjmp	.+126    	; 0x1160 <createNewPass+0x55e>
	else if (__tmp > 65535)
    10e2:	6b a1       	ldd	r22, Y+35	; 0x23
    10e4:	7c a1       	ldd	r23, Y+36	; 0x24
    10e6:	8d a1       	ldd	r24, Y+37	; 0x25
    10e8:	9e a1       	ldd	r25, Y+38	; 0x26
    10ea:	20 e0       	ldi	r18, 0x00	; 0
    10ec:	3f ef       	ldi	r19, 0xFF	; 255
    10ee:	4f e7       	ldi	r20, 0x7F	; 127
    10f0:	57 e4       	ldi	r21, 0x47	; 71
    10f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10f6:	18 16       	cp	r1, r24
    10f8:	4c f5       	brge	.+82     	; 0x114c <createNewPass+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10fa:	6f a1       	ldd	r22, Y+39	; 0x27
    10fc:	78 a5       	ldd	r23, Y+40	; 0x28
    10fe:	89 a5       	ldd	r24, Y+41	; 0x29
    1100:	9a a5       	ldd	r25, Y+42	; 0x2a
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	40 e2       	ldi	r20, 0x20	; 32
    1108:	51 e4       	ldi	r21, 0x41	; 65
    110a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    110e:	dc 01       	movw	r26, r24
    1110:	cb 01       	movw	r24, r22
    1112:	bc 01       	movw	r22, r24
    1114:	cd 01       	movw	r24, r26
    1116:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    111a:	dc 01       	movw	r26, r24
    111c:	cb 01       	movw	r24, r22
    111e:	9a a3       	std	Y+34, r25	; 0x22
    1120:	89 a3       	std	Y+33, r24	; 0x21
    1122:	0f c0       	rjmp	.+30     	; 0x1142 <createNewPass+0x540>
    1124:	88 ec       	ldi	r24, 0xC8	; 200
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	98 a3       	std	Y+32, r25	; 0x20
    112a:	8f 8f       	std	Y+31, r24	; 0x1f
    112c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    112e:	98 a1       	ldd	r25, Y+32	; 0x20
    1130:	01 97       	sbiw	r24, 0x01	; 1
    1132:	f1 f7       	brne	.-4      	; 0x1130 <createNewPass+0x52e>
    1134:	98 a3       	std	Y+32, r25	; 0x20
    1136:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1138:	89 a1       	ldd	r24, Y+33	; 0x21
    113a:	9a a1       	ldd	r25, Y+34	; 0x22
    113c:	01 97       	sbiw	r24, 0x01	; 1
    113e:	9a a3       	std	Y+34, r25	; 0x22
    1140:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1142:	89 a1       	ldd	r24, Y+33	; 0x21
    1144:	9a a1       	ldd	r25, Y+34	; 0x22
    1146:	00 97       	sbiw	r24, 0x00	; 0
    1148:	69 f7       	brne	.-38     	; 0x1124 <createNewPass+0x522>
    114a:	14 c0       	rjmp	.+40     	; 0x1174 <createNewPass+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    114c:	6b a1       	ldd	r22, Y+35	; 0x23
    114e:	7c a1       	ldd	r23, Y+36	; 0x24
    1150:	8d a1       	ldd	r24, Y+37	; 0x25
    1152:	9e a1       	ldd	r25, Y+38	; 0x26
    1154:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1158:	dc 01       	movw	r26, r24
    115a:	cb 01       	movw	r24, r22
    115c:	9a a3       	std	Y+34, r25	; 0x22
    115e:	89 a3       	std	Y+33, r24	; 0x21
    1160:	89 a1       	ldd	r24, Y+33	; 0x21
    1162:	9a a1       	ldd	r25, Y+34	; 0x22
    1164:	9e 8f       	std	Y+30, r25	; 0x1e
    1166:	8d 8f       	std	Y+29, r24	; 0x1d
    1168:	8d 8d       	ldd	r24, Y+29	; 0x1d
    116a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    116c:	01 97       	sbiw	r24, 0x01	; 1
    116e:	f1 f7       	brne	.-4      	; 0x116c <createNewPass+0x56a>
    1170:	9e 8f       	std	Y+30, r25	; 0x1e
    1172:	8d 8f       	std	Y+29, r24	; 0x1d

    // Wait for the user to press the "Enter" button on the keypad
    while (KEYPAD_getPressedKey() != ENTER_BUTTON);

    // Send the confirmation part of the new password via UART
    for (i = 0; i < PASS_LENGTH; i++) {
    1174:	80 91 3a 01 	lds	r24, 0x013A
    1178:	8f 5f       	subi	r24, 0xFF	; 255
    117a:	80 93 3a 01 	sts	0x013A, r24
    117e:	80 91 3a 01 	lds	r24, 0x013A
    1182:	85 30       	cpi	r24, 0x05	; 5
    1184:	08 f4       	brcc	.+2      	; 0x1188 <createNewPass+0x586>
    1186:	7a cf       	rjmp	.-268    	; 0x107c <createNewPass+0x47a>
        UART_sendByte(Password_2[i]);
        _delay_ms(UART_DELAY);
    }

    // Clear the LCD and receive a flag via UART to indicate if the passwords match
    LCD_clearScreen();
    1188:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <LCD_clearScreen>
    flag = UART_recieveByte();
    118c:	0e 94 99 19 	call	0x3332	; 0x3332 <UART_recieveByte>
    1190:	80 93 34 01 	sts	0x0134, r24

    // Check the flag to determine if the passwords match
    if (flag == 1) {
    1194:	80 91 34 01 	lds	r24, 0x0134
    1198:	81 30       	cpi	r24, 0x01	; 1
    119a:	09 f0       	breq	.+2      	; 0x119e <createNewPass+0x59c>
    119c:	77 c0       	rjmp	.+238    	; 0x128c <createNewPass+0x68a>
        LCD_displayString("Matching....");
    119e:	82 e8       	ldi	r24, 0x82	; 130
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <LCD_displayString>
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	a6 e1       	ldi	r26, 0x16	; 22
    11ac:	b4 e4       	ldi	r27, 0x44	; 68
    11ae:	89 8f       	std	Y+25, r24	; 0x19
    11b0:	9a 8f       	std	Y+26, r25	; 0x1a
    11b2:	ab 8f       	std	Y+27, r26	; 0x1b
    11b4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11b6:	69 8d       	ldd	r22, Y+25	; 0x19
    11b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11be:	20 e0       	ldi	r18, 0x00	; 0
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	4a ef       	ldi	r20, 0xFA	; 250
    11c4:	54 e4       	ldi	r21, 0x44	; 68
    11c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ca:	dc 01       	movw	r26, r24
    11cc:	cb 01       	movw	r24, r22
    11ce:	8d 8b       	std	Y+21, r24	; 0x15
    11d0:	9e 8b       	std	Y+22, r25	; 0x16
    11d2:	af 8b       	std	Y+23, r26	; 0x17
    11d4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    11d6:	6d 89       	ldd	r22, Y+21	; 0x15
    11d8:	7e 89       	ldd	r23, Y+22	; 0x16
    11da:	8f 89       	ldd	r24, Y+23	; 0x17
    11dc:	98 8d       	ldd	r25, Y+24	; 0x18
    11de:	20 e0       	ldi	r18, 0x00	; 0
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	40 e8       	ldi	r20, 0x80	; 128
    11e4:	5f e3       	ldi	r21, 0x3F	; 63
    11e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11ea:	88 23       	and	r24, r24
    11ec:	2c f4       	brge	.+10     	; 0x11f8 <createNewPass+0x5f6>
		__ticks = 1;
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	9c 8b       	std	Y+20, r25	; 0x14
    11f4:	8b 8b       	std	Y+19, r24	; 0x13
    11f6:	3f c0       	rjmp	.+126    	; 0x1276 <createNewPass+0x674>
	else if (__tmp > 65535)
    11f8:	6d 89       	ldd	r22, Y+21	; 0x15
    11fa:	7e 89       	ldd	r23, Y+22	; 0x16
    11fc:	8f 89       	ldd	r24, Y+23	; 0x17
    11fe:	98 8d       	ldd	r25, Y+24	; 0x18
    1200:	20 e0       	ldi	r18, 0x00	; 0
    1202:	3f ef       	ldi	r19, 0xFF	; 255
    1204:	4f e7       	ldi	r20, 0x7F	; 127
    1206:	57 e4       	ldi	r21, 0x47	; 71
    1208:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    120c:	18 16       	cp	r1, r24
    120e:	4c f5       	brge	.+82     	; 0x1262 <createNewPass+0x660>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1210:	69 8d       	ldd	r22, Y+25	; 0x19
    1212:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1214:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1216:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1218:	20 e0       	ldi	r18, 0x00	; 0
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	40 e2       	ldi	r20, 0x20	; 32
    121e:	51 e4       	ldi	r21, 0x41	; 65
    1220:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1224:	dc 01       	movw	r26, r24
    1226:	cb 01       	movw	r24, r22
    1228:	bc 01       	movw	r22, r24
    122a:	cd 01       	movw	r24, r26
    122c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1230:	dc 01       	movw	r26, r24
    1232:	cb 01       	movw	r24, r22
    1234:	9c 8b       	std	Y+20, r25	; 0x14
    1236:	8b 8b       	std	Y+19, r24	; 0x13
    1238:	0f c0       	rjmp	.+30     	; 0x1258 <createNewPass+0x656>
    123a:	88 ec       	ldi	r24, 0xC8	; 200
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	9a 8b       	std	Y+18, r25	; 0x12
    1240:	89 8b       	std	Y+17, r24	; 0x11
    1242:	89 89       	ldd	r24, Y+17	; 0x11
    1244:	9a 89       	ldd	r25, Y+18	; 0x12
    1246:	01 97       	sbiw	r24, 0x01	; 1
    1248:	f1 f7       	brne	.-4      	; 0x1246 <createNewPass+0x644>
    124a:	9a 8b       	std	Y+18, r25	; 0x12
    124c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    124e:	8b 89       	ldd	r24, Y+19	; 0x13
    1250:	9c 89       	ldd	r25, Y+20	; 0x14
    1252:	01 97       	sbiw	r24, 0x01	; 1
    1254:	9c 8b       	std	Y+20, r25	; 0x14
    1256:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1258:	8b 89       	ldd	r24, Y+19	; 0x13
    125a:	9c 89       	ldd	r25, Y+20	; 0x14
    125c:	00 97       	sbiw	r24, 0x00	; 0
    125e:	69 f7       	brne	.-38     	; 0x123a <createNewPass+0x638>
    1260:	8d c0       	rjmp	.+282    	; 0x137c <createNewPass+0x77a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1262:	6d 89       	ldd	r22, Y+21	; 0x15
    1264:	7e 89       	ldd	r23, Y+22	; 0x16
    1266:	8f 89       	ldd	r24, Y+23	; 0x17
    1268:	98 8d       	ldd	r25, Y+24	; 0x18
    126a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    126e:	dc 01       	movw	r26, r24
    1270:	cb 01       	movw	r24, r22
    1272:	9c 8b       	std	Y+20, r25	; 0x14
    1274:	8b 8b       	std	Y+19, r24	; 0x13
    1276:	8b 89       	ldd	r24, Y+19	; 0x13
    1278:	9c 89       	ldd	r25, Y+20	; 0x14
    127a:	98 8b       	std	Y+16, r25	; 0x10
    127c:	8f 87       	std	Y+15, r24	; 0x0f
    127e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1280:	98 89       	ldd	r25, Y+16	; 0x10
    1282:	01 97       	sbiw	r24, 0x01	; 1
    1284:	f1 f7       	brne	.-4      	; 0x1282 <createNewPass+0x680>
    1286:	98 8b       	std	Y+16, r25	; 0x10
    1288:	8f 87       	std	Y+15, r24	; 0x0f
    128a:	78 c0       	rjmp	.+240    	; 0x137c <createNewPass+0x77a>
        _delay_ms(NORMAL_DELAY);
    } else {
        LCD_displayString("Not Matching!");
    128c:	8f e8       	ldi	r24, 0x8F	; 143
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <LCD_displayString>
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	a6 e1       	ldi	r26, 0x16	; 22
    129a:	b4 e4       	ldi	r27, 0x44	; 68
    129c:	8b 87       	std	Y+11, r24	; 0x0b
    129e:	9c 87       	std	Y+12, r25	; 0x0c
    12a0:	ad 87       	std	Y+13, r26	; 0x0d
    12a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    12a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    12a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    12aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    12ac:	20 e0       	ldi	r18, 0x00	; 0
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	4a ef       	ldi	r20, 0xFA	; 250
    12b2:	54 e4       	ldi	r21, 0x44	; 68
    12b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12b8:	dc 01       	movw	r26, r24
    12ba:	cb 01       	movw	r24, r22
    12bc:	8f 83       	std	Y+7, r24	; 0x07
    12be:	98 87       	std	Y+8, r25	; 0x08
    12c0:	a9 87       	std	Y+9, r26	; 0x09
    12c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12c4:	6f 81       	ldd	r22, Y+7	; 0x07
    12c6:	78 85       	ldd	r23, Y+8	; 0x08
    12c8:	89 85       	ldd	r24, Y+9	; 0x09
    12ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    12cc:	20 e0       	ldi	r18, 0x00	; 0
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	40 e8       	ldi	r20, 0x80	; 128
    12d2:	5f e3       	ldi	r21, 0x3F	; 63
    12d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12d8:	88 23       	and	r24, r24
    12da:	2c f4       	brge	.+10     	; 0x12e6 <createNewPass+0x6e4>
		__ticks = 1;
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	9e 83       	std	Y+6, r25	; 0x06
    12e2:	8d 83       	std	Y+5, r24	; 0x05
    12e4:	3f c0       	rjmp	.+126    	; 0x1364 <createNewPass+0x762>
	else if (__tmp > 65535)
    12e6:	6f 81       	ldd	r22, Y+7	; 0x07
    12e8:	78 85       	ldd	r23, Y+8	; 0x08
    12ea:	89 85       	ldd	r24, Y+9	; 0x09
    12ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ee:	20 e0       	ldi	r18, 0x00	; 0
    12f0:	3f ef       	ldi	r19, 0xFF	; 255
    12f2:	4f e7       	ldi	r20, 0x7F	; 127
    12f4:	57 e4       	ldi	r21, 0x47	; 71
    12f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12fa:	18 16       	cp	r1, r24
    12fc:	4c f5       	brge	.+82     	; 0x1350 <createNewPass+0x74e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1300:	7c 85       	ldd	r23, Y+12	; 0x0c
    1302:	8d 85       	ldd	r24, Y+13	; 0x0d
    1304:	9e 85       	ldd	r25, Y+14	; 0x0e
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	40 e2       	ldi	r20, 0x20	; 32
    130c:	51 e4       	ldi	r21, 0x41	; 65
    130e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1312:	dc 01       	movw	r26, r24
    1314:	cb 01       	movw	r24, r22
    1316:	bc 01       	movw	r22, r24
    1318:	cd 01       	movw	r24, r26
    131a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    131e:	dc 01       	movw	r26, r24
    1320:	cb 01       	movw	r24, r22
    1322:	9e 83       	std	Y+6, r25	; 0x06
    1324:	8d 83       	std	Y+5, r24	; 0x05
    1326:	0f c0       	rjmp	.+30     	; 0x1346 <createNewPass+0x744>
    1328:	88 ec       	ldi	r24, 0xC8	; 200
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	9c 83       	std	Y+4, r25	; 0x04
    132e:	8b 83       	std	Y+3, r24	; 0x03
    1330:	8b 81       	ldd	r24, Y+3	; 0x03
    1332:	9c 81       	ldd	r25, Y+4	; 0x04
    1334:	01 97       	sbiw	r24, 0x01	; 1
    1336:	f1 f7       	brne	.-4      	; 0x1334 <createNewPass+0x732>
    1338:	9c 83       	std	Y+4, r25	; 0x04
    133a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    133c:	8d 81       	ldd	r24, Y+5	; 0x05
    133e:	9e 81       	ldd	r25, Y+6	; 0x06
    1340:	01 97       	sbiw	r24, 0x01	; 1
    1342:	9e 83       	std	Y+6, r25	; 0x06
    1344:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1346:	8d 81       	ldd	r24, Y+5	; 0x05
    1348:	9e 81       	ldd	r25, Y+6	; 0x06
    134a:	00 97       	sbiw	r24, 0x00	; 0
    134c:	69 f7       	brne	.-38     	; 0x1328 <createNewPass+0x726>
    134e:	14 c0       	rjmp	.+40     	; 0x1378 <createNewPass+0x776>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1350:	6f 81       	ldd	r22, Y+7	; 0x07
    1352:	78 85       	ldd	r23, Y+8	; 0x08
    1354:	89 85       	ldd	r24, Y+9	; 0x09
    1356:	9a 85       	ldd	r25, Y+10	; 0x0a
    1358:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    135c:	dc 01       	movw	r26, r24
    135e:	cb 01       	movw	r24, r22
    1360:	9e 83       	std	Y+6, r25	; 0x06
    1362:	8d 83       	std	Y+5, r24	; 0x05
    1364:	8d 81       	ldd	r24, Y+5	; 0x05
    1366:	9e 81       	ldd	r25, Y+6	; 0x06
    1368:	9a 83       	std	Y+2, r25	; 0x02
    136a:	89 83       	std	Y+1, r24	; 0x01
    136c:	89 81       	ldd	r24, Y+1	; 0x01
    136e:	9a 81       	ldd	r25, Y+2	; 0x02
    1370:	01 97       	sbiw	r24, 0x01	; 1
    1372:	f1 f7       	brne	.-4      	; 0x1370 <createNewPass+0x76e>
    1374:	9a 83       	std	Y+2, r25	; 0x02
    1376:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(NORMAL_DELAY);
        createNewPass(); // Retry password creation in case of non-matching passwords
    1378:	0e 94 01 06 	call	0xc02	; 0xc02 <createNewPass>
    }
}
    137c:	cc 5a       	subi	r28, 0xAC	; 172
    137e:	df 4f       	sbci	r29, 0xFF	; 255
    1380:	0f b6       	in	r0, 0x3f	; 63
    1382:	f8 94       	cli
    1384:	de bf       	out	0x3e, r29	; 62
    1386:	0f be       	out	0x3f, r0	; 63
    1388:	cd bf       	out	0x3d, r28	; 61
    138a:	cf 91       	pop	r28
    138c:	df 91       	pop	r29
    138e:	1f 91       	pop	r17
    1390:	0f 91       	pop	r16
    1392:	08 95       	ret

00001394 <checkPass>:
/*
 * Description:
 * Helper Function responsible for receiving and sending a password via UART and the keypad.
 * It allows the user to enter a password, masking the input with asterisks.
 */
void checkPass(void) {
    1394:	df 93       	push	r29
    1396:	cf 93       	push	r28
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62
    139c:	a1 97       	sbiw	r28, 0x21	; 33
    139e:	0f b6       	in	r0, 0x3f	; 63
    13a0:	f8 94       	cli
    13a2:	de bf       	out	0x3e, r29	; 62
    13a4:	0f be       	out	0x3f, r0	; 63
    13a6:	cd bf       	out	0x3d, r28	; 61
    LCD_clearScreen();
    13a8:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <LCD_clearScreen>
    uint8 Password[PASS_LENGTH];
    LCD_displayString("Plz Enter Pass:");
    13ac:	80 e6       	ldi	r24, 0x60	; 96
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <LCD_displayString>
    LCD_moveCursor(1, 0);
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	60 e0       	ldi	r22, 0x00	; 0
    13b8:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <LCD_moveCursor>

    i = key = 0;
    13bc:	10 92 3b 01 	sts	0x013B, r1
    13c0:	80 91 3b 01 	lds	r24, 0x013B
    13c4:	80 93 3a 01 	sts	0x013A, r24
    13c8:	8f c0       	rjmp	.+286    	; 0x14e8 <checkPass+0x154>

    // Loop to receive the user's input as the entered password
    while (i < PASS_LENGTH) {
        key = KEYPAD_getPressedKey();
    13ca:	0e 94 45 11 	call	0x228a	; 0x228a <KEYPAD_getPressedKey>
    13ce:	80 93 3b 01 	sts	0x013B, r24

        // Check if the key pressed is a valid numeric key (0-9)
        if (key >= 0 && key <= 9) {
    13d2:	80 91 3b 01 	lds	r24, 0x013B
    13d6:	8a 30       	cpi	r24, 0x0A	; 10
    13d8:	08 f0       	brcs	.+2      	; 0x13dc <checkPass+0x48>
    13da:	86 c0       	rjmp	.+268    	; 0x14e8 <checkPass+0x154>
            LCD_displayCharacter('*'); // Display an asterisk to mask the input
    13dc:	8a e2       	ldi	r24, 0x2A	; 42
    13de:	0e 94 c8 14 	call	0x2990	; 0x2990 <LCD_displayCharacter>
            Password[i] = key; // Store the entered digit in the password array
    13e2:	80 91 3a 01 	lds	r24, 0x013A
    13e6:	28 2f       	mov	r18, r24
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	40 91 3b 01 	lds	r20, 0x013B
    13ee:	ce 01       	movw	r24, r28
    13f0:	4d 96       	adiw	r24, 0x1d	; 29
    13f2:	fc 01       	movw	r30, r24
    13f4:	e2 0f       	add	r30, r18
    13f6:	f3 1f       	adc	r31, r19
    13f8:	40 83       	st	Z, r20
    13fa:	80 e0       	ldi	r24, 0x00	; 0
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	a8 ec       	ldi	r26, 0xC8	; 200
    1400:	b3 e4       	ldi	r27, 0x43	; 67
    1402:	89 8f       	std	Y+25, r24	; 0x19
    1404:	9a 8f       	std	Y+26, r25	; 0x1a
    1406:	ab 8f       	std	Y+27, r26	; 0x1b
    1408:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    140a:	69 8d       	ldd	r22, Y+25	; 0x19
    140c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    140e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1410:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	4a ef       	ldi	r20, 0xFA	; 250
    1418:	54 e4       	ldi	r21, 0x44	; 68
    141a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    141e:	dc 01       	movw	r26, r24
    1420:	cb 01       	movw	r24, r22
    1422:	8d 8b       	std	Y+21, r24	; 0x15
    1424:	9e 8b       	std	Y+22, r25	; 0x16
    1426:	af 8b       	std	Y+23, r26	; 0x17
    1428:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    142a:	6d 89       	ldd	r22, Y+21	; 0x15
    142c:	7e 89       	ldd	r23, Y+22	; 0x16
    142e:	8f 89       	ldd	r24, Y+23	; 0x17
    1430:	98 8d       	ldd	r25, Y+24	; 0x18
    1432:	20 e0       	ldi	r18, 0x00	; 0
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	40 e8       	ldi	r20, 0x80	; 128
    1438:	5f e3       	ldi	r21, 0x3F	; 63
    143a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    143e:	88 23       	and	r24, r24
    1440:	2c f4       	brge	.+10     	; 0x144c <checkPass+0xb8>
		__ticks = 1;
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	9c 8b       	std	Y+20, r25	; 0x14
    1448:	8b 8b       	std	Y+19, r24	; 0x13
    144a:	3f c0       	rjmp	.+126    	; 0x14ca <checkPass+0x136>
	else if (__tmp > 65535)
    144c:	6d 89       	ldd	r22, Y+21	; 0x15
    144e:	7e 89       	ldd	r23, Y+22	; 0x16
    1450:	8f 89       	ldd	r24, Y+23	; 0x17
    1452:	98 8d       	ldd	r25, Y+24	; 0x18
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	3f ef       	ldi	r19, 0xFF	; 255
    1458:	4f e7       	ldi	r20, 0x7F	; 127
    145a:	57 e4       	ldi	r21, 0x47	; 71
    145c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1460:	18 16       	cp	r1, r24
    1462:	4c f5       	brge	.+82     	; 0x14b6 <checkPass+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1464:	69 8d       	ldd	r22, Y+25	; 0x19
    1466:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1468:	8b 8d       	ldd	r24, Y+27	; 0x1b
    146a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	40 e2       	ldi	r20, 0x20	; 32
    1472:	51 e4       	ldi	r21, 0x41	; 65
    1474:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1478:	dc 01       	movw	r26, r24
    147a:	cb 01       	movw	r24, r22
    147c:	bc 01       	movw	r22, r24
    147e:	cd 01       	movw	r24, r26
    1480:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1484:	dc 01       	movw	r26, r24
    1486:	cb 01       	movw	r24, r22
    1488:	9c 8b       	std	Y+20, r25	; 0x14
    148a:	8b 8b       	std	Y+19, r24	; 0x13
    148c:	0f c0       	rjmp	.+30     	; 0x14ac <checkPass+0x118>
    148e:	88 ec       	ldi	r24, 0xC8	; 200
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	9a 8b       	std	Y+18, r25	; 0x12
    1494:	89 8b       	std	Y+17, r24	; 0x11
    1496:	89 89       	ldd	r24, Y+17	; 0x11
    1498:	9a 89       	ldd	r25, Y+18	; 0x12
    149a:	01 97       	sbiw	r24, 0x01	; 1
    149c:	f1 f7       	brne	.-4      	; 0x149a <checkPass+0x106>
    149e:	9a 8b       	std	Y+18, r25	; 0x12
    14a0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14a2:	8b 89       	ldd	r24, Y+19	; 0x13
    14a4:	9c 89       	ldd	r25, Y+20	; 0x14
    14a6:	01 97       	sbiw	r24, 0x01	; 1
    14a8:	9c 8b       	std	Y+20, r25	; 0x14
    14aa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ac:	8b 89       	ldd	r24, Y+19	; 0x13
    14ae:	9c 89       	ldd	r25, Y+20	; 0x14
    14b0:	00 97       	sbiw	r24, 0x00	; 0
    14b2:	69 f7       	brne	.-38     	; 0x148e <checkPass+0xfa>
    14b4:	14 c0       	rjmp	.+40     	; 0x14de <checkPass+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14b6:	6d 89       	ldd	r22, Y+21	; 0x15
    14b8:	7e 89       	ldd	r23, Y+22	; 0x16
    14ba:	8f 89       	ldd	r24, Y+23	; 0x17
    14bc:	98 8d       	ldd	r25, Y+24	; 0x18
    14be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c2:	dc 01       	movw	r26, r24
    14c4:	cb 01       	movw	r24, r22
    14c6:	9c 8b       	std	Y+20, r25	; 0x14
    14c8:	8b 8b       	std	Y+19, r24	; 0x13
    14ca:	8b 89       	ldd	r24, Y+19	; 0x13
    14cc:	9c 89       	ldd	r25, Y+20	; 0x14
    14ce:	98 8b       	std	Y+16, r25	; 0x10
    14d0:	8f 87       	std	Y+15, r24	; 0x0f
    14d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    14d4:	98 89       	ldd	r25, Y+16	; 0x10
    14d6:	01 97       	sbiw	r24, 0x01	; 1
    14d8:	f1 f7       	brne	.-4      	; 0x14d6 <checkPass+0x142>
    14da:	98 8b       	std	Y+16, r25	; 0x10
    14dc:	8f 87       	std	Y+15, r24	; 0x0f
            _delay_ms(KEY_DELAY); // Delay for stability
            i++;
    14de:	80 91 3a 01 	lds	r24, 0x013A
    14e2:	8f 5f       	subi	r24, 0xFF	; 255
    14e4:	80 93 3a 01 	sts	0x013A, r24
    LCD_moveCursor(1, 0);

    i = key = 0;

    // Loop to receive the user's input as the entered password
    while (i < PASS_LENGTH) {
    14e8:	80 91 3a 01 	lds	r24, 0x013A
    14ec:	85 30       	cpi	r24, 0x05	; 5
    14ee:	08 f4       	brcc	.+2      	; 0x14f2 <checkPass+0x15e>
    14f0:	6c cf       	rjmp	.-296    	; 0x13ca <checkPass+0x36>
            i++;
        }
    }

    // Wait for the user to press the "Enter" button on the keypad
    while (KEYPAD_getPressedKey() != ENTER_BUTTON);
    14f2:	0e 94 45 11 	call	0x228a	; 0x228a <KEYPAD_getPressedKey>
    14f6:	8d 30       	cpi	r24, 0x0D	; 13
    14f8:	e1 f7       	brne	.-8      	; 0x14f2 <checkPass+0x15e>

    // Send the entered password via UART
    for (i = 0; i < PASS_LENGTH; i++) {
    14fa:	10 92 3a 01 	sts	0x013A, r1
    14fe:	83 c0       	rjmp	.+262    	; 0x1606 <checkPass+0x272>
        UART_sendByte(Password[i]);
    1500:	80 91 3a 01 	lds	r24, 0x013A
    1504:	28 2f       	mov	r18, r24
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	ce 01       	movw	r24, r28
    150a:	4d 96       	adiw	r24, 0x1d	; 29
    150c:	fc 01       	movw	r30, r24
    150e:	e2 0f       	add	r30, r18
    1510:	f3 1f       	adc	r31, r19
    1512:	80 81       	ld	r24, Z
    1514:	0e 94 82 19 	call	0x3304	; 0x3304 <UART_sendByte>
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	a8 e4       	ldi	r26, 0x48	; 72
    151e:	b2 e4       	ldi	r27, 0x42	; 66
    1520:	8b 87       	std	Y+11, r24	; 0x0b
    1522:	9c 87       	std	Y+12, r25	; 0x0c
    1524:	ad 87       	std	Y+13, r26	; 0x0d
    1526:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1528:	6b 85       	ldd	r22, Y+11	; 0x0b
    152a:	7c 85       	ldd	r23, Y+12	; 0x0c
    152c:	8d 85       	ldd	r24, Y+13	; 0x0d
    152e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1530:	20 e0       	ldi	r18, 0x00	; 0
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	4a ef       	ldi	r20, 0xFA	; 250
    1536:	54 e4       	ldi	r21, 0x44	; 68
    1538:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    153c:	dc 01       	movw	r26, r24
    153e:	cb 01       	movw	r24, r22
    1540:	8f 83       	std	Y+7, r24	; 0x07
    1542:	98 87       	std	Y+8, r25	; 0x08
    1544:	a9 87       	std	Y+9, r26	; 0x09
    1546:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1548:	6f 81       	ldd	r22, Y+7	; 0x07
    154a:	78 85       	ldd	r23, Y+8	; 0x08
    154c:	89 85       	ldd	r24, Y+9	; 0x09
    154e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1550:	20 e0       	ldi	r18, 0x00	; 0
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	40 e8       	ldi	r20, 0x80	; 128
    1556:	5f e3       	ldi	r21, 0x3F	; 63
    1558:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    155c:	88 23       	and	r24, r24
    155e:	2c f4       	brge	.+10     	; 0x156a <checkPass+0x1d6>
		__ticks = 1;
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	9e 83       	std	Y+6, r25	; 0x06
    1566:	8d 83       	std	Y+5, r24	; 0x05
    1568:	3f c0       	rjmp	.+126    	; 0x15e8 <checkPass+0x254>
	else if (__tmp > 65535)
    156a:	6f 81       	ldd	r22, Y+7	; 0x07
    156c:	78 85       	ldd	r23, Y+8	; 0x08
    156e:	89 85       	ldd	r24, Y+9	; 0x09
    1570:	9a 85       	ldd	r25, Y+10	; 0x0a
    1572:	20 e0       	ldi	r18, 0x00	; 0
    1574:	3f ef       	ldi	r19, 0xFF	; 255
    1576:	4f e7       	ldi	r20, 0x7F	; 127
    1578:	57 e4       	ldi	r21, 0x47	; 71
    157a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    157e:	18 16       	cp	r1, r24
    1580:	4c f5       	brge	.+82     	; 0x15d4 <checkPass+0x240>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1582:	6b 85       	ldd	r22, Y+11	; 0x0b
    1584:	7c 85       	ldd	r23, Y+12	; 0x0c
    1586:	8d 85       	ldd	r24, Y+13	; 0x0d
    1588:	9e 85       	ldd	r25, Y+14	; 0x0e
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	40 e2       	ldi	r20, 0x20	; 32
    1590:	51 e4       	ldi	r21, 0x41	; 65
    1592:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1596:	dc 01       	movw	r26, r24
    1598:	cb 01       	movw	r24, r22
    159a:	bc 01       	movw	r22, r24
    159c:	cd 01       	movw	r24, r26
    159e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15a2:	dc 01       	movw	r26, r24
    15a4:	cb 01       	movw	r24, r22
    15a6:	9e 83       	std	Y+6, r25	; 0x06
    15a8:	8d 83       	std	Y+5, r24	; 0x05
    15aa:	0f c0       	rjmp	.+30     	; 0x15ca <checkPass+0x236>
    15ac:	88 ec       	ldi	r24, 0xC8	; 200
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	9c 83       	std	Y+4, r25	; 0x04
    15b2:	8b 83       	std	Y+3, r24	; 0x03
    15b4:	8b 81       	ldd	r24, Y+3	; 0x03
    15b6:	9c 81       	ldd	r25, Y+4	; 0x04
    15b8:	01 97       	sbiw	r24, 0x01	; 1
    15ba:	f1 f7       	brne	.-4      	; 0x15b8 <checkPass+0x224>
    15bc:	9c 83       	std	Y+4, r25	; 0x04
    15be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15c0:	8d 81       	ldd	r24, Y+5	; 0x05
    15c2:	9e 81       	ldd	r25, Y+6	; 0x06
    15c4:	01 97       	sbiw	r24, 0x01	; 1
    15c6:	9e 83       	std	Y+6, r25	; 0x06
    15c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15ca:	8d 81       	ldd	r24, Y+5	; 0x05
    15cc:	9e 81       	ldd	r25, Y+6	; 0x06
    15ce:	00 97       	sbiw	r24, 0x00	; 0
    15d0:	69 f7       	brne	.-38     	; 0x15ac <checkPass+0x218>
    15d2:	14 c0       	rjmp	.+40     	; 0x15fc <checkPass+0x268>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15d4:	6f 81       	ldd	r22, Y+7	; 0x07
    15d6:	78 85       	ldd	r23, Y+8	; 0x08
    15d8:	89 85       	ldd	r24, Y+9	; 0x09
    15da:	9a 85       	ldd	r25, Y+10	; 0x0a
    15dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15e0:	dc 01       	movw	r26, r24
    15e2:	cb 01       	movw	r24, r22
    15e4:	9e 83       	std	Y+6, r25	; 0x06
    15e6:	8d 83       	std	Y+5, r24	; 0x05
    15e8:	8d 81       	ldd	r24, Y+5	; 0x05
    15ea:	9e 81       	ldd	r25, Y+6	; 0x06
    15ec:	9a 83       	std	Y+2, r25	; 0x02
    15ee:	89 83       	std	Y+1, r24	; 0x01
    15f0:	89 81       	ldd	r24, Y+1	; 0x01
    15f2:	9a 81       	ldd	r25, Y+2	; 0x02
    15f4:	01 97       	sbiw	r24, 0x01	; 1
    15f6:	f1 f7       	brne	.-4      	; 0x15f4 <checkPass+0x260>
    15f8:	9a 83       	std	Y+2, r25	; 0x02
    15fa:	89 83       	std	Y+1, r24	; 0x01

    // Wait for the user to press the "Enter" button on the keypad
    while (KEYPAD_getPressedKey() != ENTER_BUTTON);

    // Send the entered password via UART
    for (i = 0; i < PASS_LENGTH; i++) {
    15fc:	80 91 3a 01 	lds	r24, 0x013A
    1600:	8f 5f       	subi	r24, 0xFF	; 255
    1602:	80 93 3a 01 	sts	0x013A, r24
    1606:	80 91 3a 01 	lds	r24, 0x013A
    160a:	85 30       	cpi	r24, 0x05	; 5
    160c:	08 f4       	brcc	.+2      	; 0x1610 <checkPass+0x27c>
    160e:	78 cf       	rjmp	.-272    	; 0x1500 <checkPass+0x16c>
        UART_sendByte(Password[i]);
        _delay_ms(UART_DELAY);
    }
}
    1610:	a1 96       	adiw	r28, 0x21	; 33
    1612:	0f b6       	in	r0, 0x3f	; 63
    1614:	f8 94       	cli
    1616:	de bf       	out	0x3e, r29	; 62
    1618:	0f be       	out	0x3f, r0	; 63
    161a:	cd bf       	out	0x3d, r28	; 61
    161c:	cf 91       	pop	r28
    161e:	df 91       	pop	r29
    1620:	08 95       	ret

00001622 <changePass>:
/*
 * Description:
 * Function responsible for managing the process of changing the password.
 * It checks the entered password, handles errors, and initiates the creation of a new password.
 */
void changePass(void) {
    1622:	df 93       	push	r29
    1624:	cf 93       	push	r28
    1626:	cd b7       	in	r28, 0x3d	; 61
    1628:	de b7       	in	r29, 0x3e	; 62
    162a:	6c 97       	sbiw	r28, 0x1c	; 28
    162c:	0f b6       	in	r0, 0x3f	; 63
    162e:	f8 94       	cli
    1630:	de bf       	out	0x3e, r29	; 62
    1632:	0f be       	out	0x3f, r0	; 63
    1634:	cd bf       	out	0x3d, r28	; 61
    checkPass(); // Check the entered password and send it via UART
    1636:	0e 94 ca 09 	call	0x1394	; 0x1394 <checkPass>
    flag = UART_recieveByte(); // Receive a flag via UART
    163a:	0e 94 99 19 	call	0x3332	; 0x3332 <UART_recieveByte>
    163e:	80 93 34 01 	sts	0x0134, r24

    LCD_clearScreen();
    1642:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <LCD_clearScreen>

    // Check the flag to determine the next actions
    if (flag == 1) {
    1646:	80 91 34 01 	lds	r24, 0x0134
    164a:	81 30       	cpi	r24, 0x01	; 1
    164c:	09 f0       	breq	.+2      	; 0x1650 <changePass+0x2e>
    164e:	79 c0       	rjmp	.+242    	; 0x1742 <changePass+0x120>
        LCD_displayString("Correct pass");
    1650:	8d e9       	ldi	r24, 0x9D	; 157
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <LCD_displayString>
    1658:	80 e0       	ldi	r24, 0x00	; 0
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	a6 e1       	ldi	r26, 0x16	; 22
    165e:	b4 e4       	ldi	r27, 0x44	; 68
    1660:	89 8f       	std	Y+25, r24	; 0x19
    1662:	9a 8f       	std	Y+26, r25	; 0x1a
    1664:	ab 8f       	std	Y+27, r26	; 0x1b
    1666:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1668:	69 8d       	ldd	r22, Y+25	; 0x19
    166a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    166c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    166e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1670:	20 e0       	ldi	r18, 0x00	; 0
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	4a ef       	ldi	r20, 0xFA	; 250
    1676:	54 e4       	ldi	r21, 0x44	; 68
    1678:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    167c:	dc 01       	movw	r26, r24
    167e:	cb 01       	movw	r24, r22
    1680:	8d 8b       	std	Y+21, r24	; 0x15
    1682:	9e 8b       	std	Y+22, r25	; 0x16
    1684:	af 8b       	std	Y+23, r26	; 0x17
    1686:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1688:	6d 89       	ldd	r22, Y+21	; 0x15
    168a:	7e 89       	ldd	r23, Y+22	; 0x16
    168c:	8f 89       	ldd	r24, Y+23	; 0x17
    168e:	98 8d       	ldd	r25, Y+24	; 0x18
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	40 e8       	ldi	r20, 0x80	; 128
    1696:	5f e3       	ldi	r21, 0x3F	; 63
    1698:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    169c:	88 23       	and	r24, r24
    169e:	2c f4       	brge	.+10     	; 0x16aa <changePass+0x88>
		__ticks = 1;
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	9c 8b       	std	Y+20, r25	; 0x14
    16a6:	8b 8b       	std	Y+19, r24	; 0x13
    16a8:	3f c0       	rjmp	.+126    	; 0x1728 <changePass+0x106>
	else if (__tmp > 65535)
    16aa:	6d 89       	ldd	r22, Y+21	; 0x15
    16ac:	7e 89       	ldd	r23, Y+22	; 0x16
    16ae:	8f 89       	ldd	r24, Y+23	; 0x17
    16b0:	98 8d       	ldd	r25, Y+24	; 0x18
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	3f ef       	ldi	r19, 0xFF	; 255
    16b6:	4f e7       	ldi	r20, 0x7F	; 127
    16b8:	57 e4       	ldi	r21, 0x47	; 71
    16ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16be:	18 16       	cp	r1, r24
    16c0:	4c f5       	brge	.+82     	; 0x1714 <changePass+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16c2:	69 8d       	ldd	r22, Y+25	; 0x19
    16c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16ca:	20 e0       	ldi	r18, 0x00	; 0
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	40 e2       	ldi	r20, 0x20	; 32
    16d0:	51 e4       	ldi	r21, 0x41	; 65
    16d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16d6:	dc 01       	movw	r26, r24
    16d8:	cb 01       	movw	r24, r22
    16da:	bc 01       	movw	r22, r24
    16dc:	cd 01       	movw	r24, r26
    16de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16e2:	dc 01       	movw	r26, r24
    16e4:	cb 01       	movw	r24, r22
    16e6:	9c 8b       	std	Y+20, r25	; 0x14
    16e8:	8b 8b       	std	Y+19, r24	; 0x13
    16ea:	0f c0       	rjmp	.+30     	; 0x170a <changePass+0xe8>
    16ec:	88 ec       	ldi	r24, 0xC8	; 200
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	9a 8b       	std	Y+18, r25	; 0x12
    16f2:	89 8b       	std	Y+17, r24	; 0x11
    16f4:	89 89       	ldd	r24, Y+17	; 0x11
    16f6:	9a 89       	ldd	r25, Y+18	; 0x12
    16f8:	01 97       	sbiw	r24, 0x01	; 1
    16fa:	f1 f7       	brne	.-4      	; 0x16f8 <changePass+0xd6>
    16fc:	9a 8b       	std	Y+18, r25	; 0x12
    16fe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1700:	8b 89       	ldd	r24, Y+19	; 0x13
    1702:	9c 89       	ldd	r25, Y+20	; 0x14
    1704:	01 97       	sbiw	r24, 0x01	; 1
    1706:	9c 8b       	std	Y+20, r25	; 0x14
    1708:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    170a:	8b 89       	ldd	r24, Y+19	; 0x13
    170c:	9c 89       	ldd	r25, Y+20	; 0x14
    170e:	00 97       	sbiw	r24, 0x00	; 0
    1710:	69 f7       	brne	.-38     	; 0x16ec <changePass+0xca>
    1712:	14 c0       	rjmp	.+40     	; 0x173c <changePass+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1714:	6d 89       	ldd	r22, Y+21	; 0x15
    1716:	7e 89       	ldd	r23, Y+22	; 0x16
    1718:	8f 89       	ldd	r24, Y+23	; 0x17
    171a:	98 8d       	ldd	r25, Y+24	; 0x18
    171c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1720:	dc 01       	movw	r26, r24
    1722:	cb 01       	movw	r24, r22
    1724:	9c 8b       	std	Y+20, r25	; 0x14
    1726:	8b 8b       	std	Y+19, r24	; 0x13
    1728:	8b 89       	ldd	r24, Y+19	; 0x13
    172a:	9c 89       	ldd	r25, Y+20	; 0x14
    172c:	98 8b       	std	Y+16, r25	; 0x10
    172e:	8f 87       	std	Y+15, r24	; 0x0f
    1730:	8f 85       	ldd	r24, Y+15	; 0x0f
    1732:	98 89       	ldd	r25, Y+16	; 0x10
    1734:	01 97       	sbiw	r24, 0x01	; 1
    1736:	f1 f7       	brne	.-4      	; 0x1734 <changePass+0x112>
    1738:	98 8b       	std	Y+16, r25	; 0x10
    173a:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(NORMAL_DELAY);
        createNewPass(); // Proceed to create a new password
    173c:	0e 94 01 06 	call	0xc02	; 0xc02 <createNewPass>
    1740:	94 c0       	rjmp	.+296    	; 0x186a <changePass+0x248>
    } else if ((flag == 0 )&&( errorTrial < MAX_ERROR_TRIALS)) {
    1742:	80 91 34 01 	lds	r24, 0x0134
    1746:	88 23       	and	r24, r24
    1748:	09 f0       	breq	.+2      	; 0x174c <changePass+0x12a>
    174a:	83 c0       	rjmp	.+262    	; 0x1852 <changePass+0x230>
    174c:	80 91 2a 01 	lds	r24, 0x012A
    1750:	82 30       	cpi	r24, 0x02	; 2
    1752:	08 f0       	brcs	.+2      	; 0x1756 <changePass+0x134>
    1754:	7e c0       	rjmp	.+252    	; 0x1852 <changePass+0x230>
        errorTrial++;
    1756:	80 91 2a 01 	lds	r24, 0x012A
    175a:	8f 5f       	subi	r24, 0xFF	; 255
    175c:	80 93 2a 01 	sts	0x012A, r24
        LCD_displayString("Not Correct!");
    1760:	8a ea       	ldi	r24, 0xAA	; 170
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <LCD_displayString>
    1768:	80 e0       	ldi	r24, 0x00	; 0
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	a6 e1       	ldi	r26, 0x16	; 22
    176e:	b4 e4       	ldi	r27, 0x44	; 68
    1770:	8b 87       	std	Y+11, r24	; 0x0b
    1772:	9c 87       	std	Y+12, r25	; 0x0c
    1774:	ad 87       	std	Y+13, r26	; 0x0d
    1776:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1778:	6b 85       	ldd	r22, Y+11	; 0x0b
    177a:	7c 85       	ldd	r23, Y+12	; 0x0c
    177c:	8d 85       	ldd	r24, Y+13	; 0x0d
    177e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1780:	20 e0       	ldi	r18, 0x00	; 0
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	4a ef       	ldi	r20, 0xFA	; 250
    1786:	54 e4       	ldi	r21, 0x44	; 68
    1788:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    178c:	dc 01       	movw	r26, r24
    178e:	cb 01       	movw	r24, r22
    1790:	8f 83       	std	Y+7, r24	; 0x07
    1792:	98 87       	std	Y+8, r25	; 0x08
    1794:	a9 87       	std	Y+9, r26	; 0x09
    1796:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1798:	6f 81       	ldd	r22, Y+7	; 0x07
    179a:	78 85       	ldd	r23, Y+8	; 0x08
    179c:	89 85       	ldd	r24, Y+9	; 0x09
    179e:	9a 85       	ldd	r25, Y+10	; 0x0a
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	40 e8       	ldi	r20, 0x80	; 128
    17a6:	5f e3       	ldi	r21, 0x3F	; 63
    17a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17ac:	88 23       	and	r24, r24
    17ae:	2c f4       	brge	.+10     	; 0x17ba <changePass+0x198>
		__ticks = 1;
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	9e 83       	std	Y+6, r25	; 0x06
    17b6:	8d 83       	std	Y+5, r24	; 0x05
    17b8:	3f c0       	rjmp	.+126    	; 0x1838 <changePass+0x216>
	else if (__tmp > 65535)
    17ba:	6f 81       	ldd	r22, Y+7	; 0x07
    17bc:	78 85       	ldd	r23, Y+8	; 0x08
    17be:	89 85       	ldd	r24, Y+9	; 0x09
    17c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c2:	20 e0       	ldi	r18, 0x00	; 0
    17c4:	3f ef       	ldi	r19, 0xFF	; 255
    17c6:	4f e7       	ldi	r20, 0x7F	; 127
    17c8:	57 e4       	ldi	r21, 0x47	; 71
    17ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17ce:	18 16       	cp	r1, r24
    17d0:	4c f5       	brge	.+82     	; 0x1824 <changePass+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    17d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    17d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    17d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	40 e2       	ldi	r20, 0x20	; 32
    17e0:	51 e4       	ldi	r21, 0x41	; 65
    17e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e6:	dc 01       	movw	r26, r24
    17e8:	cb 01       	movw	r24, r22
    17ea:	bc 01       	movw	r22, r24
    17ec:	cd 01       	movw	r24, r26
    17ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f2:	dc 01       	movw	r26, r24
    17f4:	cb 01       	movw	r24, r22
    17f6:	9e 83       	std	Y+6, r25	; 0x06
    17f8:	8d 83       	std	Y+5, r24	; 0x05
    17fa:	0f c0       	rjmp	.+30     	; 0x181a <changePass+0x1f8>
    17fc:	88 ec       	ldi	r24, 0xC8	; 200
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	9c 83       	std	Y+4, r25	; 0x04
    1802:	8b 83       	std	Y+3, r24	; 0x03
    1804:	8b 81       	ldd	r24, Y+3	; 0x03
    1806:	9c 81       	ldd	r25, Y+4	; 0x04
    1808:	01 97       	sbiw	r24, 0x01	; 1
    180a:	f1 f7       	brne	.-4      	; 0x1808 <changePass+0x1e6>
    180c:	9c 83       	std	Y+4, r25	; 0x04
    180e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1810:	8d 81       	ldd	r24, Y+5	; 0x05
    1812:	9e 81       	ldd	r25, Y+6	; 0x06
    1814:	01 97       	sbiw	r24, 0x01	; 1
    1816:	9e 83       	std	Y+6, r25	; 0x06
    1818:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    181a:	8d 81       	ldd	r24, Y+5	; 0x05
    181c:	9e 81       	ldd	r25, Y+6	; 0x06
    181e:	00 97       	sbiw	r24, 0x00	; 0
    1820:	69 f7       	brne	.-38     	; 0x17fc <changePass+0x1da>
    1822:	14 c0       	rjmp	.+40     	; 0x184c <changePass+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1824:	6f 81       	ldd	r22, Y+7	; 0x07
    1826:	78 85       	ldd	r23, Y+8	; 0x08
    1828:	89 85       	ldd	r24, Y+9	; 0x09
    182a:	9a 85       	ldd	r25, Y+10	; 0x0a
    182c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1830:	dc 01       	movw	r26, r24
    1832:	cb 01       	movw	r24, r22
    1834:	9e 83       	std	Y+6, r25	; 0x06
    1836:	8d 83       	std	Y+5, r24	; 0x05
    1838:	8d 81       	ldd	r24, Y+5	; 0x05
    183a:	9e 81       	ldd	r25, Y+6	; 0x06
    183c:	9a 83       	std	Y+2, r25	; 0x02
    183e:	89 83       	std	Y+1, r24	; 0x01
    1840:	89 81       	ldd	r24, Y+1	; 0x01
    1842:	9a 81       	ldd	r25, Y+2	; 0x02
    1844:	01 97       	sbiw	r24, 0x01	; 1
    1846:	f1 f7       	brne	.-4      	; 0x1844 <changePass+0x222>
    1848:	9a 83       	std	Y+2, r25	; 0x02
    184a:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(NORMAL_DELAY);
        changePass(); // Retry the password change with limited error trials
    184c:	0e 94 11 0b 	call	0x1622	; 0x1622 <changePass>
    1850:	0c c0       	rjmp	.+24     	; 0x186a <changePass+0x248>
    } else if((errorTrial>= MAX_ERROR_TRIALS)&&(flag==0)) {
    1852:	80 91 2a 01 	lds	r24, 0x012A
    1856:	82 30       	cpi	r24, 0x02	; 2
    1858:	40 f0       	brcs	.+16     	; 0x186a <changePass+0x248>
    185a:	80 91 34 01 	lds	r24, 0x0134
    185e:	88 23       	and	r24, r24
    1860:	21 f4       	brne	.+8      	; 0x186a <changePass+0x248>
        turnOnBuzzer(); // Sound the buzzer in case of too many errors
    1862:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <turnOnBuzzer>
        errorTrial = 0; // Reset the error trial count
    1866:	10 92 2a 01 	sts	0x012A, r1
    }
}
    186a:	6c 96       	adiw	r28, 0x1c	; 28
    186c:	0f b6       	in	r0, 0x3f	; 63
    186e:	f8 94       	cli
    1870:	de bf       	out	0x3e, r29	; 62
    1872:	0f be       	out	0x3f, r0	; 63
    1874:	cd bf       	out	0x3d, r28	; 61
    1876:	cf 91       	pop	r28
    1878:	df 91       	pop	r29
    187a:	08 95       	ret

0000187c <showOptions>:
 * Description:
 * Function responsible for displaying options to the user and handling their choice.
 * 1 - Open the door.
 * 2 - Change the password.
 */
void showOptions(void) {
    187c:	df 93       	push	r29
    187e:	cf 93       	push	r28
    1880:	cd b7       	in	r28, 0x3d	; 61
    1882:	de b7       	in	r29, 0x3e	; 62
    1884:	2e 97       	sbiw	r28, 0x0e	; 14
    1886:	0f b6       	in	r0, 0x3f	; 63
    1888:	f8 94       	cli
    188a:	de bf       	out	0x3e, r29	; 62
    188c:	0f be       	out	0x3f, r0	; 63
    188e:	cd bf       	out	0x3d, r28	; 61
    LCD_clearScreen();
    1890:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <LCD_clearScreen>
    LCD_moveCursor(0, 0);
    1894:	80 e0       	ldi	r24, 0x00	; 0
    1896:	60 e0       	ldi	r22, 0x00	; 0
    1898:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <LCD_moveCursor>
    LCD_displayString("+ : Open Door");
    189c:	87 eb       	ldi	r24, 0xB7	; 183
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <LCD_displayString>
    LCD_moveCursor(1, 0);
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	60 e0       	ldi	r22, 0x00	; 0
    18a8:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <LCD_moveCursor>
    LCD_displayString("- : Change Pass");
    18ac:	85 ec       	ldi	r24, 0xC5	; 197
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <LCD_displayString>
    key = KEYPAD_getPressedKey();
    18b4:	0e 94 45 11 	call	0x228a	; 0x228a <KEYPAD_getPressedKey>
    18b8:	80 93 3b 01 	sts	0x013B, r24

    // Check if the user's choice is valid (+ or -)
    if (key == '-') {
    18bc:	80 91 3b 01 	lds	r24, 0x013B
    18c0:	8d 32       	cpi	r24, 0x2D	; 45
    18c2:	39 f4       	brne	.+14     	; 0x18d2 <showOptions+0x56>
        UART_sendByte(key); // Send the user's choice via UART
    18c4:	80 91 3b 01 	lds	r24, 0x013B
    18c8:	0e 94 82 19 	call	0x3304	; 0x3304 <UART_sendByte>
        changePass(); // Initiate the password change process
    18cc:	0e 94 11 0b 	call	0x1622	; 0x1622 <changePass>
    18d0:	85 c0       	rjmp	.+266    	; 0x19dc <showOptions+0x160>
        }
    else if (key == '+') {
    18d2:	80 91 3b 01 	lds	r24, 0x013B
    18d6:	8b 32       	cpi	r24, 0x2B	; 43
    18d8:	39 f4       	brne	.+14     	; 0x18e8 <showOptions+0x6c>
    	UART_sendByte(key); // Send the user's choice via UART
    18da:	80 91 3b 01 	lds	r24, 0x013B
    18de:	0e 94 82 19 	call	0x3304	; 0x3304 <UART_sendByte>
        openDoor(); // Initiate the process to open the door
    18e2:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <openDoor>
    18e6:	7a c0       	rjmp	.+244    	; 0x19dc <showOptions+0x160>
        }
    else {
        LCD_clearScreen();
    18e8:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <LCD_clearScreen>
        LCD_displayString("Enter Valid Key");
    18ec:	85 ed       	ldi	r24, 0xD5	; 213
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <LCD_displayString>
    18f4:	80 e0       	ldi	r24, 0x00	; 0
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	a6 e1       	ldi	r26, 0x16	; 22
    18fa:	b4 e4       	ldi	r27, 0x44	; 68
    18fc:	8b 87       	std	Y+11, r24	; 0x0b
    18fe:	9c 87       	std	Y+12, r25	; 0x0c
    1900:	ad 87       	std	Y+13, r26	; 0x0d
    1902:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1904:	6b 85       	ldd	r22, Y+11	; 0x0b
    1906:	7c 85       	ldd	r23, Y+12	; 0x0c
    1908:	8d 85       	ldd	r24, Y+13	; 0x0d
    190a:	9e 85       	ldd	r25, Y+14	; 0x0e
    190c:	20 e0       	ldi	r18, 0x00	; 0
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	4a ef       	ldi	r20, 0xFA	; 250
    1912:	54 e4       	ldi	r21, 0x44	; 68
    1914:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1918:	dc 01       	movw	r26, r24
    191a:	cb 01       	movw	r24, r22
    191c:	8f 83       	std	Y+7, r24	; 0x07
    191e:	98 87       	std	Y+8, r25	; 0x08
    1920:	a9 87       	std	Y+9, r26	; 0x09
    1922:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1924:	6f 81       	ldd	r22, Y+7	; 0x07
    1926:	78 85       	ldd	r23, Y+8	; 0x08
    1928:	89 85       	ldd	r24, Y+9	; 0x09
    192a:	9a 85       	ldd	r25, Y+10	; 0x0a
    192c:	20 e0       	ldi	r18, 0x00	; 0
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	40 e8       	ldi	r20, 0x80	; 128
    1932:	5f e3       	ldi	r21, 0x3F	; 63
    1934:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1938:	88 23       	and	r24, r24
    193a:	2c f4       	brge	.+10     	; 0x1946 <showOptions+0xca>
		__ticks = 1;
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	9e 83       	std	Y+6, r25	; 0x06
    1942:	8d 83       	std	Y+5, r24	; 0x05
    1944:	3f c0       	rjmp	.+126    	; 0x19c4 <showOptions+0x148>
	else if (__tmp > 65535)
    1946:	6f 81       	ldd	r22, Y+7	; 0x07
    1948:	78 85       	ldd	r23, Y+8	; 0x08
    194a:	89 85       	ldd	r24, Y+9	; 0x09
    194c:	9a 85       	ldd	r25, Y+10	; 0x0a
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	3f ef       	ldi	r19, 0xFF	; 255
    1952:	4f e7       	ldi	r20, 0x7F	; 127
    1954:	57 e4       	ldi	r21, 0x47	; 71
    1956:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    195a:	18 16       	cp	r1, r24
    195c:	4c f5       	brge	.+82     	; 0x19b0 <showOptions+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    195e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1960:	7c 85       	ldd	r23, Y+12	; 0x0c
    1962:	8d 85       	ldd	r24, Y+13	; 0x0d
    1964:	9e 85       	ldd	r25, Y+14	; 0x0e
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	40 e2       	ldi	r20, 0x20	; 32
    196c:	51 e4       	ldi	r21, 0x41	; 65
    196e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1972:	dc 01       	movw	r26, r24
    1974:	cb 01       	movw	r24, r22
    1976:	bc 01       	movw	r22, r24
    1978:	cd 01       	movw	r24, r26
    197a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    197e:	dc 01       	movw	r26, r24
    1980:	cb 01       	movw	r24, r22
    1982:	9e 83       	std	Y+6, r25	; 0x06
    1984:	8d 83       	std	Y+5, r24	; 0x05
    1986:	0f c0       	rjmp	.+30     	; 0x19a6 <showOptions+0x12a>
    1988:	88 ec       	ldi	r24, 0xC8	; 200
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	9c 83       	std	Y+4, r25	; 0x04
    198e:	8b 83       	std	Y+3, r24	; 0x03
    1990:	8b 81       	ldd	r24, Y+3	; 0x03
    1992:	9c 81       	ldd	r25, Y+4	; 0x04
    1994:	01 97       	sbiw	r24, 0x01	; 1
    1996:	f1 f7       	brne	.-4      	; 0x1994 <showOptions+0x118>
    1998:	9c 83       	std	Y+4, r25	; 0x04
    199a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    199c:	8d 81       	ldd	r24, Y+5	; 0x05
    199e:	9e 81       	ldd	r25, Y+6	; 0x06
    19a0:	01 97       	sbiw	r24, 0x01	; 1
    19a2:	9e 83       	std	Y+6, r25	; 0x06
    19a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a6:	8d 81       	ldd	r24, Y+5	; 0x05
    19a8:	9e 81       	ldd	r25, Y+6	; 0x06
    19aa:	00 97       	sbiw	r24, 0x00	; 0
    19ac:	69 f7       	brne	.-38     	; 0x1988 <showOptions+0x10c>
    19ae:	14 c0       	rjmp	.+40     	; 0x19d8 <showOptions+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b0:	6f 81       	ldd	r22, Y+7	; 0x07
    19b2:	78 85       	ldd	r23, Y+8	; 0x08
    19b4:	89 85       	ldd	r24, Y+9	; 0x09
    19b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19bc:	dc 01       	movw	r26, r24
    19be:	cb 01       	movw	r24, r22
    19c0:	9e 83       	std	Y+6, r25	; 0x06
    19c2:	8d 83       	std	Y+5, r24	; 0x05
    19c4:	8d 81       	ldd	r24, Y+5	; 0x05
    19c6:	9e 81       	ldd	r25, Y+6	; 0x06
    19c8:	9a 83       	std	Y+2, r25	; 0x02
    19ca:	89 83       	std	Y+1, r24	; 0x01
    19cc:	89 81       	ldd	r24, Y+1	; 0x01
    19ce:	9a 81       	ldd	r25, Y+2	; 0x02
    19d0:	01 97       	sbiw	r24, 0x01	; 1
    19d2:	f1 f7       	brne	.-4      	; 0x19d0 <showOptions+0x154>
    19d4:	9a 83       	std	Y+2, r25	; 0x02
    19d6:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(NORMAL_DELAY);
        showOptions(); // Retry the option selection if an invalid key is pressed
    19d8:	0e 94 3e 0c 	call	0x187c	; 0x187c <showOptions>
    }
}
    19dc:	2e 96       	adiw	r28, 0x0e	; 14
    19de:	0f b6       	in	r0, 0x3f	; 63
    19e0:	f8 94       	cli
    19e2:	de bf       	out	0x3e, r29	; 62
    19e4:	0f be       	out	0x3f, r0	; 63
    19e6:	cd bf       	out	0x3d, r28	; 61
    19e8:	cf 91       	pop	r28
    19ea:	df 91       	pop	r29
    19ec:	08 95       	ret

000019ee <openDoor>:
/*
 * Description:
 * Function responsible for managing the opening of the door.
 * It checks the entered password, processes the result, and controls the door.
 */
void openDoor(void) {
    19ee:	df 93       	push	r29
    19f0:	cf 93       	push	r28
    19f2:	cd b7       	in	r28, 0x3d	; 61
    19f4:	de b7       	in	r29, 0x3e	; 62
    19f6:	2e 97       	sbiw	r28, 0x0e	; 14
    19f8:	0f b6       	in	r0, 0x3f	; 63
    19fa:	f8 94       	cli
    19fc:	de bf       	out	0x3e, r29	; 62
    19fe:	0f be       	out	0x3f, r0	; 63
    1a00:	cd bf       	out	0x3d, r28	; 61
    checkPass(); // Check the entered password
    1a02:	0e 94 ca 09 	call	0x1394	; 0x1394 <checkPass>
    flag = UART_recieveByte(); // Receive a flag via UART
    1a06:	0e 94 99 19 	call	0x3332	; 0x3332 <UART_recieveByte>
    1a0a:	80 93 34 01 	sts	0x0134, r24

    LCD_clearScreen();
    1a0e:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <LCD_clearScreen>

    // Check the flag to determine the next actions
    if (flag == 1 && errorTrial == 0) {
    1a12:	80 91 34 01 	lds	r24, 0x0134
    1a16:	81 30       	cpi	r24, 0x01	; 1
    1a18:	39 f4       	brne	.+14     	; 0x1a28 <openDoor+0x3a>
    1a1a:	80 91 2a 01 	lds	r24, 0x012A
    1a1e:	88 23       	and	r24, r24
    1a20:	19 f4       	brne	.+6      	; 0x1a28 <openDoor+0x3a>
        turnOnMotor(); // Open the door if the entered password is correct
    1a22:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <turnOnMotor>
    1a26:	90 c0       	rjmp	.+288    	; 0x1b48 <openDoor+0x15a>
    } else if (flag == 0 && errorTrial < MAX_ERROR_TRIALS) {
    1a28:	80 91 34 01 	lds	r24, 0x0134
    1a2c:	88 23       	and	r24, r24
    1a2e:	09 f0       	breq	.+2      	; 0x1a32 <openDoor+0x44>
    1a30:	83 c0       	rjmp	.+262    	; 0x1b38 <openDoor+0x14a>
    1a32:	80 91 2a 01 	lds	r24, 0x012A
    1a36:	82 30       	cpi	r24, 0x02	; 2
    1a38:	08 f0       	brcs	.+2      	; 0x1a3c <openDoor+0x4e>
    1a3a:	7e c0       	rjmp	.+252    	; 0x1b38 <openDoor+0x14a>
        errorTrial++;
    1a3c:	80 91 2a 01 	lds	r24, 0x012A
    1a40:	8f 5f       	subi	r24, 0xFF	; 255
    1a42:	80 93 2a 01 	sts	0x012A, r24
        LCD_displayString("Not Correct!");
    1a46:	8a ea       	ldi	r24, 0xAA	; 170
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <LCD_displayString>
    1a4e:	80 e0       	ldi	r24, 0x00	; 0
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	a6 e1       	ldi	r26, 0x16	; 22
    1a54:	b4 e4       	ldi	r27, 0x44	; 68
    1a56:	8b 87       	std	Y+11, r24	; 0x0b
    1a58:	9c 87       	std	Y+12, r25	; 0x0c
    1a5a:	ad 87       	std	Y+13, r26	; 0x0d
    1a5c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a60:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a62:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a64:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	4a ef       	ldi	r20, 0xFA	; 250
    1a6c:	54 e4       	ldi	r21, 0x44	; 68
    1a6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a72:	dc 01       	movw	r26, r24
    1a74:	cb 01       	movw	r24, r22
    1a76:	8f 83       	std	Y+7, r24	; 0x07
    1a78:	98 87       	std	Y+8, r25	; 0x08
    1a7a:	a9 87       	std	Y+9, r26	; 0x09
    1a7c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a80:	78 85       	ldd	r23, Y+8	; 0x08
    1a82:	89 85       	ldd	r24, Y+9	; 0x09
    1a84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	40 e8       	ldi	r20, 0x80	; 128
    1a8c:	5f e3       	ldi	r21, 0x3F	; 63
    1a8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a92:	88 23       	and	r24, r24
    1a94:	2c f4       	brge	.+10     	; 0x1aa0 <openDoor+0xb2>
		__ticks = 1;
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	9e 83       	std	Y+6, r25	; 0x06
    1a9c:	8d 83       	std	Y+5, r24	; 0x05
    1a9e:	3f c0       	rjmp	.+126    	; 0x1b1e <openDoor+0x130>
	else if (__tmp > 65535)
    1aa0:	6f 81       	ldd	r22, Y+7	; 0x07
    1aa2:	78 85       	ldd	r23, Y+8	; 0x08
    1aa4:	89 85       	ldd	r24, Y+9	; 0x09
    1aa6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	3f ef       	ldi	r19, 0xFF	; 255
    1aac:	4f e7       	ldi	r20, 0x7F	; 127
    1aae:	57 e4       	ldi	r21, 0x47	; 71
    1ab0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ab4:	18 16       	cp	r1, r24
    1ab6:	4c f5       	brge	.+82     	; 0x1b0a <openDoor+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ab8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aba:	7c 85       	ldd	r23, Y+12	; 0x0c
    1abc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1abe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	40 e2       	ldi	r20, 0x20	; 32
    1ac6:	51 e4       	ldi	r21, 0x41	; 65
    1ac8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1acc:	dc 01       	movw	r26, r24
    1ace:	cb 01       	movw	r24, r22
    1ad0:	bc 01       	movw	r22, r24
    1ad2:	cd 01       	movw	r24, r26
    1ad4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad8:	dc 01       	movw	r26, r24
    1ada:	cb 01       	movw	r24, r22
    1adc:	9e 83       	std	Y+6, r25	; 0x06
    1ade:	8d 83       	std	Y+5, r24	; 0x05
    1ae0:	0f c0       	rjmp	.+30     	; 0x1b00 <openDoor+0x112>
    1ae2:	88 ec       	ldi	r24, 0xC8	; 200
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	9c 83       	std	Y+4, r25	; 0x04
    1ae8:	8b 83       	std	Y+3, r24	; 0x03
    1aea:	8b 81       	ldd	r24, Y+3	; 0x03
    1aec:	9c 81       	ldd	r25, Y+4	; 0x04
    1aee:	01 97       	sbiw	r24, 0x01	; 1
    1af0:	f1 f7       	brne	.-4      	; 0x1aee <openDoor+0x100>
    1af2:	9c 83       	std	Y+4, r25	; 0x04
    1af4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1af6:	8d 81       	ldd	r24, Y+5	; 0x05
    1af8:	9e 81       	ldd	r25, Y+6	; 0x06
    1afa:	01 97       	sbiw	r24, 0x01	; 1
    1afc:	9e 83       	std	Y+6, r25	; 0x06
    1afe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b00:	8d 81       	ldd	r24, Y+5	; 0x05
    1b02:	9e 81       	ldd	r25, Y+6	; 0x06
    1b04:	00 97       	sbiw	r24, 0x00	; 0
    1b06:	69 f7       	brne	.-38     	; 0x1ae2 <openDoor+0xf4>
    1b08:	14 c0       	rjmp	.+40     	; 0x1b32 <openDoor+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b0c:	78 85       	ldd	r23, Y+8	; 0x08
    1b0e:	89 85       	ldd	r24, Y+9	; 0x09
    1b10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b16:	dc 01       	movw	r26, r24
    1b18:	cb 01       	movw	r24, r22
    1b1a:	9e 83       	std	Y+6, r25	; 0x06
    1b1c:	8d 83       	std	Y+5, r24	; 0x05
    1b1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b20:	9e 81       	ldd	r25, Y+6	; 0x06
    1b22:	9a 83       	std	Y+2, r25	; 0x02
    1b24:	89 83       	std	Y+1, r24	; 0x01
    1b26:	89 81       	ldd	r24, Y+1	; 0x01
    1b28:	9a 81       	ldd	r25, Y+2	; 0x02
    1b2a:	01 97       	sbiw	r24, 0x01	; 1
    1b2c:	f1 f7       	brne	.-4      	; 0x1b2a <openDoor+0x13c>
    1b2e:	9a 83       	std	Y+2, r25	; 0x02
    1b30:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(NORMAL_DELAY);
        openDoor(); // Retry the door opening with limited error trials
    1b32:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <openDoor>
    1b36:	08 c0       	rjmp	.+16     	; 0x1b48 <openDoor+0x15a>
    } else if(errorTrial >= MAX_ERROR_TRIALS){
    1b38:	80 91 2a 01 	lds	r24, 0x012A
    1b3c:	82 30       	cpi	r24, 0x02	; 2
    1b3e:	20 f0       	brcs	.+8      	; 0x1b48 <openDoor+0x15a>
        turnOnBuzzer(); // Sound the buzzer in case of too many errors
    1b40:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <turnOnBuzzer>
        errorTrial = 0; // Reset the error trial count
    1b44:	10 92 2a 01 	sts	0x012A, r1
    }
}
    1b48:	2e 96       	adiw	r28, 0x0e	; 14
    1b4a:	0f b6       	in	r0, 0x3f	; 63
    1b4c:	f8 94       	cli
    1b4e:	de bf       	out	0x3e, r29	; 62
    1b50:	0f be       	out	0x3f, r0	; 63
    1b52:	cd bf       	out	0x3d, r28	; 61
    1b54:	cf 91       	pop	r28
    1b56:	df 91       	pop	r29
    1b58:	08 95       	ret

00001b5a <turnOnBuzzer>:
/*
 * Description:
 * Function responsible for turning on the buzzer in case of errors.
 * It waits for a specified duration to indicate an error state.
 */
void turnOnBuzzer(void) {
    1b5a:	df 93       	push	r29
    1b5c:	cf 93       	push	r28
    1b5e:	cd b7       	in	r28, 0x3d	; 61
    1b60:	de b7       	in	r29, 0x3e	; 62
    TIMER1_g_ticks = 0; // Reset the timer ticks to 0
    1b62:	10 92 2c 01 	sts	0x012C, r1
    1b66:	10 92 2b 01 	sts	0x012B, r1
    LCD_clearScreen();
    1b6a:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <LCD_clearScreen>
    LCD_displayString("Error !!!");
    1b6e:	85 ee       	ldi	r24, 0xE5	; 229
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <LCD_displayString>

    // Wait for a specified duration (DangerTime) while indicating an error state
    while (TIMER1_g_ticks < DANGER_TIME);
    1b76:	80 91 2b 01 	lds	r24, 0x012B
    1b7a:	90 91 2c 01 	lds	r25, 0x012C
    1b7e:	8c 33       	cpi	r24, 0x3C	; 60
    1b80:	91 05       	cpc	r25, r1
    1b82:	cc f3       	brlt	.-14     	; 0x1b76 <turnOnBuzzer+0x1c>
}
    1b84:	cf 91       	pop	r28
    1b86:	df 91       	pop	r29
    1b88:	08 95       	ret

00001b8a <Callback>:
/*
 * Description:
 * Callback function for timer 1.
 * It increments the timer ticks for timekeeping purposes.
 */
void Callback(void) {
    1b8a:	df 93       	push	r29
    1b8c:	cf 93       	push	r28
    1b8e:	cd b7       	in	r28, 0x3d	; 61
    1b90:	de b7       	in	r29, 0x3e	; 62
    TIMER1_g_ticks++; // Increment the timer ticks
    1b92:	80 91 2b 01 	lds	r24, 0x012B
    1b96:	90 91 2c 01 	lds	r25, 0x012C
    1b9a:	01 96       	adiw	r24, 0x01	; 1
    1b9c:	90 93 2c 01 	sts	0x012C, r25
    1ba0:	80 93 2b 01 	sts	0x012B, r24
}
    1ba4:	cf 91       	pop	r28
    1ba6:	df 91       	pop	r29
    1ba8:	08 95       	ret

00001baa <turnOnMotor>:
/*
 * Description:
 * Function responsible for managing the state of the door.
 * It controls the door's actions, including unlocking, holding, and locking.
 */
void turnOnMotor(void) {
    1baa:	df 93       	push	r29
    1bac:	cf 93       	push	r28
    1bae:	cd b7       	in	r28, 0x3d	; 61
    1bb0:	de b7       	in	r29, 0x3e	; 62
    TIMER1_g_ticks = 0; // Reset the timer ticks to 0
    1bb2:	10 92 2c 01 	sts	0x012C, r1
    1bb6:	10 92 2b 01 	sts	0x012B, r1
    LCD_clearScreen();
    1bba:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <LCD_clearScreen>

    LCD_displayString("Door Un-locking");
    1bbe:	8f ee       	ldi	r24, 0xEF	; 239
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <LCD_displayString>

    // Wait for a specified duration (OpenTime) while unlocking the door
    while (TIMER1_g_ticks < OPEN_TIME);
    1bc6:	80 91 2b 01 	lds	r24, 0x012B
    1bca:	90 91 2c 01 	lds	r25, 0x012C
    1bce:	8f 30       	cpi	r24, 0x0F	; 15
    1bd0:	91 05       	cpc	r25, r1
    1bd2:	cc f3       	brlt	.-14     	; 0x1bc6 <turnOnMotor+0x1c>

    LCD_clearScreen();
    1bd4:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <LCD_clearScreen>
    LCD_displayString("Holding");
    1bd8:	8f ef       	ldi	r24, 0xFF	; 255
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <LCD_displayString>

    // Wait for a specified duration (HoldingTime) while holding the door open
    while (TIMER1_g_ticks < OPEN_TIME + HOLDING_TIME);
    1be0:	80 91 2b 01 	lds	r24, 0x012B
    1be4:	90 91 2c 01 	lds	r25, 0x012C
    1be8:	82 31       	cpi	r24, 0x12	; 18
    1bea:	91 05       	cpc	r25, r1
    1bec:	cc f3       	brlt	.-14     	; 0x1be0 <turnOnMotor+0x36>

    LCD_clearScreen();
    1bee:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <LCD_clearScreen>
    LCD_displayString("Door Locking");
    1bf2:	87 e0       	ldi	r24, 0x07	; 7
    1bf4:	91 e0       	ldi	r25, 0x01	; 1
    1bf6:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <LCD_displayString>

    // Wait for a specified duration (CloseTime) while locking the door
    while (TIMER1_g_ticks < OPEN_TIME + HOLDING_TIME+ CLOSE_TIME);
    1bfa:	80 91 2b 01 	lds	r24, 0x012B
    1bfe:	90 91 2c 01 	lds	r25, 0x012C
    1c02:	81 32       	cpi	r24, 0x21	; 33
    1c04:	91 05       	cpc	r25, r1
    1c06:	cc f3       	brlt	.-14     	; 0x1bfa <turnOnMotor+0x50>
}
    1c08:	cf 91       	pop	r28
    1c0a:	df 91       	pop	r29
    1c0c:	08 95       	ret

00001c0e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1c0e:	df 93       	push	r29
    1c10:	cf 93       	push	r28
    1c12:	00 d0       	rcall	.+0      	; 0x1c14 <GPIO_setupPinDirection+0x6>
    1c14:	00 d0       	rcall	.+0      	; 0x1c16 <GPIO_setupPinDirection+0x8>
    1c16:	0f 92       	push	r0
    1c18:	cd b7       	in	r28, 0x3d	; 61
    1c1a:	de b7       	in	r29, 0x3e	; 62
    1c1c:	89 83       	std	Y+1, r24	; 0x01
    1c1e:	6a 83       	std	Y+2, r22	; 0x02
    1c20:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1c22:	8a 81       	ldd	r24, Y+2	; 0x02
    1c24:	88 30       	cpi	r24, 0x08	; 8
    1c26:	08 f0       	brcs	.+2      	; 0x1c2a <GPIO_setupPinDirection+0x1c>
    1c28:	d5 c0       	rjmp	.+426    	; 0x1dd4 <GPIO_setupPinDirection+0x1c6>
    1c2a:	89 81       	ldd	r24, Y+1	; 0x01
    1c2c:	84 30       	cpi	r24, 0x04	; 4
    1c2e:	08 f0       	brcs	.+2      	; 0x1c32 <GPIO_setupPinDirection+0x24>
    1c30:	d1 c0       	rjmp	.+418    	; 0x1dd4 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1c32:	89 81       	ldd	r24, Y+1	; 0x01
    1c34:	28 2f       	mov	r18, r24
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	3d 83       	std	Y+5, r19	; 0x05
    1c3a:	2c 83       	std	Y+4, r18	; 0x04
    1c3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c3e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c40:	81 30       	cpi	r24, 0x01	; 1
    1c42:	91 05       	cpc	r25, r1
    1c44:	09 f4       	brne	.+2      	; 0x1c48 <GPIO_setupPinDirection+0x3a>
    1c46:	43 c0       	rjmp	.+134    	; 0x1cce <GPIO_setupPinDirection+0xc0>
    1c48:	2c 81       	ldd	r18, Y+4	; 0x04
    1c4a:	3d 81       	ldd	r19, Y+5	; 0x05
    1c4c:	22 30       	cpi	r18, 0x02	; 2
    1c4e:	31 05       	cpc	r19, r1
    1c50:	2c f4       	brge	.+10     	; 0x1c5c <GPIO_setupPinDirection+0x4e>
    1c52:	8c 81       	ldd	r24, Y+4	; 0x04
    1c54:	9d 81       	ldd	r25, Y+5	; 0x05
    1c56:	00 97       	sbiw	r24, 0x00	; 0
    1c58:	71 f0       	breq	.+28     	; 0x1c76 <GPIO_setupPinDirection+0x68>
    1c5a:	bc c0       	rjmp	.+376    	; 0x1dd4 <GPIO_setupPinDirection+0x1c6>
    1c5c:	2c 81       	ldd	r18, Y+4	; 0x04
    1c5e:	3d 81       	ldd	r19, Y+5	; 0x05
    1c60:	22 30       	cpi	r18, 0x02	; 2
    1c62:	31 05       	cpc	r19, r1
    1c64:	09 f4       	brne	.+2      	; 0x1c68 <GPIO_setupPinDirection+0x5a>
    1c66:	5f c0       	rjmp	.+190    	; 0x1d26 <GPIO_setupPinDirection+0x118>
    1c68:	8c 81       	ldd	r24, Y+4	; 0x04
    1c6a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c6c:	83 30       	cpi	r24, 0x03	; 3
    1c6e:	91 05       	cpc	r25, r1
    1c70:	09 f4       	brne	.+2      	; 0x1c74 <GPIO_setupPinDirection+0x66>
    1c72:	85 c0       	rjmp	.+266    	; 0x1d7e <GPIO_setupPinDirection+0x170>
    1c74:	af c0       	rjmp	.+350    	; 0x1dd4 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1c76:	8b 81       	ldd	r24, Y+3	; 0x03
    1c78:	81 30       	cpi	r24, 0x01	; 1
    1c7a:	a1 f4       	brne	.+40     	; 0x1ca4 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1c7c:	aa e3       	ldi	r26, 0x3A	; 58
    1c7e:	b0 e0       	ldi	r27, 0x00	; 0
    1c80:	ea e3       	ldi	r30, 0x3A	; 58
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	80 81       	ld	r24, Z
    1c86:	48 2f       	mov	r20, r24
    1c88:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8a:	28 2f       	mov	r18, r24
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	02 2e       	mov	r0, r18
    1c94:	02 c0       	rjmp	.+4      	; 0x1c9a <GPIO_setupPinDirection+0x8c>
    1c96:	88 0f       	add	r24, r24
    1c98:	99 1f       	adc	r25, r25
    1c9a:	0a 94       	dec	r0
    1c9c:	e2 f7       	brpl	.-8      	; 0x1c96 <GPIO_setupPinDirection+0x88>
    1c9e:	84 2b       	or	r24, r20
    1ca0:	8c 93       	st	X, r24
    1ca2:	98 c0       	rjmp	.+304    	; 0x1dd4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1ca4:	aa e3       	ldi	r26, 0x3A	; 58
    1ca6:	b0 e0       	ldi	r27, 0x00	; 0
    1ca8:	ea e3       	ldi	r30, 0x3A	; 58
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	80 81       	ld	r24, Z
    1cae:	48 2f       	mov	r20, r24
    1cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb2:	28 2f       	mov	r18, r24
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	02 2e       	mov	r0, r18
    1cbc:	02 c0       	rjmp	.+4      	; 0x1cc2 <GPIO_setupPinDirection+0xb4>
    1cbe:	88 0f       	add	r24, r24
    1cc0:	99 1f       	adc	r25, r25
    1cc2:	0a 94       	dec	r0
    1cc4:	e2 f7       	brpl	.-8      	; 0x1cbe <GPIO_setupPinDirection+0xb0>
    1cc6:	80 95       	com	r24
    1cc8:	84 23       	and	r24, r20
    1cca:	8c 93       	st	X, r24
    1ccc:	83 c0       	rjmp	.+262    	; 0x1dd4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1cce:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd0:	81 30       	cpi	r24, 0x01	; 1
    1cd2:	a1 f4       	brne	.+40     	; 0x1cfc <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1cd4:	a7 e3       	ldi	r26, 0x37	; 55
    1cd6:	b0 e0       	ldi	r27, 0x00	; 0
    1cd8:	e7 e3       	ldi	r30, 0x37	; 55
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	80 81       	ld	r24, Z
    1cde:	48 2f       	mov	r20, r24
    1ce0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce2:	28 2f       	mov	r18, r24
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	02 2e       	mov	r0, r18
    1cec:	02 c0       	rjmp	.+4      	; 0x1cf2 <GPIO_setupPinDirection+0xe4>
    1cee:	88 0f       	add	r24, r24
    1cf0:	99 1f       	adc	r25, r25
    1cf2:	0a 94       	dec	r0
    1cf4:	e2 f7       	brpl	.-8      	; 0x1cee <GPIO_setupPinDirection+0xe0>
    1cf6:	84 2b       	or	r24, r20
    1cf8:	8c 93       	st	X, r24
    1cfa:	6c c0       	rjmp	.+216    	; 0x1dd4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1cfc:	a7 e3       	ldi	r26, 0x37	; 55
    1cfe:	b0 e0       	ldi	r27, 0x00	; 0
    1d00:	e7 e3       	ldi	r30, 0x37	; 55
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	80 81       	ld	r24, Z
    1d06:	48 2f       	mov	r20, r24
    1d08:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0a:	28 2f       	mov	r18, r24
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	02 2e       	mov	r0, r18
    1d14:	02 c0       	rjmp	.+4      	; 0x1d1a <GPIO_setupPinDirection+0x10c>
    1d16:	88 0f       	add	r24, r24
    1d18:	99 1f       	adc	r25, r25
    1d1a:	0a 94       	dec	r0
    1d1c:	e2 f7       	brpl	.-8      	; 0x1d16 <GPIO_setupPinDirection+0x108>
    1d1e:	80 95       	com	r24
    1d20:	84 23       	and	r24, r20
    1d22:	8c 93       	st	X, r24
    1d24:	57 c0       	rjmp	.+174    	; 0x1dd4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1d26:	8b 81       	ldd	r24, Y+3	; 0x03
    1d28:	81 30       	cpi	r24, 0x01	; 1
    1d2a:	a1 f4       	brne	.+40     	; 0x1d54 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1d2c:	a4 e3       	ldi	r26, 0x34	; 52
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	e4 e3       	ldi	r30, 0x34	; 52
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	80 81       	ld	r24, Z
    1d36:	48 2f       	mov	r20, r24
    1d38:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3a:	28 2f       	mov	r18, r24
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	02 2e       	mov	r0, r18
    1d44:	02 c0       	rjmp	.+4      	; 0x1d4a <GPIO_setupPinDirection+0x13c>
    1d46:	88 0f       	add	r24, r24
    1d48:	99 1f       	adc	r25, r25
    1d4a:	0a 94       	dec	r0
    1d4c:	e2 f7       	brpl	.-8      	; 0x1d46 <GPIO_setupPinDirection+0x138>
    1d4e:	84 2b       	or	r24, r20
    1d50:	8c 93       	st	X, r24
    1d52:	40 c0       	rjmp	.+128    	; 0x1dd4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1d54:	a4 e3       	ldi	r26, 0x34	; 52
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	e4 e3       	ldi	r30, 0x34	; 52
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	48 2f       	mov	r20, r24
    1d60:	8a 81       	ldd	r24, Y+2	; 0x02
    1d62:	28 2f       	mov	r18, r24
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	02 2e       	mov	r0, r18
    1d6c:	02 c0       	rjmp	.+4      	; 0x1d72 <GPIO_setupPinDirection+0x164>
    1d6e:	88 0f       	add	r24, r24
    1d70:	99 1f       	adc	r25, r25
    1d72:	0a 94       	dec	r0
    1d74:	e2 f7       	brpl	.-8      	; 0x1d6e <GPIO_setupPinDirection+0x160>
    1d76:	80 95       	com	r24
    1d78:	84 23       	and	r24, r20
    1d7a:	8c 93       	st	X, r24
    1d7c:	2b c0       	rjmp	.+86     	; 0x1dd4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1d7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d80:	81 30       	cpi	r24, 0x01	; 1
    1d82:	a1 f4       	brne	.+40     	; 0x1dac <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1d84:	a1 e3       	ldi	r26, 0x31	; 49
    1d86:	b0 e0       	ldi	r27, 0x00	; 0
    1d88:	e1 e3       	ldi	r30, 0x31	; 49
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	80 81       	ld	r24, Z
    1d8e:	48 2f       	mov	r20, r24
    1d90:	8a 81       	ldd	r24, Y+2	; 0x02
    1d92:	28 2f       	mov	r18, r24
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	02 2e       	mov	r0, r18
    1d9c:	02 c0       	rjmp	.+4      	; 0x1da2 <GPIO_setupPinDirection+0x194>
    1d9e:	88 0f       	add	r24, r24
    1da0:	99 1f       	adc	r25, r25
    1da2:	0a 94       	dec	r0
    1da4:	e2 f7       	brpl	.-8      	; 0x1d9e <GPIO_setupPinDirection+0x190>
    1da6:	84 2b       	or	r24, r20
    1da8:	8c 93       	st	X, r24
    1daa:	14 c0       	rjmp	.+40     	; 0x1dd4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1dac:	a1 e3       	ldi	r26, 0x31	; 49
    1dae:	b0 e0       	ldi	r27, 0x00	; 0
    1db0:	e1 e3       	ldi	r30, 0x31	; 49
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	80 81       	ld	r24, Z
    1db6:	48 2f       	mov	r20, r24
    1db8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dba:	28 2f       	mov	r18, r24
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	02 2e       	mov	r0, r18
    1dc4:	02 c0       	rjmp	.+4      	; 0x1dca <GPIO_setupPinDirection+0x1bc>
    1dc6:	88 0f       	add	r24, r24
    1dc8:	99 1f       	adc	r25, r25
    1dca:	0a 94       	dec	r0
    1dcc:	e2 f7       	brpl	.-8      	; 0x1dc6 <GPIO_setupPinDirection+0x1b8>
    1dce:	80 95       	com	r24
    1dd0:	84 23       	and	r24, r20
    1dd2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1dd4:	0f 90       	pop	r0
    1dd6:	0f 90       	pop	r0
    1dd8:	0f 90       	pop	r0
    1dda:	0f 90       	pop	r0
    1ddc:	0f 90       	pop	r0
    1dde:	cf 91       	pop	r28
    1de0:	df 91       	pop	r29
    1de2:	08 95       	ret

00001de4 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1de4:	df 93       	push	r29
    1de6:	cf 93       	push	r28
    1de8:	00 d0       	rcall	.+0      	; 0x1dea <GPIO_writePin+0x6>
    1dea:	00 d0       	rcall	.+0      	; 0x1dec <GPIO_writePin+0x8>
    1dec:	0f 92       	push	r0
    1dee:	cd b7       	in	r28, 0x3d	; 61
    1df0:	de b7       	in	r29, 0x3e	; 62
    1df2:	89 83       	std	Y+1, r24	; 0x01
    1df4:	6a 83       	std	Y+2, r22	; 0x02
    1df6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1df8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfa:	88 30       	cpi	r24, 0x08	; 8
    1dfc:	08 f0       	brcs	.+2      	; 0x1e00 <GPIO_writePin+0x1c>
    1dfe:	d5 c0       	rjmp	.+426    	; 0x1faa <GPIO_writePin+0x1c6>
    1e00:	89 81       	ldd	r24, Y+1	; 0x01
    1e02:	84 30       	cpi	r24, 0x04	; 4
    1e04:	08 f0       	brcs	.+2      	; 0x1e08 <GPIO_writePin+0x24>
    1e06:	d1 c0       	rjmp	.+418    	; 0x1faa <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1e08:	89 81       	ldd	r24, Y+1	; 0x01
    1e0a:	28 2f       	mov	r18, r24
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	3d 83       	std	Y+5, r19	; 0x05
    1e10:	2c 83       	std	Y+4, r18	; 0x04
    1e12:	8c 81       	ldd	r24, Y+4	; 0x04
    1e14:	9d 81       	ldd	r25, Y+5	; 0x05
    1e16:	81 30       	cpi	r24, 0x01	; 1
    1e18:	91 05       	cpc	r25, r1
    1e1a:	09 f4       	brne	.+2      	; 0x1e1e <GPIO_writePin+0x3a>
    1e1c:	43 c0       	rjmp	.+134    	; 0x1ea4 <GPIO_writePin+0xc0>
    1e1e:	2c 81       	ldd	r18, Y+4	; 0x04
    1e20:	3d 81       	ldd	r19, Y+5	; 0x05
    1e22:	22 30       	cpi	r18, 0x02	; 2
    1e24:	31 05       	cpc	r19, r1
    1e26:	2c f4       	brge	.+10     	; 0x1e32 <GPIO_writePin+0x4e>
    1e28:	8c 81       	ldd	r24, Y+4	; 0x04
    1e2a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e2c:	00 97       	sbiw	r24, 0x00	; 0
    1e2e:	71 f0       	breq	.+28     	; 0x1e4c <GPIO_writePin+0x68>
    1e30:	bc c0       	rjmp	.+376    	; 0x1faa <GPIO_writePin+0x1c6>
    1e32:	2c 81       	ldd	r18, Y+4	; 0x04
    1e34:	3d 81       	ldd	r19, Y+5	; 0x05
    1e36:	22 30       	cpi	r18, 0x02	; 2
    1e38:	31 05       	cpc	r19, r1
    1e3a:	09 f4       	brne	.+2      	; 0x1e3e <GPIO_writePin+0x5a>
    1e3c:	5f c0       	rjmp	.+190    	; 0x1efc <GPIO_writePin+0x118>
    1e3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e40:	9d 81       	ldd	r25, Y+5	; 0x05
    1e42:	83 30       	cpi	r24, 0x03	; 3
    1e44:	91 05       	cpc	r25, r1
    1e46:	09 f4       	brne	.+2      	; 0x1e4a <GPIO_writePin+0x66>
    1e48:	85 c0       	rjmp	.+266    	; 0x1f54 <GPIO_writePin+0x170>
    1e4a:	af c0       	rjmp	.+350    	; 0x1faa <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1e4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4e:	81 30       	cpi	r24, 0x01	; 1
    1e50:	a1 f4       	brne	.+40     	; 0x1e7a <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1e52:	ab e3       	ldi	r26, 0x3B	; 59
    1e54:	b0 e0       	ldi	r27, 0x00	; 0
    1e56:	eb e3       	ldi	r30, 0x3B	; 59
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	80 81       	ld	r24, Z
    1e5c:	48 2f       	mov	r20, r24
    1e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e60:	28 2f       	mov	r18, r24
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	02 2e       	mov	r0, r18
    1e6a:	02 c0       	rjmp	.+4      	; 0x1e70 <GPIO_writePin+0x8c>
    1e6c:	88 0f       	add	r24, r24
    1e6e:	99 1f       	adc	r25, r25
    1e70:	0a 94       	dec	r0
    1e72:	e2 f7       	brpl	.-8      	; 0x1e6c <GPIO_writePin+0x88>
    1e74:	84 2b       	or	r24, r20
    1e76:	8c 93       	st	X, r24
    1e78:	98 c0       	rjmp	.+304    	; 0x1faa <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1e7a:	ab e3       	ldi	r26, 0x3B	; 59
    1e7c:	b0 e0       	ldi	r27, 0x00	; 0
    1e7e:	eb e3       	ldi	r30, 0x3B	; 59
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	80 81       	ld	r24, Z
    1e84:	48 2f       	mov	r20, r24
    1e86:	8a 81       	ldd	r24, Y+2	; 0x02
    1e88:	28 2f       	mov	r18, r24
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	81 e0       	ldi	r24, 0x01	; 1
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	02 2e       	mov	r0, r18
    1e92:	02 c0       	rjmp	.+4      	; 0x1e98 <GPIO_writePin+0xb4>
    1e94:	88 0f       	add	r24, r24
    1e96:	99 1f       	adc	r25, r25
    1e98:	0a 94       	dec	r0
    1e9a:	e2 f7       	brpl	.-8      	; 0x1e94 <GPIO_writePin+0xb0>
    1e9c:	80 95       	com	r24
    1e9e:	84 23       	and	r24, r20
    1ea0:	8c 93       	st	X, r24
    1ea2:	83 c0       	rjmp	.+262    	; 0x1faa <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1ea4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea6:	81 30       	cpi	r24, 0x01	; 1
    1ea8:	a1 f4       	brne	.+40     	; 0x1ed2 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1eaa:	a8 e3       	ldi	r26, 0x38	; 56
    1eac:	b0 e0       	ldi	r27, 0x00	; 0
    1eae:	e8 e3       	ldi	r30, 0x38	; 56
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	80 81       	ld	r24, Z
    1eb4:	48 2f       	mov	r20, r24
    1eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb8:	28 2f       	mov	r18, r24
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	02 2e       	mov	r0, r18
    1ec2:	02 c0       	rjmp	.+4      	; 0x1ec8 <GPIO_writePin+0xe4>
    1ec4:	88 0f       	add	r24, r24
    1ec6:	99 1f       	adc	r25, r25
    1ec8:	0a 94       	dec	r0
    1eca:	e2 f7       	brpl	.-8      	; 0x1ec4 <GPIO_writePin+0xe0>
    1ecc:	84 2b       	or	r24, r20
    1ece:	8c 93       	st	X, r24
    1ed0:	6c c0       	rjmp	.+216    	; 0x1faa <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1ed2:	a8 e3       	ldi	r26, 0x38	; 56
    1ed4:	b0 e0       	ldi	r27, 0x00	; 0
    1ed6:	e8 e3       	ldi	r30, 0x38	; 56
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	80 81       	ld	r24, Z
    1edc:	48 2f       	mov	r20, r24
    1ede:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee0:	28 2f       	mov	r18, r24
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	81 e0       	ldi	r24, 0x01	; 1
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	02 2e       	mov	r0, r18
    1eea:	02 c0       	rjmp	.+4      	; 0x1ef0 <GPIO_writePin+0x10c>
    1eec:	88 0f       	add	r24, r24
    1eee:	99 1f       	adc	r25, r25
    1ef0:	0a 94       	dec	r0
    1ef2:	e2 f7       	brpl	.-8      	; 0x1eec <GPIO_writePin+0x108>
    1ef4:	80 95       	com	r24
    1ef6:	84 23       	and	r24, r20
    1ef8:	8c 93       	st	X, r24
    1efa:	57 c0       	rjmp	.+174    	; 0x1faa <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1efc:	8b 81       	ldd	r24, Y+3	; 0x03
    1efe:	81 30       	cpi	r24, 0x01	; 1
    1f00:	a1 f4       	brne	.+40     	; 0x1f2a <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1f02:	a5 e3       	ldi	r26, 0x35	; 53
    1f04:	b0 e0       	ldi	r27, 0x00	; 0
    1f06:	e5 e3       	ldi	r30, 0x35	; 53
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	80 81       	ld	r24, Z
    1f0c:	48 2f       	mov	r20, r24
    1f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f10:	28 2f       	mov	r18, r24
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	02 2e       	mov	r0, r18
    1f1a:	02 c0       	rjmp	.+4      	; 0x1f20 <GPIO_writePin+0x13c>
    1f1c:	88 0f       	add	r24, r24
    1f1e:	99 1f       	adc	r25, r25
    1f20:	0a 94       	dec	r0
    1f22:	e2 f7       	brpl	.-8      	; 0x1f1c <GPIO_writePin+0x138>
    1f24:	84 2b       	or	r24, r20
    1f26:	8c 93       	st	X, r24
    1f28:	40 c0       	rjmp	.+128    	; 0x1faa <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1f2a:	a5 e3       	ldi	r26, 0x35	; 53
    1f2c:	b0 e0       	ldi	r27, 0x00	; 0
    1f2e:	e5 e3       	ldi	r30, 0x35	; 53
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	80 81       	ld	r24, Z
    1f34:	48 2f       	mov	r20, r24
    1f36:	8a 81       	ldd	r24, Y+2	; 0x02
    1f38:	28 2f       	mov	r18, r24
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	02 2e       	mov	r0, r18
    1f42:	02 c0       	rjmp	.+4      	; 0x1f48 <GPIO_writePin+0x164>
    1f44:	88 0f       	add	r24, r24
    1f46:	99 1f       	adc	r25, r25
    1f48:	0a 94       	dec	r0
    1f4a:	e2 f7       	brpl	.-8      	; 0x1f44 <GPIO_writePin+0x160>
    1f4c:	80 95       	com	r24
    1f4e:	84 23       	and	r24, r20
    1f50:	8c 93       	st	X, r24
    1f52:	2b c0       	rjmp	.+86     	; 0x1faa <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1f54:	8b 81       	ldd	r24, Y+3	; 0x03
    1f56:	81 30       	cpi	r24, 0x01	; 1
    1f58:	a1 f4       	brne	.+40     	; 0x1f82 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1f5a:	a2 e3       	ldi	r26, 0x32	; 50
    1f5c:	b0 e0       	ldi	r27, 0x00	; 0
    1f5e:	e2 e3       	ldi	r30, 0x32	; 50
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	80 81       	ld	r24, Z
    1f64:	48 2f       	mov	r20, r24
    1f66:	8a 81       	ldd	r24, Y+2	; 0x02
    1f68:	28 2f       	mov	r18, r24
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	02 2e       	mov	r0, r18
    1f72:	02 c0       	rjmp	.+4      	; 0x1f78 <GPIO_writePin+0x194>
    1f74:	88 0f       	add	r24, r24
    1f76:	99 1f       	adc	r25, r25
    1f78:	0a 94       	dec	r0
    1f7a:	e2 f7       	brpl	.-8      	; 0x1f74 <GPIO_writePin+0x190>
    1f7c:	84 2b       	or	r24, r20
    1f7e:	8c 93       	st	X, r24
    1f80:	14 c0       	rjmp	.+40     	; 0x1faa <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1f82:	a2 e3       	ldi	r26, 0x32	; 50
    1f84:	b0 e0       	ldi	r27, 0x00	; 0
    1f86:	e2 e3       	ldi	r30, 0x32	; 50
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	80 81       	ld	r24, Z
    1f8c:	48 2f       	mov	r20, r24
    1f8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f90:	28 2f       	mov	r18, r24
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	02 2e       	mov	r0, r18
    1f9a:	02 c0       	rjmp	.+4      	; 0x1fa0 <GPIO_writePin+0x1bc>
    1f9c:	88 0f       	add	r24, r24
    1f9e:	99 1f       	adc	r25, r25
    1fa0:	0a 94       	dec	r0
    1fa2:	e2 f7       	brpl	.-8      	; 0x1f9c <GPIO_writePin+0x1b8>
    1fa4:	80 95       	com	r24
    1fa6:	84 23       	and	r24, r20
    1fa8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1faa:	0f 90       	pop	r0
    1fac:	0f 90       	pop	r0
    1fae:	0f 90       	pop	r0
    1fb0:	0f 90       	pop	r0
    1fb2:	0f 90       	pop	r0
    1fb4:	cf 91       	pop	r28
    1fb6:	df 91       	pop	r29
    1fb8:	08 95       	ret

00001fba <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1fba:	df 93       	push	r29
    1fbc:	cf 93       	push	r28
    1fbe:	00 d0       	rcall	.+0      	; 0x1fc0 <GPIO_readPin+0x6>
    1fc0:	00 d0       	rcall	.+0      	; 0x1fc2 <GPIO_readPin+0x8>
    1fc2:	0f 92       	push	r0
    1fc4:	cd b7       	in	r28, 0x3d	; 61
    1fc6:	de b7       	in	r29, 0x3e	; 62
    1fc8:	8a 83       	std	Y+2, r24	; 0x02
    1fca:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1fcc:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1fce:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd0:	88 30       	cpi	r24, 0x08	; 8
    1fd2:	08 f0       	brcs	.+2      	; 0x1fd6 <GPIO_readPin+0x1c>
    1fd4:	84 c0       	rjmp	.+264    	; 0x20de <GPIO_readPin+0x124>
    1fd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd8:	84 30       	cpi	r24, 0x04	; 4
    1fda:	08 f0       	brcs	.+2      	; 0x1fde <GPIO_readPin+0x24>
    1fdc:	80 c0       	rjmp	.+256    	; 0x20de <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1fde:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe0:	28 2f       	mov	r18, r24
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	3d 83       	std	Y+5, r19	; 0x05
    1fe6:	2c 83       	std	Y+4, r18	; 0x04
    1fe8:	4c 81       	ldd	r20, Y+4	; 0x04
    1fea:	5d 81       	ldd	r21, Y+5	; 0x05
    1fec:	41 30       	cpi	r20, 0x01	; 1
    1fee:	51 05       	cpc	r21, r1
    1ff0:	79 f1       	breq	.+94     	; 0x2050 <GPIO_readPin+0x96>
    1ff2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ff4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ff6:	82 30       	cpi	r24, 0x02	; 2
    1ff8:	91 05       	cpc	r25, r1
    1ffa:	34 f4       	brge	.+12     	; 0x2008 <GPIO_readPin+0x4e>
    1ffc:	2c 81       	ldd	r18, Y+4	; 0x04
    1ffe:	3d 81       	ldd	r19, Y+5	; 0x05
    2000:	21 15       	cp	r18, r1
    2002:	31 05       	cpc	r19, r1
    2004:	69 f0       	breq	.+26     	; 0x2020 <GPIO_readPin+0x66>
    2006:	6b c0       	rjmp	.+214    	; 0x20de <GPIO_readPin+0x124>
    2008:	4c 81       	ldd	r20, Y+4	; 0x04
    200a:	5d 81       	ldd	r21, Y+5	; 0x05
    200c:	42 30       	cpi	r20, 0x02	; 2
    200e:	51 05       	cpc	r21, r1
    2010:	b9 f1       	breq	.+110    	; 0x2080 <GPIO_readPin+0xc6>
    2012:	8c 81       	ldd	r24, Y+4	; 0x04
    2014:	9d 81       	ldd	r25, Y+5	; 0x05
    2016:	83 30       	cpi	r24, 0x03	; 3
    2018:	91 05       	cpc	r25, r1
    201a:	09 f4       	brne	.+2      	; 0x201e <GPIO_readPin+0x64>
    201c:	49 c0       	rjmp	.+146    	; 0x20b0 <GPIO_readPin+0xf6>
    201e:	5f c0       	rjmp	.+190    	; 0x20de <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    2020:	e9 e3       	ldi	r30, 0x39	; 57
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	80 81       	ld	r24, Z
    2026:	28 2f       	mov	r18, r24
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	8b 81       	ldd	r24, Y+3	; 0x03
    202c:	88 2f       	mov	r24, r24
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	a9 01       	movw	r20, r18
    2032:	02 c0       	rjmp	.+4      	; 0x2038 <GPIO_readPin+0x7e>
    2034:	55 95       	asr	r21
    2036:	47 95       	ror	r20
    2038:	8a 95       	dec	r24
    203a:	e2 f7       	brpl	.-8      	; 0x2034 <GPIO_readPin+0x7a>
    203c:	ca 01       	movw	r24, r20
    203e:	81 70       	andi	r24, 0x01	; 1
    2040:	90 70       	andi	r25, 0x00	; 0
    2042:	88 23       	and	r24, r24
    2044:	19 f0       	breq	.+6      	; 0x204c <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	89 83       	std	Y+1, r24	; 0x01
    204a:	49 c0       	rjmp	.+146    	; 0x20de <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    204c:	19 82       	std	Y+1, r1	; 0x01
    204e:	47 c0       	rjmp	.+142    	; 0x20de <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2050:	e6 e3       	ldi	r30, 0x36	; 54
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	80 81       	ld	r24, Z
    2056:	28 2f       	mov	r18, r24
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	8b 81       	ldd	r24, Y+3	; 0x03
    205c:	88 2f       	mov	r24, r24
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	a9 01       	movw	r20, r18
    2062:	02 c0       	rjmp	.+4      	; 0x2068 <GPIO_readPin+0xae>
    2064:	55 95       	asr	r21
    2066:	47 95       	ror	r20
    2068:	8a 95       	dec	r24
    206a:	e2 f7       	brpl	.-8      	; 0x2064 <GPIO_readPin+0xaa>
    206c:	ca 01       	movw	r24, r20
    206e:	81 70       	andi	r24, 0x01	; 1
    2070:	90 70       	andi	r25, 0x00	; 0
    2072:	88 23       	and	r24, r24
    2074:	19 f0       	breq	.+6      	; 0x207c <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	89 83       	std	Y+1, r24	; 0x01
    207a:	31 c0       	rjmp	.+98     	; 0x20de <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    207c:	19 82       	std	Y+1, r1	; 0x01
    207e:	2f c0       	rjmp	.+94     	; 0x20de <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2080:	e3 e3       	ldi	r30, 0x33	; 51
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	80 81       	ld	r24, Z
    2086:	28 2f       	mov	r18, r24
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	8b 81       	ldd	r24, Y+3	; 0x03
    208c:	88 2f       	mov	r24, r24
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	a9 01       	movw	r20, r18
    2092:	02 c0       	rjmp	.+4      	; 0x2098 <GPIO_readPin+0xde>
    2094:	55 95       	asr	r21
    2096:	47 95       	ror	r20
    2098:	8a 95       	dec	r24
    209a:	e2 f7       	brpl	.-8      	; 0x2094 <GPIO_readPin+0xda>
    209c:	ca 01       	movw	r24, r20
    209e:	81 70       	andi	r24, 0x01	; 1
    20a0:	90 70       	andi	r25, 0x00	; 0
    20a2:	88 23       	and	r24, r24
    20a4:	19 f0       	breq	.+6      	; 0x20ac <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	89 83       	std	Y+1, r24	; 0x01
    20aa:	19 c0       	rjmp	.+50     	; 0x20de <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    20ac:	19 82       	std	Y+1, r1	; 0x01
    20ae:	17 c0       	rjmp	.+46     	; 0x20de <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    20b0:	e0 e3       	ldi	r30, 0x30	; 48
    20b2:	f0 e0       	ldi	r31, 0x00	; 0
    20b4:	80 81       	ld	r24, Z
    20b6:	28 2f       	mov	r18, r24
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	8b 81       	ldd	r24, Y+3	; 0x03
    20bc:	88 2f       	mov	r24, r24
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	a9 01       	movw	r20, r18
    20c2:	02 c0       	rjmp	.+4      	; 0x20c8 <GPIO_readPin+0x10e>
    20c4:	55 95       	asr	r21
    20c6:	47 95       	ror	r20
    20c8:	8a 95       	dec	r24
    20ca:	e2 f7       	brpl	.-8      	; 0x20c4 <GPIO_readPin+0x10a>
    20cc:	ca 01       	movw	r24, r20
    20ce:	81 70       	andi	r24, 0x01	; 1
    20d0:	90 70       	andi	r25, 0x00	; 0
    20d2:	88 23       	and	r24, r24
    20d4:	19 f0       	breq	.+6      	; 0x20dc <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    20d6:	81 e0       	ldi	r24, 0x01	; 1
    20d8:	89 83       	std	Y+1, r24	; 0x01
    20da:	01 c0       	rjmp	.+2      	; 0x20de <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    20dc:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    20de:	89 81       	ldd	r24, Y+1	; 0x01
}
    20e0:	0f 90       	pop	r0
    20e2:	0f 90       	pop	r0
    20e4:	0f 90       	pop	r0
    20e6:	0f 90       	pop	r0
    20e8:	0f 90       	pop	r0
    20ea:	cf 91       	pop	r28
    20ec:	df 91       	pop	r29
    20ee:	08 95       	ret

000020f0 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    20f0:	df 93       	push	r29
    20f2:	cf 93       	push	r28
    20f4:	00 d0       	rcall	.+0      	; 0x20f6 <GPIO_setupPortDirection+0x6>
    20f6:	00 d0       	rcall	.+0      	; 0x20f8 <GPIO_setupPortDirection+0x8>
    20f8:	cd b7       	in	r28, 0x3d	; 61
    20fa:	de b7       	in	r29, 0x3e	; 62
    20fc:	89 83       	std	Y+1, r24	; 0x01
    20fe:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2100:	89 81       	ldd	r24, Y+1	; 0x01
    2102:	84 30       	cpi	r24, 0x04	; 4
    2104:	90 f5       	brcc	.+100    	; 0x216a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2106:	89 81       	ldd	r24, Y+1	; 0x01
    2108:	28 2f       	mov	r18, r24
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	3c 83       	std	Y+4, r19	; 0x04
    210e:	2b 83       	std	Y+3, r18	; 0x03
    2110:	8b 81       	ldd	r24, Y+3	; 0x03
    2112:	9c 81       	ldd	r25, Y+4	; 0x04
    2114:	81 30       	cpi	r24, 0x01	; 1
    2116:	91 05       	cpc	r25, r1
    2118:	d1 f0       	breq	.+52     	; 0x214e <GPIO_setupPortDirection+0x5e>
    211a:	2b 81       	ldd	r18, Y+3	; 0x03
    211c:	3c 81       	ldd	r19, Y+4	; 0x04
    211e:	22 30       	cpi	r18, 0x02	; 2
    2120:	31 05       	cpc	r19, r1
    2122:	2c f4       	brge	.+10     	; 0x212e <GPIO_setupPortDirection+0x3e>
    2124:	8b 81       	ldd	r24, Y+3	; 0x03
    2126:	9c 81       	ldd	r25, Y+4	; 0x04
    2128:	00 97       	sbiw	r24, 0x00	; 0
    212a:	61 f0       	breq	.+24     	; 0x2144 <GPIO_setupPortDirection+0x54>
    212c:	1e c0       	rjmp	.+60     	; 0x216a <GPIO_setupPortDirection+0x7a>
    212e:	2b 81       	ldd	r18, Y+3	; 0x03
    2130:	3c 81       	ldd	r19, Y+4	; 0x04
    2132:	22 30       	cpi	r18, 0x02	; 2
    2134:	31 05       	cpc	r19, r1
    2136:	81 f0       	breq	.+32     	; 0x2158 <GPIO_setupPortDirection+0x68>
    2138:	8b 81       	ldd	r24, Y+3	; 0x03
    213a:	9c 81       	ldd	r25, Y+4	; 0x04
    213c:	83 30       	cpi	r24, 0x03	; 3
    213e:	91 05       	cpc	r25, r1
    2140:	81 f0       	breq	.+32     	; 0x2162 <GPIO_setupPortDirection+0x72>
    2142:	13 c0       	rjmp	.+38     	; 0x216a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2144:	ea e3       	ldi	r30, 0x3A	; 58
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	8a 81       	ldd	r24, Y+2	; 0x02
    214a:	80 83       	st	Z, r24
    214c:	0e c0       	rjmp	.+28     	; 0x216a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    214e:	e7 e3       	ldi	r30, 0x37	; 55
    2150:	f0 e0       	ldi	r31, 0x00	; 0
    2152:	8a 81       	ldd	r24, Y+2	; 0x02
    2154:	80 83       	st	Z, r24
    2156:	09 c0       	rjmp	.+18     	; 0x216a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2158:	e4 e3       	ldi	r30, 0x34	; 52
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	8a 81       	ldd	r24, Y+2	; 0x02
    215e:	80 83       	st	Z, r24
    2160:	04 c0       	rjmp	.+8      	; 0x216a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2162:	e1 e3       	ldi	r30, 0x31	; 49
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	8a 81       	ldd	r24, Y+2	; 0x02
    2168:	80 83       	st	Z, r24
			break;
		}
	}
}
    216a:	0f 90       	pop	r0
    216c:	0f 90       	pop	r0
    216e:	0f 90       	pop	r0
    2170:	0f 90       	pop	r0
    2172:	cf 91       	pop	r28
    2174:	df 91       	pop	r29
    2176:	08 95       	ret

00002178 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2178:	df 93       	push	r29
    217a:	cf 93       	push	r28
    217c:	00 d0       	rcall	.+0      	; 0x217e <GPIO_writePort+0x6>
    217e:	00 d0       	rcall	.+0      	; 0x2180 <GPIO_writePort+0x8>
    2180:	cd b7       	in	r28, 0x3d	; 61
    2182:	de b7       	in	r29, 0x3e	; 62
    2184:	89 83       	std	Y+1, r24	; 0x01
    2186:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2188:	89 81       	ldd	r24, Y+1	; 0x01
    218a:	84 30       	cpi	r24, 0x04	; 4
    218c:	90 f5       	brcc	.+100    	; 0x21f2 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    218e:	89 81       	ldd	r24, Y+1	; 0x01
    2190:	28 2f       	mov	r18, r24
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	3c 83       	std	Y+4, r19	; 0x04
    2196:	2b 83       	std	Y+3, r18	; 0x03
    2198:	8b 81       	ldd	r24, Y+3	; 0x03
    219a:	9c 81       	ldd	r25, Y+4	; 0x04
    219c:	81 30       	cpi	r24, 0x01	; 1
    219e:	91 05       	cpc	r25, r1
    21a0:	d1 f0       	breq	.+52     	; 0x21d6 <GPIO_writePort+0x5e>
    21a2:	2b 81       	ldd	r18, Y+3	; 0x03
    21a4:	3c 81       	ldd	r19, Y+4	; 0x04
    21a6:	22 30       	cpi	r18, 0x02	; 2
    21a8:	31 05       	cpc	r19, r1
    21aa:	2c f4       	brge	.+10     	; 0x21b6 <GPIO_writePort+0x3e>
    21ac:	8b 81       	ldd	r24, Y+3	; 0x03
    21ae:	9c 81       	ldd	r25, Y+4	; 0x04
    21b0:	00 97       	sbiw	r24, 0x00	; 0
    21b2:	61 f0       	breq	.+24     	; 0x21cc <GPIO_writePort+0x54>
    21b4:	1e c0       	rjmp	.+60     	; 0x21f2 <GPIO_writePort+0x7a>
    21b6:	2b 81       	ldd	r18, Y+3	; 0x03
    21b8:	3c 81       	ldd	r19, Y+4	; 0x04
    21ba:	22 30       	cpi	r18, 0x02	; 2
    21bc:	31 05       	cpc	r19, r1
    21be:	81 f0       	breq	.+32     	; 0x21e0 <GPIO_writePort+0x68>
    21c0:	8b 81       	ldd	r24, Y+3	; 0x03
    21c2:	9c 81       	ldd	r25, Y+4	; 0x04
    21c4:	83 30       	cpi	r24, 0x03	; 3
    21c6:	91 05       	cpc	r25, r1
    21c8:	81 f0       	breq	.+32     	; 0x21ea <GPIO_writePort+0x72>
    21ca:	13 c0       	rjmp	.+38     	; 0x21f2 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    21cc:	eb e3       	ldi	r30, 0x3B	; 59
    21ce:	f0 e0       	ldi	r31, 0x00	; 0
    21d0:	8a 81       	ldd	r24, Y+2	; 0x02
    21d2:	80 83       	st	Z, r24
    21d4:	0e c0       	rjmp	.+28     	; 0x21f2 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    21d6:	e8 e3       	ldi	r30, 0x38	; 56
    21d8:	f0 e0       	ldi	r31, 0x00	; 0
    21da:	8a 81       	ldd	r24, Y+2	; 0x02
    21dc:	80 83       	st	Z, r24
    21de:	09 c0       	rjmp	.+18     	; 0x21f2 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    21e0:	e5 e3       	ldi	r30, 0x35	; 53
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	8a 81       	ldd	r24, Y+2	; 0x02
    21e6:	80 83       	st	Z, r24
    21e8:	04 c0       	rjmp	.+8      	; 0x21f2 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    21ea:	e2 e3       	ldi	r30, 0x32	; 50
    21ec:	f0 e0       	ldi	r31, 0x00	; 0
    21ee:	8a 81       	ldd	r24, Y+2	; 0x02
    21f0:	80 83       	st	Z, r24
			break;
		}
	}
}
    21f2:	0f 90       	pop	r0
    21f4:	0f 90       	pop	r0
    21f6:	0f 90       	pop	r0
    21f8:	0f 90       	pop	r0
    21fa:	cf 91       	pop	r28
    21fc:	df 91       	pop	r29
    21fe:	08 95       	ret

00002200 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2200:	df 93       	push	r29
    2202:	cf 93       	push	r28
    2204:	00 d0       	rcall	.+0      	; 0x2206 <GPIO_readPort+0x6>
    2206:	00 d0       	rcall	.+0      	; 0x2208 <GPIO_readPort+0x8>
    2208:	cd b7       	in	r28, 0x3d	; 61
    220a:	de b7       	in	r29, 0x3e	; 62
    220c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    220e:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2210:	8a 81       	ldd	r24, Y+2	; 0x02
    2212:	84 30       	cpi	r24, 0x04	; 4
    2214:	90 f5       	brcc	.+100    	; 0x227a <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2216:	8a 81       	ldd	r24, Y+2	; 0x02
    2218:	28 2f       	mov	r18, r24
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	3c 83       	std	Y+4, r19	; 0x04
    221e:	2b 83       	std	Y+3, r18	; 0x03
    2220:	8b 81       	ldd	r24, Y+3	; 0x03
    2222:	9c 81       	ldd	r25, Y+4	; 0x04
    2224:	81 30       	cpi	r24, 0x01	; 1
    2226:	91 05       	cpc	r25, r1
    2228:	d1 f0       	breq	.+52     	; 0x225e <GPIO_readPort+0x5e>
    222a:	2b 81       	ldd	r18, Y+3	; 0x03
    222c:	3c 81       	ldd	r19, Y+4	; 0x04
    222e:	22 30       	cpi	r18, 0x02	; 2
    2230:	31 05       	cpc	r19, r1
    2232:	2c f4       	brge	.+10     	; 0x223e <GPIO_readPort+0x3e>
    2234:	8b 81       	ldd	r24, Y+3	; 0x03
    2236:	9c 81       	ldd	r25, Y+4	; 0x04
    2238:	00 97       	sbiw	r24, 0x00	; 0
    223a:	61 f0       	breq	.+24     	; 0x2254 <GPIO_readPort+0x54>
    223c:	1e c0       	rjmp	.+60     	; 0x227a <GPIO_readPort+0x7a>
    223e:	2b 81       	ldd	r18, Y+3	; 0x03
    2240:	3c 81       	ldd	r19, Y+4	; 0x04
    2242:	22 30       	cpi	r18, 0x02	; 2
    2244:	31 05       	cpc	r19, r1
    2246:	81 f0       	breq	.+32     	; 0x2268 <GPIO_readPort+0x68>
    2248:	8b 81       	ldd	r24, Y+3	; 0x03
    224a:	9c 81       	ldd	r25, Y+4	; 0x04
    224c:	83 30       	cpi	r24, 0x03	; 3
    224e:	91 05       	cpc	r25, r1
    2250:	81 f0       	breq	.+32     	; 0x2272 <GPIO_readPort+0x72>
    2252:	13 c0       	rjmp	.+38     	; 0x227a <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2254:	e9 e3       	ldi	r30, 0x39	; 57
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	80 81       	ld	r24, Z
    225a:	89 83       	std	Y+1, r24	; 0x01
    225c:	0e c0       	rjmp	.+28     	; 0x227a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    225e:	e6 e3       	ldi	r30, 0x36	; 54
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	80 81       	ld	r24, Z
    2264:	89 83       	std	Y+1, r24	; 0x01
    2266:	09 c0       	rjmp	.+18     	; 0x227a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2268:	e3 e3       	ldi	r30, 0x33	; 51
    226a:	f0 e0       	ldi	r31, 0x00	; 0
    226c:	80 81       	ld	r24, Z
    226e:	89 83       	std	Y+1, r24	; 0x01
    2270:	04 c0       	rjmp	.+8      	; 0x227a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2272:	e0 e3       	ldi	r30, 0x30	; 48
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	80 81       	ld	r24, Z
    2278:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    227a:	89 81       	ldd	r24, Y+1	; 0x01
}
    227c:	0f 90       	pop	r0
    227e:	0f 90       	pop	r0
    2280:	0f 90       	pop	r0
    2282:	0f 90       	pop	r0
    2284:	cf 91       	pop	r28
    2286:	df 91       	pop	r29
    2288:	08 95       	ret

0000228a <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    228a:	df 93       	push	r29
    228c:	cf 93       	push	r28
    228e:	00 d0       	rcall	.+0      	; 0x2290 <KEYPAD_getPressedKey+0x6>
    2290:	0f 92       	push	r0
    2292:	cd b7       	in	r28, 0x3d	; 61
    2294:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    2296:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    2298:	1b 82       	std	Y+3, r1	; 0x03
    229a:	43 c0       	rjmp	.+134    	; 0x2322 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    229c:	82 e0       	ldi	r24, 0x02	; 2
    229e:	60 e0       	ldi	r22, 0x00	; 0
    22a0:	0e 94 78 10 	call	0x20f0	; 0x20f0 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    22a4:	8b 81       	ldd	r24, Y+3	; 0x03
    22a6:	98 2f       	mov	r25, r24
    22a8:	9c 5f       	subi	r25, 0xFC	; 252
    22aa:	82 e0       	ldi	r24, 0x02	; 2
    22ac:	69 2f       	mov	r22, r25
    22ae:	41 e0       	ldi	r20, 0x01	; 1
    22b0:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <GPIO_setupPinDirection>

#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    22b4:	8b 81       	ldd	r24, Y+3	; 0x03
    22b6:	88 2f       	mov	r24, r24
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	9c 01       	movw	r18, r24
    22bc:	2c 5f       	subi	r18, 0xFC	; 252
    22be:	3f 4f       	sbci	r19, 0xFF	; 255
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	02 c0       	rjmp	.+4      	; 0x22ca <KEYPAD_getPressedKey+0x40>
    22c6:	88 0f       	add	r24, r24
    22c8:	99 1f       	adc	r25, r25
    22ca:	2a 95       	dec	r18
    22cc:	e2 f7       	brpl	.-8      	; 0x22c6 <KEYPAD_getPressedKey+0x3c>
    22ce:	80 95       	com	r24
    22d0:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    22d2:	82 e0       	ldi	r24, 0x02	; 2
    22d4:	69 81       	ldd	r22, Y+1	; 0x01
    22d6:	0e 94 bc 10 	call	0x2178	; 0x2178 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    22da:	1a 82       	std	Y+2, r1	; 0x02
    22dc:	1c c0       	rjmp	.+56     	; 0x2316 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    22de:	82 e0       	ldi	r24, 0x02	; 2
    22e0:	6a 81       	ldd	r22, Y+2	; 0x02
    22e2:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <GPIO_readPin>
    22e6:	88 23       	and	r24, r24
    22e8:	99 f4       	brne	.+38     	; 0x2310 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    22ea:	8a 81       	ldd	r24, Y+2	; 0x02
    22ec:	88 2f       	mov	r24, r24
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	88 0f       	add	r24, r24
    22f2:	99 1f       	adc	r25, r25
    22f4:	88 0f       	add	r24, r24
    22f6:	99 1f       	adc	r25, r25
    22f8:	98 2f       	mov	r25, r24
    22fa:	8b 81       	ldd	r24, Y+3	; 0x03
    22fc:	89 0f       	add	r24, r25
    22fe:	8f 5f       	subi	r24, 0xFF	; 255
    2300:	0e 94 96 11 	call	0x232c	; 0x232c <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    2304:	0f 90       	pop	r0
    2306:	0f 90       	pop	r0
    2308:	0f 90       	pop	r0
    230a:	cf 91       	pop	r28
    230c:	df 91       	pop	r29
    230e:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    2310:	8a 81       	ldd	r24, Y+2	; 0x02
    2312:	8f 5f       	subi	r24, 0xFF	; 255
    2314:	8a 83       	std	Y+2, r24	; 0x02
    2316:	8a 81       	ldd	r24, Y+2	; 0x02
    2318:	84 30       	cpi	r24, 0x04	; 4
    231a:	08 f3       	brcs	.-62     	; 0x22de <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    231c:	8b 81       	ldd	r24, Y+3	; 0x03
    231e:	8f 5f       	subi	r24, 0xFF	; 255
    2320:	8b 83       	std	Y+3, r24	; 0x03
    2322:	8b 81       	ldd	r24, Y+3	; 0x03
    2324:	84 30       	cpi	r24, 0x04	; 4
    2326:	08 f4       	brcc	.+2      	; 0x232a <KEYPAD_getPressedKey+0xa0>
    2328:	b9 cf       	rjmp	.-142    	; 0x229c <KEYPAD_getPressedKey+0x12>
    232a:	b6 cf       	rjmp	.-148    	; 0x2298 <KEYPAD_getPressedKey+0xe>

0000232c <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    232c:	df 93       	push	r29
    232e:	cf 93       	push	r28
    2330:	00 d0       	rcall	.+0      	; 0x2332 <KEYPAD_4x4_adjustKeyNumber+0x6>
    2332:	00 d0       	rcall	.+0      	; 0x2334 <KEYPAD_4x4_adjustKeyNumber+0x8>
    2334:	cd b7       	in	r28, 0x3d	; 61
    2336:	de b7       	in	r29, 0x3e	; 62
    2338:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    233a:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    233c:	8a 81       	ldd	r24, Y+2	; 0x02
    233e:	28 2f       	mov	r18, r24
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	3c 83       	std	Y+4, r19	; 0x04
    2344:	2b 83       	std	Y+3, r18	; 0x03
    2346:	8b 81       	ldd	r24, Y+3	; 0x03
    2348:	9c 81       	ldd	r25, Y+4	; 0x04
    234a:	88 30       	cpi	r24, 0x08	; 8
    234c:	91 05       	cpc	r25, r1
    234e:	09 f4       	brne	.+2      	; 0x2352 <KEYPAD_4x4_adjustKeyNumber+0x26>
    2350:	70 c0       	rjmp	.+224    	; 0x2432 <KEYPAD_4x4_adjustKeyNumber+0x106>
    2352:	2b 81       	ldd	r18, Y+3	; 0x03
    2354:	3c 81       	ldd	r19, Y+4	; 0x04
    2356:	29 30       	cpi	r18, 0x09	; 9
    2358:	31 05       	cpc	r19, r1
    235a:	5c f5       	brge	.+86     	; 0x23b2 <KEYPAD_4x4_adjustKeyNumber+0x86>
    235c:	8b 81       	ldd	r24, Y+3	; 0x03
    235e:	9c 81       	ldd	r25, Y+4	; 0x04
    2360:	84 30       	cpi	r24, 0x04	; 4
    2362:	91 05       	cpc	r25, r1
    2364:	09 f4       	brne	.+2      	; 0x2368 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2366:	59 c0       	rjmp	.+178    	; 0x241a <KEYPAD_4x4_adjustKeyNumber+0xee>
    2368:	2b 81       	ldd	r18, Y+3	; 0x03
    236a:	3c 81       	ldd	r19, Y+4	; 0x04
    236c:	25 30       	cpi	r18, 0x05	; 5
    236e:	31 05       	cpc	r19, r1
    2370:	9c f4       	brge	.+38     	; 0x2398 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2372:	8b 81       	ldd	r24, Y+3	; 0x03
    2374:	9c 81       	ldd	r25, Y+4	; 0x04
    2376:	82 30       	cpi	r24, 0x02	; 2
    2378:	91 05       	cpc	r25, r1
    237a:	09 f4       	brne	.+2      	; 0x237e <KEYPAD_4x4_adjustKeyNumber+0x52>
    237c:	48 c0       	rjmp	.+144    	; 0x240e <KEYPAD_4x4_adjustKeyNumber+0xe2>
    237e:	2b 81       	ldd	r18, Y+3	; 0x03
    2380:	3c 81       	ldd	r19, Y+4	; 0x04
    2382:	23 30       	cpi	r18, 0x03	; 3
    2384:	31 05       	cpc	r19, r1
    2386:	0c f0       	brlt	.+2      	; 0x238a <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2388:	45 c0       	rjmp	.+138    	; 0x2414 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    238a:	8b 81       	ldd	r24, Y+3	; 0x03
    238c:	9c 81       	ldd	r25, Y+4	; 0x04
    238e:	81 30       	cpi	r24, 0x01	; 1
    2390:	91 05       	cpc	r25, r1
    2392:	09 f4       	brne	.+2      	; 0x2396 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2394:	39 c0       	rjmp	.+114    	; 0x2408 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2396:	67 c0       	rjmp	.+206    	; 0x2466 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2398:	2b 81       	ldd	r18, Y+3	; 0x03
    239a:	3c 81       	ldd	r19, Y+4	; 0x04
    239c:	26 30       	cpi	r18, 0x06	; 6
    239e:	31 05       	cpc	r19, r1
    23a0:	09 f4       	brne	.+2      	; 0x23a4 <KEYPAD_4x4_adjustKeyNumber+0x78>
    23a2:	41 c0       	rjmp	.+130    	; 0x2426 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    23a4:	8b 81       	ldd	r24, Y+3	; 0x03
    23a6:	9c 81       	ldd	r25, Y+4	; 0x04
    23a8:	87 30       	cpi	r24, 0x07	; 7
    23aa:	91 05       	cpc	r25, r1
    23ac:	0c f0       	brlt	.+2      	; 0x23b0 <KEYPAD_4x4_adjustKeyNumber+0x84>
    23ae:	3e c0       	rjmp	.+124    	; 0x242c <KEYPAD_4x4_adjustKeyNumber+0x100>
    23b0:	37 c0       	rjmp	.+110    	; 0x2420 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    23b2:	2b 81       	ldd	r18, Y+3	; 0x03
    23b4:	3c 81       	ldd	r19, Y+4	; 0x04
    23b6:	2c 30       	cpi	r18, 0x0C	; 12
    23b8:	31 05       	cpc	r19, r1
    23ba:	09 f4       	brne	.+2      	; 0x23be <KEYPAD_4x4_adjustKeyNumber+0x92>
    23bc:	46 c0       	rjmp	.+140    	; 0x244a <KEYPAD_4x4_adjustKeyNumber+0x11e>
    23be:	8b 81       	ldd	r24, Y+3	; 0x03
    23c0:	9c 81       	ldd	r25, Y+4	; 0x04
    23c2:	8d 30       	cpi	r24, 0x0D	; 13
    23c4:	91 05       	cpc	r25, r1
    23c6:	5c f4       	brge	.+22     	; 0x23de <KEYPAD_4x4_adjustKeyNumber+0xb2>
    23c8:	2b 81       	ldd	r18, Y+3	; 0x03
    23ca:	3c 81       	ldd	r19, Y+4	; 0x04
    23cc:	2a 30       	cpi	r18, 0x0A	; 10
    23ce:	31 05       	cpc	r19, r1
    23d0:	b1 f1       	breq	.+108    	; 0x243e <KEYPAD_4x4_adjustKeyNumber+0x112>
    23d2:	8b 81       	ldd	r24, Y+3	; 0x03
    23d4:	9c 81       	ldd	r25, Y+4	; 0x04
    23d6:	8b 30       	cpi	r24, 0x0B	; 11
    23d8:	91 05       	cpc	r25, r1
    23da:	a4 f5       	brge	.+104    	; 0x2444 <KEYPAD_4x4_adjustKeyNumber+0x118>
    23dc:	2d c0       	rjmp	.+90     	; 0x2438 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    23de:	2b 81       	ldd	r18, Y+3	; 0x03
    23e0:	3c 81       	ldd	r19, Y+4	; 0x04
    23e2:	2e 30       	cpi	r18, 0x0E	; 14
    23e4:	31 05       	cpc	r19, r1
    23e6:	b9 f1       	breq	.+110    	; 0x2456 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    23e8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ea:	9c 81       	ldd	r25, Y+4	; 0x04
    23ec:	8e 30       	cpi	r24, 0x0E	; 14
    23ee:	91 05       	cpc	r25, r1
    23f0:	7c f1       	brlt	.+94     	; 0x2450 <KEYPAD_4x4_adjustKeyNumber+0x124>
    23f2:	2b 81       	ldd	r18, Y+3	; 0x03
    23f4:	3c 81       	ldd	r19, Y+4	; 0x04
    23f6:	2f 30       	cpi	r18, 0x0F	; 15
    23f8:	31 05       	cpc	r19, r1
    23fa:	79 f1       	breq	.+94     	; 0x245a <KEYPAD_4x4_adjustKeyNumber+0x12e>
    23fc:	8b 81       	ldd	r24, Y+3	; 0x03
    23fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2400:	80 31       	cpi	r24, 0x10	; 16
    2402:	91 05       	cpc	r25, r1
    2404:	69 f1       	breq	.+90     	; 0x2460 <KEYPAD_4x4_adjustKeyNumber+0x134>
    2406:	2f c0       	rjmp	.+94     	; 0x2466 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2408:	87 e0       	ldi	r24, 0x07	; 7
    240a:	89 83       	std	Y+1, r24	; 0x01
    240c:	2e c0       	rjmp	.+92     	; 0x246a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    240e:	88 e0       	ldi	r24, 0x08	; 8
    2410:	89 83       	std	Y+1, r24	; 0x01
    2412:	2b c0       	rjmp	.+86     	; 0x246a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    2414:	89 e0       	ldi	r24, 0x09	; 9
    2416:	89 83       	std	Y+1, r24	; 0x01
    2418:	28 c0       	rjmp	.+80     	; 0x246a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    241a:	85 e2       	ldi	r24, 0x25	; 37
    241c:	89 83       	std	Y+1, r24	; 0x01
    241e:	25 c0       	rjmp	.+74     	; 0x246a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2420:	84 e0       	ldi	r24, 0x04	; 4
    2422:	89 83       	std	Y+1, r24	; 0x01
    2424:	22 c0       	rjmp	.+68     	; 0x246a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2426:	85 e0       	ldi	r24, 0x05	; 5
    2428:	89 83       	std	Y+1, r24	; 0x01
    242a:	1f c0       	rjmp	.+62     	; 0x246a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    242c:	86 e0       	ldi	r24, 0x06	; 6
    242e:	89 83       	std	Y+1, r24	; 0x01
    2430:	1c c0       	rjmp	.+56     	; 0x246a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2432:	8a e2       	ldi	r24, 0x2A	; 42
    2434:	89 83       	std	Y+1, r24	; 0x01
    2436:	19 c0       	rjmp	.+50     	; 0x246a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	89 83       	std	Y+1, r24	; 0x01
    243c:	16 c0       	rjmp	.+44     	; 0x246a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    243e:	82 e0       	ldi	r24, 0x02	; 2
    2440:	89 83       	std	Y+1, r24	; 0x01
    2442:	13 c0       	rjmp	.+38     	; 0x246a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    2444:	83 e0       	ldi	r24, 0x03	; 3
    2446:	89 83       	std	Y+1, r24	; 0x01
    2448:	10 c0       	rjmp	.+32     	; 0x246a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    244a:	8d e2       	ldi	r24, 0x2D	; 45
    244c:	89 83       	std	Y+1, r24	; 0x01
    244e:	0d c0       	rjmp	.+26     	; 0x246a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2450:	8d e0       	ldi	r24, 0x0D	; 13
    2452:	89 83       	std	Y+1, r24	; 0x01
    2454:	0a c0       	rjmp	.+20     	; 0x246a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    2456:	19 82       	std	Y+1, r1	; 0x01
    2458:	08 c0       	rjmp	.+16     	; 0x246a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    245a:	8d e3       	ldi	r24, 0x3D	; 61
    245c:	89 83       	std	Y+1, r24	; 0x01
    245e:	05 c0       	rjmp	.+10     	; 0x246a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2460:	8b e2       	ldi	r24, 0x2B	; 43
    2462:	89 83       	std	Y+1, r24	; 0x01
    2464:	02 c0       	rjmp	.+4      	; 0x246a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2466:	8a 81       	ldd	r24, Y+2	; 0x02
    2468:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    246a:	89 81       	ldd	r24, Y+1	; 0x01
} 
    246c:	0f 90       	pop	r0
    246e:	0f 90       	pop	r0
    2470:	0f 90       	pop	r0
    2472:	0f 90       	pop	r0
    2474:	cf 91       	pop	r28
    2476:	df 91       	pop	r29
    2478:	08 95       	ret

0000247a <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    247a:	df 93       	push	r29
    247c:	cf 93       	push	r28
    247e:	cd b7       	in	r28, 0x3d	; 61
    2480:	de b7       	in	r29, 0x3e	; 62
    2482:	2e 97       	sbiw	r28, 0x0e	; 14
    2484:	0f b6       	in	r0, 0x3f	; 63
    2486:	f8 94       	cli
    2488:	de bf       	out	0x3e, r29	; 62
    248a:	0f be       	out	0x3f, r0	; 63
    248c:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    248e:	81 e0       	ldi	r24, 0x01	; 1
    2490:	61 e0       	ldi	r22, 0x01	; 1
    2492:	41 e0       	ldi	r20, 0x01	; 1
    2494:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2498:	81 e0       	ldi	r24, 0x01	; 1
    249a:	60 e0       	ldi	r22, 0x00	; 0
    249c:	41 e0       	ldi	r20, 0x01	; 1
    249e:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <GPIO_setupPinDirection>
    24a2:	80 e0       	ldi	r24, 0x00	; 0
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	a0 ea       	ldi	r26, 0xA0	; 160
    24a8:	b1 e4       	ldi	r27, 0x41	; 65
    24aa:	8b 87       	std	Y+11, r24	; 0x0b
    24ac:	9c 87       	std	Y+12, r25	; 0x0c
    24ae:	ad 87       	std	Y+13, r26	; 0x0d
    24b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    24b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    24b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    24b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	4a ef       	ldi	r20, 0xFA	; 250
    24c0:	54 e4       	ldi	r21, 0x44	; 68
    24c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c6:	dc 01       	movw	r26, r24
    24c8:	cb 01       	movw	r24, r22
    24ca:	8f 83       	std	Y+7, r24	; 0x07
    24cc:	98 87       	std	Y+8, r25	; 0x08
    24ce:	a9 87       	std	Y+9, r26	; 0x09
    24d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24d2:	6f 81       	ldd	r22, Y+7	; 0x07
    24d4:	78 85       	ldd	r23, Y+8	; 0x08
    24d6:	89 85       	ldd	r24, Y+9	; 0x09
    24d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24da:	20 e0       	ldi	r18, 0x00	; 0
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	40 e8       	ldi	r20, 0x80	; 128
    24e0:	5f e3       	ldi	r21, 0x3F	; 63
    24e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24e6:	88 23       	and	r24, r24
    24e8:	2c f4       	brge	.+10     	; 0x24f4 <LCD_init+0x7a>
		__ticks = 1;
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	9e 83       	std	Y+6, r25	; 0x06
    24f0:	8d 83       	std	Y+5, r24	; 0x05
    24f2:	3f c0       	rjmp	.+126    	; 0x2572 <LCD_init+0xf8>
	else if (__tmp > 65535)
    24f4:	6f 81       	ldd	r22, Y+7	; 0x07
    24f6:	78 85       	ldd	r23, Y+8	; 0x08
    24f8:	89 85       	ldd	r24, Y+9	; 0x09
    24fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	3f ef       	ldi	r19, 0xFF	; 255
    2500:	4f e7       	ldi	r20, 0x7F	; 127
    2502:	57 e4       	ldi	r21, 0x47	; 71
    2504:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2508:	18 16       	cp	r1, r24
    250a:	4c f5       	brge	.+82     	; 0x255e <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    250c:	6b 85       	ldd	r22, Y+11	; 0x0b
    250e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2510:	8d 85       	ldd	r24, Y+13	; 0x0d
    2512:	9e 85       	ldd	r25, Y+14	; 0x0e
    2514:	20 e0       	ldi	r18, 0x00	; 0
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	40 e2       	ldi	r20, 0x20	; 32
    251a:	51 e4       	ldi	r21, 0x41	; 65
    251c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2520:	dc 01       	movw	r26, r24
    2522:	cb 01       	movw	r24, r22
    2524:	bc 01       	movw	r22, r24
    2526:	cd 01       	movw	r24, r26
    2528:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    252c:	dc 01       	movw	r26, r24
    252e:	cb 01       	movw	r24, r22
    2530:	9e 83       	std	Y+6, r25	; 0x06
    2532:	8d 83       	std	Y+5, r24	; 0x05
    2534:	0f c0       	rjmp	.+30     	; 0x2554 <LCD_init+0xda>
    2536:	88 ec       	ldi	r24, 0xC8	; 200
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	9c 83       	std	Y+4, r25	; 0x04
    253c:	8b 83       	std	Y+3, r24	; 0x03
    253e:	8b 81       	ldd	r24, Y+3	; 0x03
    2540:	9c 81       	ldd	r25, Y+4	; 0x04
    2542:	01 97       	sbiw	r24, 0x01	; 1
    2544:	f1 f7       	brne	.-4      	; 0x2542 <LCD_init+0xc8>
    2546:	9c 83       	std	Y+4, r25	; 0x04
    2548:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    254a:	8d 81       	ldd	r24, Y+5	; 0x05
    254c:	9e 81       	ldd	r25, Y+6	; 0x06
    254e:	01 97       	sbiw	r24, 0x01	; 1
    2550:	9e 83       	std	Y+6, r25	; 0x06
    2552:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2554:	8d 81       	ldd	r24, Y+5	; 0x05
    2556:	9e 81       	ldd	r25, Y+6	; 0x06
    2558:	00 97       	sbiw	r24, 0x00	; 0
    255a:	69 f7       	brne	.-38     	; 0x2536 <LCD_init+0xbc>
    255c:	14 c0       	rjmp	.+40     	; 0x2586 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    255e:	6f 81       	ldd	r22, Y+7	; 0x07
    2560:	78 85       	ldd	r23, Y+8	; 0x08
    2562:	89 85       	ldd	r24, Y+9	; 0x09
    2564:	9a 85       	ldd	r25, Y+10	; 0x0a
    2566:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    256a:	dc 01       	movw	r26, r24
    256c:	cb 01       	movw	r24, r22
    256e:	9e 83       	std	Y+6, r25	; 0x06
    2570:	8d 83       	std	Y+5, r24	; 0x05
    2572:	8d 81       	ldd	r24, Y+5	; 0x05
    2574:	9e 81       	ldd	r25, Y+6	; 0x06
    2576:	9a 83       	std	Y+2, r25	; 0x02
    2578:	89 83       	std	Y+1, r24	; 0x01
    257a:	89 81       	ldd	r24, Y+1	; 0x01
    257c:	9a 81       	ldd	r25, Y+2	; 0x02
    257e:	01 97       	sbiw	r24, 0x01	; 1
    2580:	f1 f7       	brne	.-4      	; 0x257e <LCD_init+0x104>
    2582:	9a 83       	std	Y+2, r25	; 0x02
    2584:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2586:	80 e0       	ldi	r24, 0x00	; 0
    2588:	6f ef       	ldi	r22, 0xFF	; 255
    258a:	0e 94 78 10 	call	0x20f0	; 0x20f0 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    258e:	88 e3       	ldi	r24, 0x38	; 56
    2590:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2594:	8c e0       	ldi	r24, 0x0C	; 12
    2596:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    259a:	81 e0       	ldi	r24, 0x01	; 1
    259c:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <LCD_sendCommand>
}
    25a0:	2e 96       	adiw	r28, 0x0e	; 14
    25a2:	0f b6       	in	r0, 0x3f	; 63
    25a4:	f8 94       	cli
    25a6:	de bf       	out	0x3e, r29	; 62
    25a8:	0f be       	out	0x3f, r0	; 63
    25aa:	cd bf       	out	0x3d, r28	; 61
    25ac:	cf 91       	pop	r28
    25ae:	df 91       	pop	r29
    25b0:	08 95       	ret

000025b2 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    25b2:	df 93       	push	r29
    25b4:	cf 93       	push	r28
    25b6:	cd b7       	in	r28, 0x3d	; 61
    25b8:	de b7       	in	r29, 0x3e	; 62
    25ba:	e9 97       	sbiw	r28, 0x39	; 57
    25bc:	0f b6       	in	r0, 0x3f	; 63
    25be:	f8 94       	cli
    25c0:	de bf       	out	0x3e, r29	; 62
    25c2:	0f be       	out	0x3f, r0	; 63
    25c4:	cd bf       	out	0x3d, r28	; 61
    25c6:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    25c8:	81 e0       	ldi	r24, 0x01	; 1
    25ca:	61 e0       	ldi	r22, 0x01	; 1
    25cc:	40 e0       	ldi	r20, 0x00	; 0
    25ce:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <GPIO_writePin>
    25d2:	80 e0       	ldi	r24, 0x00	; 0
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	a0 e8       	ldi	r26, 0x80	; 128
    25d8:	bf e3       	ldi	r27, 0x3F	; 63
    25da:	8d ab       	std	Y+53, r24	; 0x35
    25dc:	9e ab       	std	Y+54, r25	; 0x36
    25de:	af ab       	std	Y+55, r26	; 0x37
    25e0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e2:	6d a9       	ldd	r22, Y+53	; 0x35
    25e4:	7e a9       	ldd	r23, Y+54	; 0x36
    25e6:	8f a9       	ldd	r24, Y+55	; 0x37
    25e8:	98 ad       	ldd	r25, Y+56	; 0x38
    25ea:	20 e0       	ldi	r18, 0x00	; 0
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	4a ef       	ldi	r20, 0xFA	; 250
    25f0:	54 e4       	ldi	r21, 0x44	; 68
    25f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	89 ab       	std	Y+49, r24	; 0x31
    25fc:	9a ab       	std	Y+50, r25	; 0x32
    25fe:	ab ab       	std	Y+51, r26	; 0x33
    2600:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2602:	69 a9       	ldd	r22, Y+49	; 0x31
    2604:	7a a9       	ldd	r23, Y+50	; 0x32
    2606:	8b a9       	ldd	r24, Y+51	; 0x33
    2608:	9c a9       	ldd	r25, Y+52	; 0x34
    260a:	20 e0       	ldi	r18, 0x00	; 0
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	40 e8       	ldi	r20, 0x80	; 128
    2610:	5f e3       	ldi	r21, 0x3F	; 63
    2612:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2616:	88 23       	and	r24, r24
    2618:	2c f4       	brge	.+10     	; 0x2624 <LCD_sendCommand+0x72>
		__ticks = 1;
    261a:	81 e0       	ldi	r24, 0x01	; 1
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	98 ab       	std	Y+48, r25	; 0x30
    2620:	8f a7       	std	Y+47, r24	; 0x2f
    2622:	3f c0       	rjmp	.+126    	; 0x26a2 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    2624:	69 a9       	ldd	r22, Y+49	; 0x31
    2626:	7a a9       	ldd	r23, Y+50	; 0x32
    2628:	8b a9       	ldd	r24, Y+51	; 0x33
    262a:	9c a9       	ldd	r25, Y+52	; 0x34
    262c:	20 e0       	ldi	r18, 0x00	; 0
    262e:	3f ef       	ldi	r19, 0xFF	; 255
    2630:	4f e7       	ldi	r20, 0x7F	; 127
    2632:	57 e4       	ldi	r21, 0x47	; 71
    2634:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2638:	18 16       	cp	r1, r24
    263a:	4c f5       	brge	.+82     	; 0x268e <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    263c:	6d a9       	ldd	r22, Y+53	; 0x35
    263e:	7e a9       	ldd	r23, Y+54	; 0x36
    2640:	8f a9       	ldd	r24, Y+55	; 0x37
    2642:	98 ad       	ldd	r25, Y+56	; 0x38
    2644:	20 e0       	ldi	r18, 0x00	; 0
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	40 e2       	ldi	r20, 0x20	; 32
    264a:	51 e4       	ldi	r21, 0x41	; 65
    264c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2650:	dc 01       	movw	r26, r24
    2652:	cb 01       	movw	r24, r22
    2654:	bc 01       	movw	r22, r24
    2656:	cd 01       	movw	r24, r26
    2658:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    265c:	dc 01       	movw	r26, r24
    265e:	cb 01       	movw	r24, r22
    2660:	98 ab       	std	Y+48, r25	; 0x30
    2662:	8f a7       	std	Y+47, r24	; 0x2f
    2664:	0f c0       	rjmp	.+30     	; 0x2684 <LCD_sendCommand+0xd2>
    2666:	88 ec       	ldi	r24, 0xC8	; 200
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	9e a7       	std	Y+46, r25	; 0x2e
    266c:	8d a7       	std	Y+45, r24	; 0x2d
    266e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2670:	9e a5       	ldd	r25, Y+46	; 0x2e
    2672:	01 97       	sbiw	r24, 0x01	; 1
    2674:	f1 f7       	brne	.-4      	; 0x2672 <LCD_sendCommand+0xc0>
    2676:	9e a7       	std	Y+46, r25	; 0x2e
    2678:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    267a:	8f a5       	ldd	r24, Y+47	; 0x2f
    267c:	98 a9       	ldd	r25, Y+48	; 0x30
    267e:	01 97       	sbiw	r24, 0x01	; 1
    2680:	98 ab       	std	Y+48, r25	; 0x30
    2682:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2684:	8f a5       	ldd	r24, Y+47	; 0x2f
    2686:	98 a9       	ldd	r25, Y+48	; 0x30
    2688:	00 97       	sbiw	r24, 0x00	; 0
    268a:	69 f7       	brne	.-38     	; 0x2666 <LCD_sendCommand+0xb4>
    268c:	14 c0       	rjmp	.+40     	; 0x26b6 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    268e:	69 a9       	ldd	r22, Y+49	; 0x31
    2690:	7a a9       	ldd	r23, Y+50	; 0x32
    2692:	8b a9       	ldd	r24, Y+51	; 0x33
    2694:	9c a9       	ldd	r25, Y+52	; 0x34
    2696:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    269a:	dc 01       	movw	r26, r24
    269c:	cb 01       	movw	r24, r22
    269e:	98 ab       	std	Y+48, r25	; 0x30
    26a0:	8f a7       	std	Y+47, r24	; 0x2f
    26a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    26a4:	98 a9       	ldd	r25, Y+48	; 0x30
    26a6:	9c a7       	std	Y+44, r25	; 0x2c
    26a8:	8b a7       	std	Y+43, r24	; 0x2b
    26aa:	8b a5       	ldd	r24, Y+43	; 0x2b
    26ac:	9c a5       	ldd	r25, Y+44	; 0x2c
    26ae:	01 97       	sbiw	r24, 0x01	; 1
    26b0:	f1 f7       	brne	.-4      	; 0x26ae <LCD_sendCommand+0xfc>
    26b2:	9c a7       	std	Y+44, r25	; 0x2c
    26b4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    26b6:	81 e0       	ldi	r24, 0x01	; 1
    26b8:	60 e0       	ldi	r22, 0x00	; 0
    26ba:	41 e0       	ldi	r20, 0x01	; 1
    26bc:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <GPIO_writePin>
    26c0:	80 e0       	ldi	r24, 0x00	; 0
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	a0 e8       	ldi	r26, 0x80	; 128
    26c6:	bf e3       	ldi	r27, 0x3F	; 63
    26c8:	8f a3       	std	Y+39, r24	; 0x27
    26ca:	98 a7       	std	Y+40, r25	; 0x28
    26cc:	a9 a7       	std	Y+41, r26	; 0x29
    26ce:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26d0:	6f a1       	ldd	r22, Y+39	; 0x27
    26d2:	78 a5       	ldd	r23, Y+40	; 0x28
    26d4:	89 a5       	ldd	r24, Y+41	; 0x29
    26d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    26d8:	20 e0       	ldi	r18, 0x00	; 0
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	4a ef       	ldi	r20, 0xFA	; 250
    26de:	54 e4       	ldi	r21, 0x44	; 68
    26e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e4:	dc 01       	movw	r26, r24
    26e6:	cb 01       	movw	r24, r22
    26e8:	8b a3       	std	Y+35, r24	; 0x23
    26ea:	9c a3       	std	Y+36, r25	; 0x24
    26ec:	ad a3       	std	Y+37, r26	; 0x25
    26ee:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    26f0:	6b a1       	ldd	r22, Y+35	; 0x23
    26f2:	7c a1       	ldd	r23, Y+36	; 0x24
    26f4:	8d a1       	ldd	r24, Y+37	; 0x25
    26f6:	9e a1       	ldd	r25, Y+38	; 0x26
    26f8:	20 e0       	ldi	r18, 0x00	; 0
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	40 e8       	ldi	r20, 0x80	; 128
    26fe:	5f e3       	ldi	r21, 0x3F	; 63
    2700:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2704:	88 23       	and	r24, r24
    2706:	2c f4       	brge	.+10     	; 0x2712 <LCD_sendCommand+0x160>
		__ticks = 1;
    2708:	81 e0       	ldi	r24, 0x01	; 1
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	9a a3       	std	Y+34, r25	; 0x22
    270e:	89 a3       	std	Y+33, r24	; 0x21
    2710:	3f c0       	rjmp	.+126    	; 0x2790 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    2712:	6b a1       	ldd	r22, Y+35	; 0x23
    2714:	7c a1       	ldd	r23, Y+36	; 0x24
    2716:	8d a1       	ldd	r24, Y+37	; 0x25
    2718:	9e a1       	ldd	r25, Y+38	; 0x26
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	3f ef       	ldi	r19, 0xFF	; 255
    271e:	4f e7       	ldi	r20, 0x7F	; 127
    2720:	57 e4       	ldi	r21, 0x47	; 71
    2722:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2726:	18 16       	cp	r1, r24
    2728:	4c f5       	brge	.+82     	; 0x277c <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    272a:	6f a1       	ldd	r22, Y+39	; 0x27
    272c:	78 a5       	ldd	r23, Y+40	; 0x28
    272e:	89 a5       	ldd	r24, Y+41	; 0x29
    2730:	9a a5       	ldd	r25, Y+42	; 0x2a
    2732:	20 e0       	ldi	r18, 0x00	; 0
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	40 e2       	ldi	r20, 0x20	; 32
    2738:	51 e4       	ldi	r21, 0x41	; 65
    273a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    273e:	dc 01       	movw	r26, r24
    2740:	cb 01       	movw	r24, r22
    2742:	bc 01       	movw	r22, r24
    2744:	cd 01       	movw	r24, r26
    2746:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    274a:	dc 01       	movw	r26, r24
    274c:	cb 01       	movw	r24, r22
    274e:	9a a3       	std	Y+34, r25	; 0x22
    2750:	89 a3       	std	Y+33, r24	; 0x21
    2752:	0f c0       	rjmp	.+30     	; 0x2772 <LCD_sendCommand+0x1c0>
    2754:	88 ec       	ldi	r24, 0xC8	; 200
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	98 a3       	std	Y+32, r25	; 0x20
    275a:	8f 8f       	std	Y+31, r24	; 0x1f
    275c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    275e:	98 a1       	ldd	r25, Y+32	; 0x20
    2760:	01 97       	sbiw	r24, 0x01	; 1
    2762:	f1 f7       	brne	.-4      	; 0x2760 <LCD_sendCommand+0x1ae>
    2764:	98 a3       	std	Y+32, r25	; 0x20
    2766:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2768:	89 a1       	ldd	r24, Y+33	; 0x21
    276a:	9a a1       	ldd	r25, Y+34	; 0x22
    276c:	01 97       	sbiw	r24, 0x01	; 1
    276e:	9a a3       	std	Y+34, r25	; 0x22
    2770:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2772:	89 a1       	ldd	r24, Y+33	; 0x21
    2774:	9a a1       	ldd	r25, Y+34	; 0x22
    2776:	00 97       	sbiw	r24, 0x00	; 0
    2778:	69 f7       	brne	.-38     	; 0x2754 <LCD_sendCommand+0x1a2>
    277a:	14 c0       	rjmp	.+40     	; 0x27a4 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    277c:	6b a1       	ldd	r22, Y+35	; 0x23
    277e:	7c a1       	ldd	r23, Y+36	; 0x24
    2780:	8d a1       	ldd	r24, Y+37	; 0x25
    2782:	9e a1       	ldd	r25, Y+38	; 0x26
    2784:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2788:	dc 01       	movw	r26, r24
    278a:	cb 01       	movw	r24, r22
    278c:	9a a3       	std	Y+34, r25	; 0x22
    278e:	89 a3       	std	Y+33, r24	; 0x21
    2790:	89 a1       	ldd	r24, Y+33	; 0x21
    2792:	9a a1       	ldd	r25, Y+34	; 0x22
    2794:	9e 8f       	std	Y+30, r25	; 0x1e
    2796:	8d 8f       	std	Y+29, r24	; 0x1d
    2798:	8d 8d       	ldd	r24, Y+29	; 0x1d
    279a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    279c:	01 97       	sbiw	r24, 0x01	; 1
    279e:	f1 f7       	brne	.-4      	; 0x279c <LCD_sendCommand+0x1ea>
    27a0:	9e 8f       	std	Y+30, r25	; 0x1e
    27a2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    27a4:	80 e0       	ldi	r24, 0x00	; 0
    27a6:	69 ad       	ldd	r22, Y+57	; 0x39
    27a8:	0e 94 bc 10 	call	0x2178	; 0x2178 <GPIO_writePort>
    27ac:	80 e0       	ldi	r24, 0x00	; 0
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	a0 e8       	ldi	r26, 0x80	; 128
    27b2:	bf e3       	ldi	r27, 0x3F	; 63
    27b4:	89 8f       	std	Y+25, r24	; 0x19
    27b6:	9a 8f       	std	Y+26, r25	; 0x1a
    27b8:	ab 8f       	std	Y+27, r26	; 0x1b
    27ba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27bc:	69 8d       	ldd	r22, Y+25	; 0x19
    27be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27c4:	20 e0       	ldi	r18, 0x00	; 0
    27c6:	30 e0       	ldi	r19, 0x00	; 0
    27c8:	4a ef       	ldi	r20, 0xFA	; 250
    27ca:	54 e4       	ldi	r21, 0x44	; 68
    27cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d0:	dc 01       	movw	r26, r24
    27d2:	cb 01       	movw	r24, r22
    27d4:	8d 8b       	std	Y+21, r24	; 0x15
    27d6:	9e 8b       	std	Y+22, r25	; 0x16
    27d8:	af 8b       	std	Y+23, r26	; 0x17
    27da:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27dc:	6d 89       	ldd	r22, Y+21	; 0x15
    27de:	7e 89       	ldd	r23, Y+22	; 0x16
    27e0:	8f 89       	ldd	r24, Y+23	; 0x17
    27e2:	98 8d       	ldd	r25, Y+24	; 0x18
    27e4:	20 e0       	ldi	r18, 0x00	; 0
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	40 e8       	ldi	r20, 0x80	; 128
    27ea:	5f e3       	ldi	r21, 0x3F	; 63
    27ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27f0:	88 23       	and	r24, r24
    27f2:	2c f4       	brge	.+10     	; 0x27fe <LCD_sendCommand+0x24c>
		__ticks = 1;
    27f4:	81 e0       	ldi	r24, 0x01	; 1
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	9c 8b       	std	Y+20, r25	; 0x14
    27fa:	8b 8b       	std	Y+19, r24	; 0x13
    27fc:	3f c0       	rjmp	.+126    	; 0x287c <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    27fe:	6d 89       	ldd	r22, Y+21	; 0x15
    2800:	7e 89       	ldd	r23, Y+22	; 0x16
    2802:	8f 89       	ldd	r24, Y+23	; 0x17
    2804:	98 8d       	ldd	r25, Y+24	; 0x18
    2806:	20 e0       	ldi	r18, 0x00	; 0
    2808:	3f ef       	ldi	r19, 0xFF	; 255
    280a:	4f e7       	ldi	r20, 0x7F	; 127
    280c:	57 e4       	ldi	r21, 0x47	; 71
    280e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2812:	18 16       	cp	r1, r24
    2814:	4c f5       	brge	.+82     	; 0x2868 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2816:	69 8d       	ldd	r22, Y+25	; 0x19
    2818:	7a 8d       	ldd	r23, Y+26	; 0x1a
    281a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    281c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    281e:	20 e0       	ldi	r18, 0x00	; 0
    2820:	30 e0       	ldi	r19, 0x00	; 0
    2822:	40 e2       	ldi	r20, 0x20	; 32
    2824:	51 e4       	ldi	r21, 0x41	; 65
    2826:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    282a:	dc 01       	movw	r26, r24
    282c:	cb 01       	movw	r24, r22
    282e:	bc 01       	movw	r22, r24
    2830:	cd 01       	movw	r24, r26
    2832:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2836:	dc 01       	movw	r26, r24
    2838:	cb 01       	movw	r24, r22
    283a:	9c 8b       	std	Y+20, r25	; 0x14
    283c:	8b 8b       	std	Y+19, r24	; 0x13
    283e:	0f c0       	rjmp	.+30     	; 0x285e <LCD_sendCommand+0x2ac>
    2840:	88 ec       	ldi	r24, 0xC8	; 200
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	9a 8b       	std	Y+18, r25	; 0x12
    2846:	89 8b       	std	Y+17, r24	; 0x11
    2848:	89 89       	ldd	r24, Y+17	; 0x11
    284a:	9a 89       	ldd	r25, Y+18	; 0x12
    284c:	01 97       	sbiw	r24, 0x01	; 1
    284e:	f1 f7       	brne	.-4      	; 0x284c <LCD_sendCommand+0x29a>
    2850:	9a 8b       	std	Y+18, r25	; 0x12
    2852:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2854:	8b 89       	ldd	r24, Y+19	; 0x13
    2856:	9c 89       	ldd	r25, Y+20	; 0x14
    2858:	01 97       	sbiw	r24, 0x01	; 1
    285a:	9c 8b       	std	Y+20, r25	; 0x14
    285c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    285e:	8b 89       	ldd	r24, Y+19	; 0x13
    2860:	9c 89       	ldd	r25, Y+20	; 0x14
    2862:	00 97       	sbiw	r24, 0x00	; 0
    2864:	69 f7       	brne	.-38     	; 0x2840 <LCD_sendCommand+0x28e>
    2866:	14 c0       	rjmp	.+40     	; 0x2890 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2868:	6d 89       	ldd	r22, Y+21	; 0x15
    286a:	7e 89       	ldd	r23, Y+22	; 0x16
    286c:	8f 89       	ldd	r24, Y+23	; 0x17
    286e:	98 8d       	ldd	r25, Y+24	; 0x18
    2870:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2874:	dc 01       	movw	r26, r24
    2876:	cb 01       	movw	r24, r22
    2878:	9c 8b       	std	Y+20, r25	; 0x14
    287a:	8b 8b       	std	Y+19, r24	; 0x13
    287c:	8b 89       	ldd	r24, Y+19	; 0x13
    287e:	9c 89       	ldd	r25, Y+20	; 0x14
    2880:	98 8b       	std	Y+16, r25	; 0x10
    2882:	8f 87       	std	Y+15, r24	; 0x0f
    2884:	8f 85       	ldd	r24, Y+15	; 0x0f
    2886:	98 89       	ldd	r25, Y+16	; 0x10
    2888:	01 97       	sbiw	r24, 0x01	; 1
    288a:	f1 f7       	brne	.-4      	; 0x2888 <LCD_sendCommand+0x2d6>
    288c:	98 8b       	std	Y+16, r25	; 0x10
    288e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2890:	81 e0       	ldi	r24, 0x01	; 1
    2892:	60 e0       	ldi	r22, 0x00	; 0
    2894:	40 e0       	ldi	r20, 0x00	; 0
    2896:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <GPIO_writePin>
    289a:	80 e0       	ldi	r24, 0x00	; 0
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	a0 e8       	ldi	r26, 0x80	; 128
    28a0:	bf e3       	ldi	r27, 0x3F	; 63
    28a2:	8b 87       	std	Y+11, r24	; 0x0b
    28a4:	9c 87       	std	Y+12, r25	; 0x0c
    28a6:	ad 87       	std	Y+13, r26	; 0x0d
    28a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    28ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    28ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    28b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    28b2:	20 e0       	ldi	r18, 0x00	; 0
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	4a ef       	ldi	r20, 0xFA	; 250
    28b8:	54 e4       	ldi	r21, 0x44	; 68
    28ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28be:	dc 01       	movw	r26, r24
    28c0:	cb 01       	movw	r24, r22
    28c2:	8f 83       	std	Y+7, r24	; 0x07
    28c4:	98 87       	std	Y+8, r25	; 0x08
    28c6:	a9 87       	std	Y+9, r26	; 0x09
    28c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28ca:	6f 81       	ldd	r22, Y+7	; 0x07
    28cc:	78 85       	ldd	r23, Y+8	; 0x08
    28ce:	89 85       	ldd	r24, Y+9	; 0x09
    28d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28d2:	20 e0       	ldi	r18, 0x00	; 0
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	40 e8       	ldi	r20, 0x80	; 128
    28d8:	5f e3       	ldi	r21, 0x3F	; 63
    28da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28de:	88 23       	and	r24, r24
    28e0:	2c f4       	brge	.+10     	; 0x28ec <LCD_sendCommand+0x33a>
		__ticks = 1;
    28e2:	81 e0       	ldi	r24, 0x01	; 1
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	9e 83       	std	Y+6, r25	; 0x06
    28e8:	8d 83       	std	Y+5, r24	; 0x05
    28ea:	3f c0       	rjmp	.+126    	; 0x296a <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    28ec:	6f 81       	ldd	r22, Y+7	; 0x07
    28ee:	78 85       	ldd	r23, Y+8	; 0x08
    28f0:	89 85       	ldd	r24, Y+9	; 0x09
    28f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28f4:	20 e0       	ldi	r18, 0x00	; 0
    28f6:	3f ef       	ldi	r19, 0xFF	; 255
    28f8:	4f e7       	ldi	r20, 0x7F	; 127
    28fa:	57 e4       	ldi	r21, 0x47	; 71
    28fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2900:	18 16       	cp	r1, r24
    2902:	4c f5       	brge	.+82     	; 0x2956 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2904:	6b 85       	ldd	r22, Y+11	; 0x0b
    2906:	7c 85       	ldd	r23, Y+12	; 0x0c
    2908:	8d 85       	ldd	r24, Y+13	; 0x0d
    290a:	9e 85       	ldd	r25, Y+14	; 0x0e
    290c:	20 e0       	ldi	r18, 0x00	; 0
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	40 e2       	ldi	r20, 0x20	; 32
    2912:	51 e4       	ldi	r21, 0x41	; 65
    2914:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2918:	dc 01       	movw	r26, r24
    291a:	cb 01       	movw	r24, r22
    291c:	bc 01       	movw	r22, r24
    291e:	cd 01       	movw	r24, r26
    2920:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2924:	dc 01       	movw	r26, r24
    2926:	cb 01       	movw	r24, r22
    2928:	9e 83       	std	Y+6, r25	; 0x06
    292a:	8d 83       	std	Y+5, r24	; 0x05
    292c:	0f c0       	rjmp	.+30     	; 0x294c <LCD_sendCommand+0x39a>
    292e:	88 ec       	ldi	r24, 0xC8	; 200
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	9c 83       	std	Y+4, r25	; 0x04
    2934:	8b 83       	std	Y+3, r24	; 0x03
    2936:	8b 81       	ldd	r24, Y+3	; 0x03
    2938:	9c 81       	ldd	r25, Y+4	; 0x04
    293a:	01 97       	sbiw	r24, 0x01	; 1
    293c:	f1 f7       	brne	.-4      	; 0x293a <LCD_sendCommand+0x388>
    293e:	9c 83       	std	Y+4, r25	; 0x04
    2940:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2942:	8d 81       	ldd	r24, Y+5	; 0x05
    2944:	9e 81       	ldd	r25, Y+6	; 0x06
    2946:	01 97       	sbiw	r24, 0x01	; 1
    2948:	9e 83       	std	Y+6, r25	; 0x06
    294a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    294c:	8d 81       	ldd	r24, Y+5	; 0x05
    294e:	9e 81       	ldd	r25, Y+6	; 0x06
    2950:	00 97       	sbiw	r24, 0x00	; 0
    2952:	69 f7       	brne	.-38     	; 0x292e <LCD_sendCommand+0x37c>
    2954:	14 c0       	rjmp	.+40     	; 0x297e <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2956:	6f 81       	ldd	r22, Y+7	; 0x07
    2958:	78 85       	ldd	r23, Y+8	; 0x08
    295a:	89 85       	ldd	r24, Y+9	; 0x09
    295c:	9a 85       	ldd	r25, Y+10	; 0x0a
    295e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2962:	dc 01       	movw	r26, r24
    2964:	cb 01       	movw	r24, r22
    2966:	9e 83       	std	Y+6, r25	; 0x06
    2968:	8d 83       	std	Y+5, r24	; 0x05
    296a:	8d 81       	ldd	r24, Y+5	; 0x05
    296c:	9e 81       	ldd	r25, Y+6	; 0x06
    296e:	9a 83       	std	Y+2, r25	; 0x02
    2970:	89 83       	std	Y+1, r24	; 0x01
    2972:	89 81       	ldd	r24, Y+1	; 0x01
    2974:	9a 81       	ldd	r25, Y+2	; 0x02
    2976:	01 97       	sbiw	r24, 0x01	; 1
    2978:	f1 f7       	brne	.-4      	; 0x2976 <LCD_sendCommand+0x3c4>
    297a:	9a 83       	std	Y+2, r25	; 0x02
    297c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    297e:	e9 96       	adiw	r28, 0x39	; 57
    2980:	0f b6       	in	r0, 0x3f	; 63
    2982:	f8 94       	cli
    2984:	de bf       	out	0x3e, r29	; 62
    2986:	0f be       	out	0x3f, r0	; 63
    2988:	cd bf       	out	0x3d, r28	; 61
    298a:	cf 91       	pop	r28
    298c:	df 91       	pop	r29
    298e:	08 95       	ret

00002990 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2990:	df 93       	push	r29
    2992:	cf 93       	push	r28
    2994:	cd b7       	in	r28, 0x3d	; 61
    2996:	de b7       	in	r29, 0x3e	; 62
    2998:	e9 97       	sbiw	r28, 0x39	; 57
    299a:	0f b6       	in	r0, 0x3f	; 63
    299c:	f8 94       	cli
    299e:	de bf       	out	0x3e, r29	; 62
    29a0:	0f be       	out	0x3f, r0	; 63
    29a2:	cd bf       	out	0x3d, r28	; 61
    29a4:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    29a6:	81 e0       	ldi	r24, 0x01	; 1
    29a8:	61 e0       	ldi	r22, 0x01	; 1
    29aa:	41 e0       	ldi	r20, 0x01	; 1
    29ac:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <GPIO_writePin>
    29b0:	80 e0       	ldi	r24, 0x00	; 0
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	a0 e8       	ldi	r26, 0x80	; 128
    29b6:	bf e3       	ldi	r27, 0x3F	; 63
    29b8:	8d ab       	std	Y+53, r24	; 0x35
    29ba:	9e ab       	std	Y+54, r25	; 0x36
    29bc:	af ab       	std	Y+55, r26	; 0x37
    29be:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29c0:	6d a9       	ldd	r22, Y+53	; 0x35
    29c2:	7e a9       	ldd	r23, Y+54	; 0x36
    29c4:	8f a9       	ldd	r24, Y+55	; 0x37
    29c6:	98 ad       	ldd	r25, Y+56	; 0x38
    29c8:	20 e0       	ldi	r18, 0x00	; 0
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	4a ef       	ldi	r20, 0xFA	; 250
    29ce:	54 e4       	ldi	r21, 0x44	; 68
    29d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d4:	dc 01       	movw	r26, r24
    29d6:	cb 01       	movw	r24, r22
    29d8:	89 ab       	std	Y+49, r24	; 0x31
    29da:	9a ab       	std	Y+50, r25	; 0x32
    29dc:	ab ab       	std	Y+51, r26	; 0x33
    29de:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    29e0:	69 a9       	ldd	r22, Y+49	; 0x31
    29e2:	7a a9       	ldd	r23, Y+50	; 0x32
    29e4:	8b a9       	ldd	r24, Y+51	; 0x33
    29e6:	9c a9       	ldd	r25, Y+52	; 0x34
    29e8:	20 e0       	ldi	r18, 0x00	; 0
    29ea:	30 e0       	ldi	r19, 0x00	; 0
    29ec:	40 e8       	ldi	r20, 0x80	; 128
    29ee:	5f e3       	ldi	r21, 0x3F	; 63
    29f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29f4:	88 23       	and	r24, r24
    29f6:	2c f4       	brge	.+10     	; 0x2a02 <LCD_displayCharacter+0x72>
		__ticks = 1;
    29f8:	81 e0       	ldi	r24, 0x01	; 1
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	98 ab       	std	Y+48, r25	; 0x30
    29fe:	8f a7       	std	Y+47, r24	; 0x2f
    2a00:	3f c0       	rjmp	.+126    	; 0x2a80 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2a02:	69 a9       	ldd	r22, Y+49	; 0x31
    2a04:	7a a9       	ldd	r23, Y+50	; 0x32
    2a06:	8b a9       	ldd	r24, Y+51	; 0x33
    2a08:	9c a9       	ldd	r25, Y+52	; 0x34
    2a0a:	20 e0       	ldi	r18, 0x00	; 0
    2a0c:	3f ef       	ldi	r19, 0xFF	; 255
    2a0e:	4f e7       	ldi	r20, 0x7F	; 127
    2a10:	57 e4       	ldi	r21, 0x47	; 71
    2a12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a16:	18 16       	cp	r1, r24
    2a18:	4c f5       	brge	.+82     	; 0x2a6c <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a1a:	6d a9       	ldd	r22, Y+53	; 0x35
    2a1c:	7e a9       	ldd	r23, Y+54	; 0x36
    2a1e:	8f a9       	ldd	r24, Y+55	; 0x37
    2a20:	98 ad       	ldd	r25, Y+56	; 0x38
    2a22:	20 e0       	ldi	r18, 0x00	; 0
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	40 e2       	ldi	r20, 0x20	; 32
    2a28:	51 e4       	ldi	r21, 0x41	; 65
    2a2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a2e:	dc 01       	movw	r26, r24
    2a30:	cb 01       	movw	r24, r22
    2a32:	bc 01       	movw	r22, r24
    2a34:	cd 01       	movw	r24, r26
    2a36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a3a:	dc 01       	movw	r26, r24
    2a3c:	cb 01       	movw	r24, r22
    2a3e:	98 ab       	std	Y+48, r25	; 0x30
    2a40:	8f a7       	std	Y+47, r24	; 0x2f
    2a42:	0f c0       	rjmp	.+30     	; 0x2a62 <LCD_displayCharacter+0xd2>
    2a44:	88 ec       	ldi	r24, 0xC8	; 200
    2a46:	90 e0       	ldi	r25, 0x00	; 0
    2a48:	9e a7       	std	Y+46, r25	; 0x2e
    2a4a:	8d a7       	std	Y+45, r24	; 0x2d
    2a4c:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a4e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a50:	01 97       	sbiw	r24, 0x01	; 1
    2a52:	f1 f7       	brne	.-4      	; 0x2a50 <LCD_displayCharacter+0xc0>
    2a54:	9e a7       	std	Y+46, r25	; 0x2e
    2a56:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a58:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a5a:	98 a9       	ldd	r25, Y+48	; 0x30
    2a5c:	01 97       	sbiw	r24, 0x01	; 1
    2a5e:	98 ab       	std	Y+48, r25	; 0x30
    2a60:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a62:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a64:	98 a9       	ldd	r25, Y+48	; 0x30
    2a66:	00 97       	sbiw	r24, 0x00	; 0
    2a68:	69 f7       	brne	.-38     	; 0x2a44 <LCD_displayCharacter+0xb4>
    2a6a:	14 c0       	rjmp	.+40     	; 0x2a94 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a6c:	69 a9       	ldd	r22, Y+49	; 0x31
    2a6e:	7a a9       	ldd	r23, Y+50	; 0x32
    2a70:	8b a9       	ldd	r24, Y+51	; 0x33
    2a72:	9c a9       	ldd	r25, Y+52	; 0x34
    2a74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a78:	dc 01       	movw	r26, r24
    2a7a:	cb 01       	movw	r24, r22
    2a7c:	98 ab       	std	Y+48, r25	; 0x30
    2a7e:	8f a7       	std	Y+47, r24	; 0x2f
    2a80:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a82:	98 a9       	ldd	r25, Y+48	; 0x30
    2a84:	9c a7       	std	Y+44, r25	; 0x2c
    2a86:	8b a7       	std	Y+43, r24	; 0x2b
    2a88:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a8a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a8c:	01 97       	sbiw	r24, 0x01	; 1
    2a8e:	f1 f7       	brne	.-4      	; 0x2a8c <LCD_displayCharacter+0xfc>
    2a90:	9c a7       	std	Y+44, r25	; 0x2c
    2a92:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2a94:	81 e0       	ldi	r24, 0x01	; 1
    2a96:	60 e0       	ldi	r22, 0x00	; 0
    2a98:	41 e0       	ldi	r20, 0x01	; 1
    2a9a:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <GPIO_writePin>
    2a9e:	80 e0       	ldi	r24, 0x00	; 0
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	a0 e8       	ldi	r26, 0x80	; 128
    2aa4:	bf e3       	ldi	r27, 0x3F	; 63
    2aa6:	8f a3       	std	Y+39, r24	; 0x27
    2aa8:	98 a7       	std	Y+40, r25	; 0x28
    2aaa:	a9 a7       	std	Y+41, r26	; 0x29
    2aac:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aae:	6f a1       	ldd	r22, Y+39	; 0x27
    2ab0:	78 a5       	ldd	r23, Y+40	; 0x28
    2ab2:	89 a5       	ldd	r24, Y+41	; 0x29
    2ab4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ab6:	20 e0       	ldi	r18, 0x00	; 0
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	4a ef       	ldi	r20, 0xFA	; 250
    2abc:	54 e4       	ldi	r21, 0x44	; 68
    2abe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac2:	dc 01       	movw	r26, r24
    2ac4:	cb 01       	movw	r24, r22
    2ac6:	8b a3       	std	Y+35, r24	; 0x23
    2ac8:	9c a3       	std	Y+36, r25	; 0x24
    2aca:	ad a3       	std	Y+37, r26	; 0x25
    2acc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2ace:	6b a1       	ldd	r22, Y+35	; 0x23
    2ad0:	7c a1       	ldd	r23, Y+36	; 0x24
    2ad2:	8d a1       	ldd	r24, Y+37	; 0x25
    2ad4:	9e a1       	ldd	r25, Y+38	; 0x26
    2ad6:	20 e0       	ldi	r18, 0x00	; 0
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	40 e8       	ldi	r20, 0x80	; 128
    2adc:	5f e3       	ldi	r21, 0x3F	; 63
    2ade:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ae2:	88 23       	and	r24, r24
    2ae4:	2c f4       	brge	.+10     	; 0x2af0 <LCD_displayCharacter+0x160>
		__ticks = 1;
    2ae6:	81 e0       	ldi	r24, 0x01	; 1
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	9a a3       	std	Y+34, r25	; 0x22
    2aec:	89 a3       	std	Y+33, r24	; 0x21
    2aee:	3f c0       	rjmp	.+126    	; 0x2b6e <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2af0:	6b a1       	ldd	r22, Y+35	; 0x23
    2af2:	7c a1       	ldd	r23, Y+36	; 0x24
    2af4:	8d a1       	ldd	r24, Y+37	; 0x25
    2af6:	9e a1       	ldd	r25, Y+38	; 0x26
    2af8:	20 e0       	ldi	r18, 0x00	; 0
    2afa:	3f ef       	ldi	r19, 0xFF	; 255
    2afc:	4f e7       	ldi	r20, 0x7F	; 127
    2afe:	57 e4       	ldi	r21, 0x47	; 71
    2b00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b04:	18 16       	cp	r1, r24
    2b06:	4c f5       	brge	.+82     	; 0x2b5a <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b08:	6f a1       	ldd	r22, Y+39	; 0x27
    2b0a:	78 a5       	ldd	r23, Y+40	; 0x28
    2b0c:	89 a5       	ldd	r24, Y+41	; 0x29
    2b0e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b10:	20 e0       	ldi	r18, 0x00	; 0
    2b12:	30 e0       	ldi	r19, 0x00	; 0
    2b14:	40 e2       	ldi	r20, 0x20	; 32
    2b16:	51 e4       	ldi	r21, 0x41	; 65
    2b18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b1c:	dc 01       	movw	r26, r24
    2b1e:	cb 01       	movw	r24, r22
    2b20:	bc 01       	movw	r22, r24
    2b22:	cd 01       	movw	r24, r26
    2b24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b28:	dc 01       	movw	r26, r24
    2b2a:	cb 01       	movw	r24, r22
    2b2c:	9a a3       	std	Y+34, r25	; 0x22
    2b2e:	89 a3       	std	Y+33, r24	; 0x21
    2b30:	0f c0       	rjmp	.+30     	; 0x2b50 <LCD_displayCharacter+0x1c0>
    2b32:	88 ec       	ldi	r24, 0xC8	; 200
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	98 a3       	std	Y+32, r25	; 0x20
    2b38:	8f 8f       	std	Y+31, r24	; 0x1f
    2b3a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b3c:	98 a1       	ldd	r25, Y+32	; 0x20
    2b3e:	01 97       	sbiw	r24, 0x01	; 1
    2b40:	f1 f7       	brne	.-4      	; 0x2b3e <LCD_displayCharacter+0x1ae>
    2b42:	98 a3       	std	Y+32, r25	; 0x20
    2b44:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b46:	89 a1       	ldd	r24, Y+33	; 0x21
    2b48:	9a a1       	ldd	r25, Y+34	; 0x22
    2b4a:	01 97       	sbiw	r24, 0x01	; 1
    2b4c:	9a a3       	std	Y+34, r25	; 0x22
    2b4e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b50:	89 a1       	ldd	r24, Y+33	; 0x21
    2b52:	9a a1       	ldd	r25, Y+34	; 0x22
    2b54:	00 97       	sbiw	r24, 0x00	; 0
    2b56:	69 f7       	brne	.-38     	; 0x2b32 <LCD_displayCharacter+0x1a2>
    2b58:	14 c0       	rjmp	.+40     	; 0x2b82 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b5a:	6b a1       	ldd	r22, Y+35	; 0x23
    2b5c:	7c a1       	ldd	r23, Y+36	; 0x24
    2b5e:	8d a1       	ldd	r24, Y+37	; 0x25
    2b60:	9e a1       	ldd	r25, Y+38	; 0x26
    2b62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b66:	dc 01       	movw	r26, r24
    2b68:	cb 01       	movw	r24, r22
    2b6a:	9a a3       	std	Y+34, r25	; 0x22
    2b6c:	89 a3       	std	Y+33, r24	; 0x21
    2b6e:	89 a1       	ldd	r24, Y+33	; 0x21
    2b70:	9a a1       	ldd	r25, Y+34	; 0x22
    2b72:	9e 8f       	std	Y+30, r25	; 0x1e
    2b74:	8d 8f       	std	Y+29, r24	; 0x1d
    2b76:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b78:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b7a:	01 97       	sbiw	r24, 0x01	; 1
    2b7c:	f1 f7       	brne	.-4      	; 0x2b7a <LCD_displayCharacter+0x1ea>
    2b7e:	9e 8f       	std	Y+30, r25	; 0x1e
    2b80:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2b82:	80 e0       	ldi	r24, 0x00	; 0
    2b84:	69 ad       	ldd	r22, Y+57	; 0x39
    2b86:	0e 94 bc 10 	call	0x2178	; 0x2178 <GPIO_writePort>
    2b8a:	80 e0       	ldi	r24, 0x00	; 0
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	a0 e8       	ldi	r26, 0x80	; 128
    2b90:	bf e3       	ldi	r27, 0x3F	; 63
    2b92:	89 8f       	std	Y+25, r24	; 0x19
    2b94:	9a 8f       	std	Y+26, r25	; 0x1a
    2b96:	ab 8f       	std	Y+27, r26	; 0x1b
    2b98:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b9a:	69 8d       	ldd	r22, Y+25	; 0x19
    2b9c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ba0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ba2:	20 e0       	ldi	r18, 0x00	; 0
    2ba4:	30 e0       	ldi	r19, 0x00	; 0
    2ba6:	4a ef       	ldi	r20, 0xFA	; 250
    2ba8:	54 e4       	ldi	r21, 0x44	; 68
    2baa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bae:	dc 01       	movw	r26, r24
    2bb0:	cb 01       	movw	r24, r22
    2bb2:	8d 8b       	std	Y+21, r24	; 0x15
    2bb4:	9e 8b       	std	Y+22, r25	; 0x16
    2bb6:	af 8b       	std	Y+23, r26	; 0x17
    2bb8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2bba:	6d 89       	ldd	r22, Y+21	; 0x15
    2bbc:	7e 89       	ldd	r23, Y+22	; 0x16
    2bbe:	8f 89       	ldd	r24, Y+23	; 0x17
    2bc0:	98 8d       	ldd	r25, Y+24	; 0x18
    2bc2:	20 e0       	ldi	r18, 0x00	; 0
    2bc4:	30 e0       	ldi	r19, 0x00	; 0
    2bc6:	40 e8       	ldi	r20, 0x80	; 128
    2bc8:	5f e3       	ldi	r21, 0x3F	; 63
    2bca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bce:	88 23       	and	r24, r24
    2bd0:	2c f4       	brge	.+10     	; 0x2bdc <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2bd2:	81 e0       	ldi	r24, 0x01	; 1
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	9c 8b       	std	Y+20, r25	; 0x14
    2bd8:	8b 8b       	std	Y+19, r24	; 0x13
    2bda:	3f c0       	rjmp	.+126    	; 0x2c5a <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2bdc:	6d 89       	ldd	r22, Y+21	; 0x15
    2bde:	7e 89       	ldd	r23, Y+22	; 0x16
    2be0:	8f 89       	ldd	r24, Y+23	; 0x17
    2be2:	98 8d       	ldd	r25, Y+24	; 0x18
    2be4:	20 e0       	ldi	r18, 0x00	; 0
    2be6:	3f ef       	ldi	r19, 0xFF	; 255
    2be8:	4f e7       	ldi	r20, 0x7F	; 127
    2bea:	57 e4       	ldi	r21, 0x47	; 71
    2bec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bf0:	18 16       	cp	r1, r24
    2bf2:	4c f5       	brge	.+82     	; 0x2c46 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bf4:	69 8d       	ldd	r22, Y+25	; 0x19
    2bf6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bf8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bfa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bfc:	20 e0       	ldi	r18, 0x00	; 0
    2bfe:	30 e0       	ldi	r19, 0x00	; 0
    2c00:	40 e2       	ldi	r20, 0x20	; 32
    2c02:	51 e4       	ldi	r21, 0x41	; 65
    2c04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c08:	dc 01       	movw	r26, r24
    2c0a:	cb 01       	movw	r24, r22
    2c0c:	bc 01       	movw	r22, r24
    2c0e:	cd 01       	movw	r24, r26
    2c10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c14:	dc 01       	movw	r26, r24
    2c16:	cb 01       	movw	r24, r22
    2c18:	9c 8b       	std	Y+20, r25	; 0x14
    2c1a:	8b 8b       	std	Y+19, r24	; 0x13
    2c1c:	0f c0       	rjmp	.+30     	; 0x2c3c <LCD_displayCharacter+0x2ac>
    2c1e:	88 ec       	ldi	r24, 0xC8	; 200
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	9a 8b       	std	Y+18, r25	; 0x12
    2c24:	89 8b       	std	Y+17, r24	; 0x11
    2c26:	89 89       	ldd	r24, Y+17	; 0x11
    2c28:	9a 89       	ldd	r25, Y+18	; 0x12
    2c2a:	01 97       	sbiw	r24, 0x01	; 1
    2c2c:	f1 f7       	brne	.-4      	; 0x2c2a <LCD_displayCharacter+0x29a>
    2c2e:	9a 8b       	std	Y+18, r25	; 0x12
    2c30:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c32:	8b 89       	ldd	r24, Y+19	; 0x13
    2c34:	9c 89       	ldd	r25, Y+20	; 0x14
    2c36:	01 97       	sbiw	r24, 0x01	; 1
    2c38:	9c 8b       	std	Y+20, r25	; 0x14
    2c3a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c3c:	8b 89       	ldd	r24, Y+19	; 0x13
    2c3e:	9c 89       	ldd	r25, Y+20	; 0x14
    2c40:	00 97       	sbiw	r24, 0x00	; 0
    2c42:	69 f7       	brne	.-38     	; 0x2c1e <LCD_displayCharacter+0x28e>
    2c44:	14 c0       	rjmp	.+40     	; 0x2c6e <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c46:	6d 89       	ldd	r22, Y+21	; 0x15
    2c48:	7e 89       	ldd	r23, Y+22	; 0x16
    2c4a:	8f 89       	ldd	r24, Y+23	; 0x17
    2c4c:	98 8d       	ldd	r25, Y+24	; 0x18
    2c4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c52:	dc 01       	movw	r26, r24
    2c54:	cb 01       	movw	r24, r22
    2c56:	9c 8b       	std	Y+20, r25	; 0x14
    2c58:	8b 8b       	std	Y+19, r24	; 0x13
    2c5a:	8b 89       	ldd	r24, Y+19	; 0x13
    2c5c:	9c 89       	ldd	r25, Y+20	; 0x14
    2c5e:	98 8b       	std	Y+16, r25	; 0x10
    2c60:	8f 87       	std	Y+15, r24	; 0x0f
    2c62:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c64:	98 89       	ldd	r25, Y+16	; 0x10
    2c66:	01 97       	sbiw	r24, 0x01	; 1
    2c68:	f1 f7       	brne	.-4      	; 0x2c66 <LCD_displayCharacter+0x2d6>
    2c6a:	98 8b       	std	Y+16, r25	; 0x10
    2c6c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2c6e:	81 e0       	ldi	r24, 0x01	; 1
    2c70:	60 e0       	ldi	r22, 0x00	; 0
    2c72:	40 e0       	ldi	r20, 0x00	; 0
    2c74:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <GPIO_writePin>
    2c78:	80 e0       	ldi	r24, 0x00	; 0
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	a0 e8       	ldi	r26, 0x80	; 128
    2c7e:	bf e3       	ldi	r27, 0x3F	; 63
    2c80:	8b 87       	std	Y+11, r24	; 0x0b
    2c82:	9c 87       	std	Y+12, r25	; 0x0c
    2c84:	ad 87       	std	Y+13, r26	; 0x0d
    2c86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c88:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c90:	20 e0       	ldi	r18, 0x00	; 0
    2c92:	30 e0       	ldi	r19, 0x00	; 0
    2c94:	4a ef       	ldi	r20, 0xFA	; 250
    2c96:	54 e4       	ldi	r21, 0x44	; 68
    2c98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c9c:	dc 01       	movw	r26, r24
    2c9e:	cb 01       	movw	r24, r22
    2ca0:	8f 83       	std	Y+7, r24	; 0x07
    2ca2:	98 87       	std	Y+8, r25	; 0x08
    2ca4:	a9 87       	std	Y+9, r26	; 0x09
    2ca6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ca8:	6f 81       	ldd	r22, Y+7	; 0x07
    2caa:	78 85       	ldd	r23, Y+8	; 0x08
    2cac:	89 85       	ldd	r24, Y+9	; 0x09
    2cae:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cb0:	20 e0       	ldi	r18, 0x00	; 0
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	40 e8       	ldi	r20, 0x80	; 128
    2cb6:	5f e3       	ldi	r21, 0x3F	; 63
    2cb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cbc:	88 23       	and	r24, r24
    2cbe:	2c f4       	brge	.+10     	; 0x2cca <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2cc0:	81 e0       	ldi	r24, 0x01	; 1
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	9e 83       	std	Y+6, r25	; 0x06
    2cc6:	8d 83       	std	Y+5, r24	; 0x05
    2cc8:	3f c0       	rjmp	.+126    	; 0x2d48 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2cca:	6f 81       	ldd	r22, Y+7	; 0x07
    2ccc:	78 85       	ldd	r23, Y+8	; 0x08
    2cce:	89 85       	ldd	r24, Y+9	; 0x09
    2cd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cd2:	20 e0       	ldi	r18, 0x00	; 0
    2cd4:	3f ef       	ldi	r19, 0xFF	; 255
    2cd6:	4f e7       	ldi	r20, 0x7F	; 127
    2cd8:	57 e4       	ldi	r21, 0x47	; 71
    2cda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cde:	18 16       	cp	r1, r24
    2ce0:	4c f5       	brge	.+82     	; 0x2d34 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ce2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ce4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ce6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ce8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cea:	20 e0       	ldi	r18, 0x00	; 0
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	40 e2       	ldi	r20, 0x20	; 32
    2cf0:	51 e4       	ldi	r21, 0x41	; 65
    2cf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf6:	dc 01       	movw	r26, r24
    2cf8:	cb 01       	movw	r24, r22
    2cfa:	bc 01       	movw	r22, r24
    2cfc:	cd 01       	movw	r24, r26
    2cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d02:	dc 01       	movw	r26, r24
    2d04:	cb 01       	movw	r24, r22
    2d06:	9e 83       	std	Y+6, r25	; 0x06
    2d08:	8d 83       	std	Y+5, r24	; 0x05
    2d0a:	0f c0       	rjmp	.+30     	; 0x2d2a <LCD_displayCharacter+0x39a>
    2d0c:	88 ec       	ldi	r24, 0xC8	; 200
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	9c 83       	std	Y+4, r25	; 0x04
    2d12:	8b 83       	std	Y+3, r24	; 0x03
    2d14:	8b 81       	ldd	r24, Y+3	; 0x03
    2d16:	9c 81       	ldd	r25, Y+4	; 0x04
    2d18:	01 97       	sbiw	r24, 0x01	; 1
    2d1a:	f1 f7       	brne	.-4      	; 0x2d18 <LCD_displayCharacter+0x388>
    2d1c:	9c 83       	std	Y+4, r25	; 0x04
    2d1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d20:	8d 81       	ldd	r24, Y+5	; 0x05
    2d22:	9e 81       	ldd	r25, Y+6	; 0x06
    2d24:	01 97       	sbiw	r24, 0x01	; 1
    2d26:	9e 83       	std	Y+6, r25	; 0x06
    2d28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d2a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d2c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d2e:	00 97       	sbiw	r24, 0x00	; 0
    2d30:	69 f7       	brne	.-38     	; 0x2d0c <LCD_displayCharacter+0x37c>
    2d32:	14 c0       	rjmp	.+40     	; 0x2d5c <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d34:	6f 81       	ldd	r22, Y+7	; 0x07
    2d36:	78 85       	ldd	r23, Y+8	; 0x08
    2d38:	89 85       	ldd	r24, Y+9	; 0x09
    2d3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d40:	dc 01       	movw	r26, r24
    2d42:	cb 01       	movw	r24, r22
    2d44:	9e 83       	std	Y+6, r25	; 0x06
    2d46:	8d 83       	std	Y+5, r24	; 0x05
    2d48:	8d 81       	ldd	r24, Y+5	; 0x05
    2d4a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d4c:	9a 83       	std	Y+2, r25	; 0x02
    2d4e:	89 83       	std	Y+1, r24	; 0x01
    2d50:	89 81       	ldd	r24, Y+1	; 0x01
    2d52:	9a 81       	ldd	r25, Y+2	; 0x02
    2d54:	01 97       	sbiw	r24, 0x01	; 1
    2d56:	f1 f7       	brne	.-4      	; 0x2d54 <LCD_displayCharacter+0x3c4>
    2d58:	9a 83       	std	Y+2, r25	; 0x02
    2d5a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2d5c:	e9 96       	adiw	r28, 0x39	; 57
    2d5e:	0f b6       	in	r0, 0x3f	; 63
    2d60:	f8 94       	cli
    2d62:	de bf       	out	0x3e, r29	; 62
    2d64:	0f be       	out	0x3f, r0	; 63
    2d66:	cd bf       	out	0x3d, r28	; 61
    2d68:	cf 91       	pop	r28
    2d6a:	df 91       	pop	r29
    2d6c:	08 95       	ret

00002d6e <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2d6e:	df 93       	push	r29
    2d70:	cf 93       	push	r28
    2d72:	00 d0       	rcall	.+0      	; 0x2d74 <LCD_displayString+0x6>
    2d74:	0f 92       	push	r0
    2d76:	cd b7       	in	r28, 0x3d	; 61
    2d78:	de b7       	in	r29, 0x3e	; 62
    2d7a:	9b 83       	std	Y+3, r25	; 0x03
    2d7c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2d7e:	19 82       	std	Y+1, r1	; 0x01
    2d80:	0e c0       	rjmp	.+28     	; 0x2d9e <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2d82:	89 81       	ldd	r24, Y+1	; 0x01
    2d84:	28 2f       	mov	r18, r24
    2d86:	30 e0       	ldi	r19, 0x00	; 0
    2d88:	8a 81       	ldd	r24, Y+2	; 0x02
    2d8a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d8c:	fc 01       	movw	r30, r24
    2d8e:	e2 0f       	add	r30, r18
    2d90:	f3 1f       	adc	r31, r19
    2d92:	80 81       	ld	r24, Z
    2d94:	0e 94 c8 14 	call	0x2990	; 0x2990 <LCD_displayCharacter>
		i++;
    2d98:	89 81       	ldd	r24, Y+1	; 0x01
    2d9a:	8f 5f       	subi	r24, 0xFF	; 255
    2d9c:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2d9e:	89 81       	ldd	r24, Y+1	; 0x01
    2da0:	28 2f       	mov	r18, r24
    2da2:	30 e0       	ldi	r19, 0x00	; 0
    2da4:	8a 81       	ldd	r24, Y+2	; 0x02
    2da6:	9b 81       	ldd	r25, Y+3	; 0x03
    2da8:	fc 01       	movw	r30, r24
    2daa:	e2 0f       	add	r30, r18
    2dac:	f3 1f       	adc	r31, r19
    2dae:	80 81       	ld	r24, Z
    2db0:	88 23       	and	r24, r24
    2db2:	39 f7       	brne	.-50     	; 0x2d82 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2db4:	0f 90       	pop	r0
    2db6:	0f 90       	pop	r0
    2db8:	0f 90       	pop	r0
    2dba:	cf 91       	pop	r28
    2dbc:	df 91       	pop	r29
    2dbe:	08 95       	ret

00002dc0 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2dc0:	df 93       	push	r29
    2dc2:	cf 93       	push	r28
    2dc4:	00 d0       	rcall	.+0      	; 0x2dc6 <LCD_moveCursor+0x6>
    2dc6:	00 d0       	rcall	.+0      	; 0x2dc8 <LCD_moveCursor+0x8>
    2dc8:	0f 92       	push	r0
    2dca:	cd b7       	in	r28, 0x3d	; 61
    2dcc:	de b7       	in	r29, 0x3e	; 62
    2dce:	8a 83       	std	Y+2, r24	; 0x02
    2dd0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd4:	28 2f       	mov	r18, r24
    2dd6:	30 e0       	ldi	r19, 0x00	; 0
    2dd8:	3d 83       	std	Y+5, r19	; 0x05
    2dda:	2c 83       	std	Y+4, r18	; 0x04
    2ddc:	8c 81       	ldd	r24, Y+4	; 0x04
    2dde:	9d 81       	ldd	r25, Y+5	; 0x05
    2de0:	81 30       	cpi	r24, 0x01	; 1
    2de2:	91 05       	cpc	r25, r1
    2de4:	c1 f0       	breq	.+48     	; 0x2e16 <LCD_moveCursor+0x56>
    2de6:	2c 81       	ldd	r18, Y+4	; 0x04
    2de8:	3d 81       	ldd	r19, Y+5	; 0x05
    2dea:	22 30       	cpi	r18, 0x02	; 2
    2dec:	31 05       	cpc	r19, r1
    2dee:	2c f4       	brge	.+10     	; 0x2dfa <LCD_moveCursor+0x3a>
    2df0:	8c 81       	ldd	r24, Y+4	; 0x04
    2df2:	9d 81       	ldd	r25, Y+5	; 0x05
    2df4:	00 97       	sbiw	r24, 0x00	; 0
    2df6:	61 f0       	breq	.+24     	; 0x2e10 <LCD_moveCursor+0x50>
    2df8:	19 c0       	rjmp	.+50     	; 0x2e2c <LCD_moveCursor+0x6c>
    2dfa:	2c 81       	ldd	r18, Y+4	; 0x04
    2dfc:	3d 81       	ldd	r19, Y+5	; 0x05
    2dfe:	22 30       	cpi	r18, 0x02	; 2
    2e00:	31 05       	cpc	r19, r1
    2e02:	69 f0       	breq	.+26     	; 0x2e1e <LCD_moveCursor+0x5e>
    2e04:	8c 81       	ldd	r24, Y+4	; 0x04
    2e06:	9d 81       	ldd	r25, Y+5	; 0x05
    2e08:	83 30       	cpi	r24, 0x03	; 3
    2e0a:	91 05       	cpc	r25, r1
    2e0c:	61 f0       	breq	.+24     	; 0x2e26 <LCD_moveCursor+0x66>
    2e0e:	0e c0       	rjmp	.+28     	; 0x2e2c <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2e10:	8b 81       	ldd	r24, Y+3	; 0x03
    2e12:	89 83       	std	Y+1, r24	; 0x01
    2e14:	0b c0       	rjmp	.+22     	; 0x2e2c <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2e16:	8b 81       	ldd	r24, Y+3	; 0x03
    2e18:	80 5c       	subi	r24, 0xC0	; 192
    2e1a:	89 83       	std	Y+1, r24	; 0x01
    2e1c:	07 c0       	rjmp	.+14     	; 0x2e2c <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e20:	80 5f       	subi	r24, 0xF0	; 240
    2e22:	89 83       	std	Y+1, r24	; 0x01
    2e24:	03 c0       	rjmp	.+6      	; 0x2e2c <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2e26:	8b 81       	ldd	r24, Y+3	; 0x03
    2e28:	80 5b       	subi	r24, 0xB0	; 176
    2e2a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2e2c:	89 81       	ldd	r24, Y+1	; 0x01
    2e2e:	80 68       	ori	r24, 0x80	; 128
    2e30:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <LCD_sendCommand>
}
    2e34:	0f 90       	pop	r0
    2e36:	0f 90       	pop	r0
    2e38:	0f 90       	pop	r0
    2e3a:	0f 90       	pop	r0
    2e3c:	0f 90       	pop	r0
    2e3e:	cf 91       	pop	r28
    2e40:	df 91       	pop	r29
    2e42:	08 95       	ret

00002e44 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2e44:	df 93       	push	r29
    2e46:	cf 93       	push	r28
    2e48:	00 d0       	rcall	.+0      	; 0x2e4a <LCD_displayStringRowColumn+0x6>
    2e4a:	00 d0       	rcall	.+0      	; 0x2e4c <LCD_displayStringRowColumn+0x8>
    2e4c:	cd b7       	in	r28, 0x3d	; 61
    2e4e:	de b7       	in	r29, 0x3e	; 62
    2e50:	89 83       	std	Y+1, r24	; 0x01
    2e52:	6a 83       	std	Y+2, r22	; 0x02
    2e54:	5c 83       	std	Y+4, r21	; 0x04
    2e56:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2e58:	89 81       	ldd	r24, Y+1	; 0x01
    2e5a:	6a 81       	ldd	r22, Y+2	; 0x02
    2e5c:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2e60:	8b 81       	ldd	r24, Y+3	; 0x03
    2e62:	9c 81       	ldd	r25, Y+4	; 0x04
    2e64:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <LCD_displayString>
}
    2e68:	0f 90       	pop	r0
    2e6a:	0f 90       	pop	r0
    2e6c:	0f 90       	pop	r0
    2e6e:	0f 90       	pop	r0
    2e70:	cf 91       	pop	r28
    2e72:	df 91       	pop	r29
    2e74:	08 95       	ret

00002e76 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2e76:	df 93       	push	r29
    2e78:	cf 93       	push	r28
    2e7a:	cd b7       	in	r28, 0x3d	; 61
    2e7c:	de b7       	in	r29, 0x3e	; 62
    2e7e:	62 97       	sbiw	r28, 0x12	; 18
    2e80:	0f b6       	in	r0, 0x3f	; 63
    2e82:	f8 94       	cli
    2e84:	de bf       	out	0x3e, r29	; 62
    2e86:	0f be       	out	0x3f, r0	; 63
    2e88:	cd bf       	out	0x3d, r28	; 61
    2e8a:	9a 8b       	std	Y+18, r25	; 0x12
    2e8c:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2e8e:	89 89       	ldd	r24, Y+17	; 0x11
    2e90:	9a 89       	ldd	r25, Y+18	; 0x12
    2e92:	9e 01       	movw	r18, r28
    2e94:	2f 5f       	subi	r18, 0xFF	; 255
    2e96:	3f 4f       	sbci	r19, 0xFF	; 255
    2e98:	b9 01       	movw	r22, r18
    2e9a:	4a e0       	ldi	r20, 0x0A	; 10
    2e9c:	50 e0       	ldi	r21, 0x00	; 0
    2e9e:	0e 94 6d 1a 	call	0x34da	; 0x34da <itoa>
   LCD_displayString(buff); /* Display the string */
    2ea2:	ce 01       	movw	r24, r28
    2ea4:	01 96       	adiw	r24, 0x01	; 1
    2ea6:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <LCD_displayString>
}
    2eaa:	62 96       	adiw	r28, 0x12	; 18
    2eac:	0f b6       	in	r0, 0x3f	; 63
    2eae:	f8 94       	cli
    2eb0:	de bf       	out	0x3e, r29	; 62
    2eb2:	0f be       	out	0x3f, r0	; 63
    2eb4:	cd bf       	out	0x3d, r28	; 61
    2eb6:	cf 91       	pop	r28
    2eb8:	df 91       	pop	r29
    2eba:	08 95       	ret

00002ebc <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2ebc:	df 93       	push	r29
    2ebe:	cf 93       	push	r28
    2ec0:	cd b7       	in	r28, 0x3d	; 61
    2ec2:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2ec4:	81 e0       	ldi	r24, 0x01	; 1
    2ec6:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <LCD_sendCommand>
}
    2eca:	cf 91       	pop	r28
    2ecc:	df 91       	pop	r29
    2ece:	08 95       	ret

00002ed0 <__vector_7>:
static volatile  void(*callBack_ptr)(void) = NULL_PTR;


/* Interrupt Service Routine for timer1 compare mode */
ISR(TIMER1_COMPA_vect)
{
    2ed0:	1f 92       	push	r1
    2ed2:	0f 92       	push	r0
    2ed4:	0f b6       	in	r0, 0x3f	; 63
    2ed6:	0f 92       	push	r0
    2ed8:	11 24       	eor	r1, r1
    2eda:	2f 93       	push	r18
    2edc:	3f 93       	push	r19
    2ede:	4f 93       	push	r20
    2ee0:	5f 93       	push	r21
    2ee2:	6f 93       	push	r22
    2ee4:	7f 93       	push	r23
    2ee6:	8f 93       	push	r24
    2ee8:	9f 93       	push	r25
    2eea:	af 93       	push	r26
    2eec:	bf 93       	push	r27
    2eee:	ef 93       	push	r30
    2ef0:	ff 93       	push	r31
    2ef2:	df 93       	push	r29
    2ef4:	cf 93       	push	r28
    2ef6:	cd b7       	in	r28, 0x3d	; 61
    2ef8:	de b7       	in	r29, 0x3e	; 62
	if(callBack_ptr != NULL_PTR){
    2efa:	80 91 2d 01 	lds	r24, 0x012D
    2efe:	90 91 2e 01 	lds	r25, 0x012E
    2f02:	00 97       	sbiw	r24, 0x00	; 0
    2f04:	29 f0       	breq	.+10     	; 0x2f10 <__vector_7+0x40>
			(*callBack_ptr)();
    2f06:	e0 91 2d 01 	lds	r30, 0x012D
    2f0a:	f0 91 2e 01 	lds	r31, 0x012E
    2f0e:	09 95       	icall
		}
}
    2f10:	cf 91       	pop	r28
    2f12:	df 91       	pop	r29
    2f14:	ff 91       	pop	r31
    2f16:	ef 91       	pop	r30
    2f18:	bf 91       	pop	r27
    2f1a:	af 91       	pop	r26
    2f1c:	9f 91       	pop	r25
    2f1e:	8f 91       	pop	r24
    2f20:	7f 91       	pop	r23
    2f22:	6f 91       	pop	r22
    2f24:	5f 91       	pop	r21
    2f26:	4f 91       	pop	r20
    2f28:	3f 91       	pop	r19
    2f2a:	2f 91       	pop	r18
    2f2c:	0f 90       	pop	r0
    2f2e:	0f be       	out	0x3f, r0	; 63
    2f30:	0f 90       	pop	r0
    2f32:	1f 90       	pop	r1
    2f34:	18 95       	reti

00002f36 <__vector_9>:

/* Interrupt Service Routine for timer1 normal mode */
ISR(TIMER1_OVF_vect)
{
    2f36:	1f 92       	push	r1
    2f38:	0f 92       	push	r0
    2f3a:	0f b6       	in	r0, 0x3f	; 63
    2f3c:	0f 92       	push	r0
    2f3e:	11 24       	eor	r1, r1
    2f40:	2f 93       	push	r18
    2f42:	3f 93       	push	r19
    2f44:	4f 93       	push	r20
    2f46:	5f 93       	push	r21
    2f48:	6f 93       	push	r22
    2f4a:	7f 93       	push	r23
    2f4c:	8f 93       	push	r24
    2f4e:	9f 93       	push	r25
    2f50:	af 93       	push	r26
    2f52:	bf 93       	push	r27
    2f54:	ef 93       	push	r30
    2f56:	ff 93       	push	r31
    2f58:	df 93       	push	r29
    2f5a:	cf 93       	push	r28
    2f5c:	cd b7       	in	r28, 0x3d	; 61
    2f5e:	de b7       	in	r29, 0x3e	; 62
	if(callBack_ptr != NULL_PTR){
    2f60:	80 91 2d 01 	lds	r24, 0x012D
    2f64:	90 91 2e 01 	lds	r25, 0x012E
    2f68:	00 97       	sbiw	r24, 0x00	; 0
    2f6a:	29 f0       	breq	.+10     	; 0x2f76 <__vector_9+0x40>
				(*callBack_ptr)();
    2f6c:	e0 91 2d 01 	lds	r30, 0x012D
    2f70:	f0 91 2e 01 	lds	r31, 0x012E
    2f74:	09 95       	icall
			}
}
    2f76:	cf 91       	pop	r28
    2f78:	df 91       	pop	r29
    2f7a:	ff 91       	pop	r31
    2f7c:	ef 91       	pop	r30
    2f7e:	bf 91       	pop	r27
    2f80:	af 91       	pop	r26
    2f82:	9f 91       	pop	r25
    2f84:	8f 91       	pop	r24
    2f86:	7f 91       	pop	r23
    2f88:	6f 91       	pop	r22
    2f8a:	5f 91       	pop	r21
    2f8c:	4f 91       	pop	r20
    2f8e:	3f 91       	pop	r19
    2f90:	2f 91       	pop	r18
    2f92:	0f 90       	pop	r0
    2f94:	0f be       	out	0x3f, r0	; 63
    2f96:	0f 90       	pop	r0
    2f98:	1f 90       	pop	r1
    2f9a:	18 95       	reti

00002f9c <Timer1_init>:

/*
 * Description :
 * Function to initialize the Timer driver
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    2f9c:	df 93       	push	r29
    2f9e:	cf 93       	push	r28
    2fa0:	00 d0       	rcall	.+0      	; 0x2fa2 <Timer1_init+0x6>
    2fa2:	cd b7       	in	r28, 0x3d	; 61
    2fa4:	de b7       	in	r29, 0x3e	; 62
    2fa6:	9a 83       	std	Y+2, r25	; 0x02
    2fa8:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=Config_Ptr->initial_value;           /* Set timer1 initial count */
    2faa:	ac e4       	ldi	r26, 0x4C	; 76
    2fac:	b0 e0       	ldi	r27, 0x00	; 0
    2fae:	e9 81       	ldd	r30, Y+1	; 0x01
    2fb0:	fa 81       	ldd	r31, Y+2	; 0x02
    2fb2:	80 81       	ld	r24, Z
    2fb4:	91 81       	ldd	r25, Z+1	; 0x01
    2fb6:	11 96       	adiw	r26, 0x01	; 1
    2fb8:	9c 93       	st	X, r25
    2fba:	8e 93       	st	-X, r24
	OCR1A=Config_Ptr->compare_value;           /* Set the Compare value*/
    2fbc:	aa e4       	ldi	r26, 0x4A	; 74
    2fbe:	b0 e0       	ldi	r27, 0x00	; 0
    2fc0:	e9 81       	ldd	r30, Y+1	; 0x01
    2fc2:	fa 81       	ldd	r31, Y+2	; 0x02
    2fc4:	82 81       	ldd	r24, Z+2	; 0x02
    2fc6:	93 81       	ldd	r25, Z+3	; 0x03
    2fc8:	11 96       	adiw	r26, 0x01	; 1
    2fca:	9c 93       	st	X, r25
    2fcc:	8e 93       	st	-X, r24

	if((Config_Ptr->mode)==0){
    2fce:	e9 81       	ldd	r30, Y+1	; 0x01
    2fd0:	fa 81       	ldd	r31, Y+2	; 0x02
    2fd2:	85 81       	ldd	r24, Z+5	; 0x05
    2fd4:	88 23       	and	r24, r24
    2fd6:	41 f4       	brne	.+16     	; 0x2fe8 <Timer1_init+0x4c>
					/*normal mode is selected*/
			TIMSK |= (1<<TOIE1); /* Enable Timer1 normal-mode Interrupt */
    2fd8:	a9 e5       	ldi	r26, 0x59	; 89
    2fda:	b0 e0       	ldi	r27, 0x00	; 0
    2fdc:	e9 e5       	ldi	r30, 0x59	; 89
    2fde:	f0 e0       	ldi	r31, 0x00	; 0
    2fe0:	80 81       	ld	r24, Z
    2fe2:	84 60       	ori	r24, 0x04	; 4
    2fe4:	8c 93       	st	X, r24
    2fe6:	0c c0       	rjmp	.+24     	; 0x3000 <Timer1_init+0x64>
						}
			else if((Config_Ptr->mode)==4) {
    2fe8:	e9 81       	ldd	r30, Y+1	; 0x01
    2fea:	fa 81       	ldd	r31, Y+2	; 0x02
    2fec:	85 81       	ldd	r24, Z+5	; 0x05
    2fee:	84 30       	cpi	r24, 0x04	; 4
    2ff0:	39 f4       	brne	.+14     	; 0x3000 <Timer1_init+0x64>
				/*comare mode is selected*/
				TIMSK |= (1 << OCIE1A);  /* Enable Timer1 compare-mode Interrupt */
    2ff2:	a9 e5       	ldi	r26, 0x59	; 89
    2ff4:	b0 e0       	ldi	r27, 0x00	; 0
    2ff6:	e9 e5       	ldi	r30, 0x59	; 89
    2ff8:	f0 e0       	ldi	r31, 0x00	; 0
    2ffa:	80 81       	ld	r24, Z
    2ffc:	80 61       	ori	r24, 0x10	; 16
    2ffe:	8c 93       	st	X, r24

	/*
	 * FOC1A : It will be set when Timer1 Operate in non PWM Mode
	 * Set First 2-bits From Mode Member to Specify which Mode Timer1 Will Operate
	*/
	TCCR1A = (1<<FOC1A) | (1<<FOC1B) | ((TCCR1A & 0xFC) | (Config_Ptr->mode & 0x03));
    3000:	af e4       	ldi	r26, 0x4F	; 79
    3002:	b0 e0       	ldi	r27, 0x00	; 0
    3004:	ef e4       	ldi	r30, 0x4F	; 79
    3006:	f0 e0       	ldi	r31, 0x00	; 0
    3008:	80 81       	ld	r24, Z
    300a:	98 2f       	mov	r25, r24
    300c:	9c 7f       	andi	r25, 0xFC	; 252
    300e:	e9 81       	ldd	r30, Y+1	; 0x01
    3010:	fa 81       	ldd	r31, Y+2	; 0x02
    3012:	85 81       	ldd	r24, Z+5	; 0x05
    3014:	83 70       	andi	r24, 0x03	; 3
    3016:	89 2b       	or	r24, r25
    3018:	8c 60       	ori	r24, 0x0C	; 12
    301a:	8c 93       	st	X, r24

	/*
		 * insert the required clock value in the first three bits (CS10, CS11 and CS12) of TCCR1B Register
		 * Set Last 2-bits From Mode Member to Specify Which Mode Timer1 Will Operate
	 */
	TCCR1B = (TCCR1B & 0xF8) | ((Config_Ptr->prescaler)& 0x07) | ((TCCR1B & 0xE7) | ((Config_Ptr->mode & 0x0C)<<1));
    301c:	ae e4       	ldi	r26, 0x4E	; 78
    301e:	b0 e0       	ldi	r27, 0x00	; 0
    3020:	ee e4       	ldi	r30, 0x4E	; 78
    3022:	f0 e0       	ldi	r31, 0x00	; 0
    3024:	80 81       	ld	r24, Z
    3026:	98 2f       	mov	r25, r24
    3028:	98 7f       	andi	r25, 0xF8	; 248
    302a:	e9 81       	ldd	r30, Y+1	; 0x01
    302c:	fa 81       	ldd	r31, Y+2	; 0x02
    302e:	84 81       	ldd	r24, Z+4	; 0x04
    3030:	87 70       	andi	r24, 0x07	; 7
    3032:	39 2f       	mov	r19, r25
    3034:	38 2b       	or	r19, r24
    3036:	ee e4       	ldi	r30, 0x4E	; 78
    3038:	f0 e0       	ldi	r31, 0x00	; 0
    303a:	80 81       	ld	r24, Z
    303c:	28 2f       	mov	r18, r24
    303e:	27 7e       	andi	r18, 0xE7	; 231
    3040:	e9 81       	ldd	r30, Y+1	; 0x01
    3042:	fa 81       	ldd	r31, Y+2	; 0x02
    3044:	85 81       	ldd	r24, Z+5	; 0x05
    3046:	88 2f       	mov	r24, r24
    3048:	90 e0       	ldi	r25, 0x00	; 0
    304a:	8c 70       	andi	r24, 0x0C	; 12
    304c:	90 70       	andi	r25, 0x00	; 0
    304e:	88 0f       	add	r24, r24
    3050:	99 1f       	adc	r25, r25
    3052:	82 2b       	or	r24, r18
    3054:	83 2b       	or	r24, r19
    3056:	8c 93       	st	X, r24




}
    3058:	0f 90       	pop	r0
    305a:	0f 90       	pop	r0
    305c:	cf 91       	pop	r28
    305e:	df 91       	pop	r29
    3060:	08 95       	ret

00003062 <Timer1_deInit>:

/*
 * Description :
 *  Function to disable the Timer1.
 */
void Timer1_deInit(void){
    3062:	df 93       	push	r29
    3064:	cf 93       	push	r28
    3066:	cd b7       	in	r28, 0x3d	; 61
    3068:	de b7       	in	r29, 0x3e	; 62
	/* Clear Timer Register */
	TCNT1 = OCR1A =TCCR1A= TCCR1B = 0;
    306a:	4c e4       	ldi	r20, 0x4C	; 76
    306c:	50 e0       	ldi	r21, 0x00	; 0
    306e:	2a e4       	ldi	r18, 0x4A	; 74
    3070:	30 e0       	ldi	r19, 0x00	; 0
    3072:	af e4       	ldi	r26, 0x4F	; 79
    3074:	b0 e0       	ldi	r27, 0x00	; 0
    3076:	ee e4       	ldi	r30, 0x4E	; 78
    3078:	f0 e0       	ldi	r31, 0x00	; 0
    307a:	10 82       	st	Z, r1
    307c:	80 81       	ld	r24, Z
    307e:	8c 93       	st	X, r24
    3080:	8c 91       	ld	r24, X
    3082:	88 2f       	mov	r24, r24
    3084:	90 e0       	ldi	r25, 0x00	; 0
    3086:	f9 01       	movw	r30, r18
    3088:	91 83       	std	Z+1, r25	; 0x01
    308a:	80 83       	st	Z, r24
    308c:	f9 01       	movw	r30, r18
    308e:	80 81       	ld	r24, Z
    3090:	91 81       	ldd	r25, Z+1	; 0x01
    3092:	fa 01       	movw	r30, r20
    3094:	91 83       	std	Z+1, r25	; 0x01
    3096:	80 83       	st	Z, r24
	/* Disable Interrupt */
	TIMSK &= ~(1 << OCIE1A) &(~(1<<TOIE1));
    3098:	a9 e5       	ldi	r26, 0x59	; 89
    309a:	b0 e0       	ldi	r27, 0x00	; 0
    309c:	e9 e5       	ldi	r30, 0x59	; 89
    309e:	f0 e0       	ldi	r31, 0x00	; 0
    30a0:	80 81       	ld	r24, Z
    30a2:	8b 7e       	andi	r24, 0xEB	; 235
    30a4:	8c 93       	st	X, r24
}
    30a6:	cf 91       	pop	r28
    30a8:	df 91       	pop	r29
    30aa:	08 95       	ret

000030ac <Timer1_setCallBack>:
/*
 * Description :
 *  Function to set the Call Back function address.
 */
void Timer1_setCallBack(void(*a_ptr)(void)){
    30ac:	df 93       	push	r29
    30ae:	cf 93       	push	r28
    30b0:	00 d0       	rcall	.+0      	; 0x30b2 <Timer1_setCallBack+0x6>
    30b2:	cd b7       	in	r28, 0x3d	; 61
    30b4:	de b7       	in	r29, 0x3e	; 62
    30b6:	9a 83       	std	Y+2, r25	; 0x02
    30b8:	89 83       	std	Y+1, r24	; 0x01
	/* Make global variable points to same function to be called in ISR when an detection occur*/
		callBack_ptr = a_ptr;
    30ba:	89 81       	ldd	r24, Y+1	; 0x01
    30bc:	9a 81       	ldd	r25, Y+2	; 0x02
    30be:	90 93 2e 01 	sts	0x012E, r25
    30c2:	80 93 2d 01 	sts	0x012D, r24
}
    30c6:	0f 90       	pop	r0
    30c8:	0f 90       	pop	r0
    30ca:	cf 91       	pop	r28
    30cc:	df 91       	pop	r29
    30ce:	08 95       	ret

000030d0 <UART_init>:
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)

{
    30d0:	df 93       	push	r29
    30d2:	cf 93       	push	r28
    30d4:	00 d0       	rcall	.+0      	; 0x30d6 <UART_init+0x6>
    30d6:	00 d0       	rcall	.+0      	; 0x30d8 <UART_init+0x8>
    30d8:	00 d0       	rcall	.+0      	; 0x30da <UART_init+0xa>
    30da:	cd b7       	in	r28, 0x3d	; 61
    30dc:	de b7       	in	r29, 0x3e	; 62
    30de:	9c 83       	std	Y+4, r25	; 0x04
    30e0:	8b 83       	std	Y+3, r24	; 0x03
//	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
//
//	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
//	UBRRH = ubrr_value>>8;
//	UBRRL = ubrr_value;
	uint16 ubrr_value = 0;
    30e2:	1a 82       	std	Y+2, r1	; 0x02
    30e4:	19 82       	std	Y+1, r1	; 0x01
		SET_BIT(UCSRA, U2X);
    30e6:	ab e2       	ldi	r26, 0x2B	; 43
    30e8:	b0 e0       	ldi	r27, 0x00	; 0
    30ea:	eb e2       	ldi	r30, 0x2B	; 43
    30ec:	f0 e0       	ldi	r31, 0x00	; 0
    30ee:	80 81       	ld	r24, Z
    30f0:	82 60       	ori	r24, 0x02	; 2
    30f2:	8c 93       	st	X, r24
		SET_BIT(UCSRB, RXEN);
    30f4:	aa e2       	ldi	r26, 0x2A	; 42
    30f6:	b0 e0       	ldi	r27, 0x00	; 0
    30f8:	ea e2       	ldi	r30, 0x2A	; 42
    30fa:	f0 e0       	ldi	r31, 0x00	; 0
    30fc:	80 81       	ld	r24, Z
    30fe:	80 61       	ori	r24, 0x10	; 16
    3100:	8c 93       	st	X, r24
		SET_BIT(UCSRB, TXEN);
    3102:	aa e2       	ldi	r26, 0x2A	; 42
    3104:	b0 e0       	ldi	r27, 0x00	; 0
    3106:	ea e2       	ldi	r30, 0x2A	; 42
    3108:	f0 e0       	ldi	r31, 0x00	; 0
    310a:	80 81       	ld	r24, Z
    310c:	88 60       	ori	r24, 0x08	; 8
    310e:	8c 93       	st	X, r24
		ubrr_value = (uint16) ((F_CPU / (Config_Ptr->baud_rate * 8UL)) - 1);
    3110:	eb 81       	ldd	r30, Y+3	; 0x03
    3112:	fc 81       	ldd	r31, Y+4	; 0x04
    3114:	83 81       	ldd	r24, Z+3	; 0x03
    3116:	94 81       	ldd	r25, Z+4	; 0x04
    3118:	a5 81       	ldd	r26, Z+5	; 0x05
    311a:	b6 81       	ldd	r27, Z+6	; 0x06
    311c:	88 0f       	add	r24, r24
    311e:	99 1f       	adc	r25, r25
    3120:	aa 1f       	adc	r26, r26
    3122:	bb 1f       	adc	r27, r27
    3124:	88 0f       	add	r24, r24
    3126:	99 1f       	adc	r25, r25
    3128:	aa 1f       	adc	r26, r26
    312a:	bb 1f       	adc	r27, r27
    312c:	88 0f       	add	r24, r24
    312e:	99 1f       	adc	r25, r25
    3130:	aa 1f       	adc	r26, r26
    3132:	bb 1f       	adc	r27, r27
    3134:	9c 01       	movw	r18, r24
    3136:	ad 01       	movw	r20, r26
    3138:	80 e0       	ldi	r24, 0x00	; 0
    313a:	92 e1       	ldi	r25, 0x12	; 18
    313c:	aa e7       	ldi	r26, 0x7A	; 122
    313e:	b0 e0       	ldi	r27, 0x00	; 0
    3140:	bc 01       	movw	r22, r24
    3142:	cd 01       	movw	r24, r26
    3144:	0e 94 14 1a 	call	0x3428	; 0x3428 <__udivmodsi4>
    3148:	da 01       	movw	r26, r20
    314a:	c9 01       	movw	r24, r18
    314c:	01 97       	sbiw	r24, 0x01	; 1
    314e:	9a 83       	std	Y+2, r25	; 0x02
    3150:	89 83       	std	Y+1, r24	; 0x01
		UBRRH = ubrr_value >> 8;
    3152:	e0 e4       	ldi	r30, 0x40	; 64
    3154:	f0 e0       	ldi	r31, 0x00	; 0
    3156:	89 81       	ldd	r24, Y+1	; 0x01
    3158:	9a 81       	ldd	r25, Y+2	; 0x02
    315a:	89 2f       	mov	r24, r25
    315c:	99 27       	eor	r25, r25
    315e:	80 83       	st	Z, r24
		UBRRL = ubrr_value;
    3160:	e9 e2       	ldi	r30, 0x29	; 41
    3162:	f0 e0       	ldi	r31, 0x00	; 0
    3164:	89 81       	ldd	r24, Y+1	; 0x01
    3166:	80 83       	st	Z, r24
		SET_BIT(UCSRC, URSEL);
    3168:	a0 e4       	ldi	r26, 0x40	; 64
    316a:	b0 e0       	ldi	r27, 0x00	; 0
    316c:	e0 e4       	ldi	r30, 0x40	; 64
    316e:	f0 e0       	ldi	r31, 0x00	; 0
    3170:	80 81       	ld	r24, Z
    3172:	80 68       	ori	r24, 0x80	; 128
    3174:	8c 93       	st	X, r24
		switch (Config_Ptr->bit_data) {
    3176:	eb 81       	ldd	r30, Y+3	; 0x03
    3178:	fc 81       	ldd	r31, Y+4	; 0x04
    317a:	80 81       	ld	r24, Z
    317c:	28 2f       	mov	r18, r24
    317e:	30 e0       	ldi	r19, 0x00	; 0
    3180:	3e 83       	std	Y+6, r19	; 0x06
    3182:	2d 83       	std	Y+5, r18	; 0x05
    3184:	8d 81       	ldd	r24, Y+5	; 0x05
    3186:	9e 81       	ldd	r25, Y+6	; 0x06
    3188:	82 30       	cpi	r24, 0x02	; 2
    318a:	91 05       	cpc	r25, r1
    318c:	09 f4       	brne	.+2      	; 0x3190 <UART_init+0xc0>
    318e:	48 c0       	rjmp	.+144    	; 0x3220 <UART_init+0x150>
    3190:	2d 81       	ldd	r18, Y+5	; 0x05
    3192:	3e 81       	ldd	r19, Y+6	; 0x06
    3194:	23 30       	cpi	r18, 0x03	; 3
    3196:	31 05       	cpc	r19, r1
    3198:	54 f4       	brge	.+20     	; 0x31ae <UART_init+0xde>
    319a:	8d 81       	ldd	r24, Y+5	; 0x05
    319c:	9e 81       	ldd	r25, Y+6	; 0x06
    319e:	00 97       	sbiw	r24, 0x00	; 0
    31a0:	99 f0       	breq	.+38     	; 0x31c8 <UART_init+0xf8>
    31a2:	2d 81       	ldd	r18, Y+5	; 0x05
    31a4:	3e 81       	ldd	r19, Y+6	; 0x06
    31a6:	21 30       	cpi	r18, 0x01	; 1
    31a8:	31 05       	cpc	r19, r1
    31aa:	21 f1       	breq	.+72     	; 0x31f4 <UART_init+0x124>
    31ac:	7a c0       	rjmp	.+244    	; 0x32a2 <UART_init+0x1d2>
    31ae:	8d 81       	ldd	r24, Y+5	; 0x05
    31b0:	9e 81       	ldd	r25, Y+6	; 0x06
    31b2:	83 30       	cpi	r24, 0x03	; 3
    31b4:	91 05       	cpc	r25, r1
    31b6:	09 f4       	brne	.+2      	; 0x31ba <UART_init+0xea>
    31b8:	49 c0       	rjmp	.+146    	; 0x324c <UART_init+0x17c>
    31ba:	2d 81       	ldd	r18, Y+5	; 0x05
    31bc:	3e 81       	ldd	r19, Y+6	; 0x06
    31be:	27 30       	cpi	r18, 0x07	; 7
    31c0:	31 05       	cpc	r19, r1
    31c2:	09 f4       	brne	.+2      	; 0x31c6 <UART_init+0xf6>
    31c4:	59 c0       	rjmp	.+178    	; 0x3278 <UART_init+0x1a8>
    31c6:	6d c0       	rjmp	.+218    	; 0x32a2 <UART_init+0x1d2>
		case 0:
			CLEAR_BIT(UCSRC, UCSZ0);
    31c8:	a0 e4       	ldi	r26, 0x40	; 64
    31ca:	b0 e0       	ldi	r27, 0x00	; 0
    31cc:	e0 e4       	ldi	r30, 0x40	; 64
    31ce:	f0 e0       	ldi	r31, 0x00	; 0
    31d0:	80 81       	ld	r24, Z
    31d2:	8d 7f       	andi	r24, 0xFD	; 253
    31d4:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRC, UCSZ1);
    31d6:	a0 e4       	ldi	r26, 0x40	; 64
    31d8:	b0 e0       	ldi	r27, 0x00	; 0
    31da:	e0 e4       	ldi	r30, 0x40	; 64
    31dc:	f0 e0       	ldi	r31, 0x00	; 0
    31de:	80 81       	ld	r24, Z
    31e0:	8b 7f       	andi	r24, 0xFB	; 251
    31e2:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRB, UCSZ2);
    31e4:	aa e2       	ldi	r26, 0x2A	; 42
    31e6:	b0 e0       	ldi	r27, 0x00	; 0
    31e8:	ea e2       	ldi	r30, 0x2A	; 42
    31ea:	f0 e0       	ldi	r31, 0x00	; 0
    31ec:	80 81       	ld	r24, Z
    31ee:	8b 7f       	andi	r24, 0xFB	; 251
    31f0:	8c 93       	st	X, r24
    31f2:	57 c0       	rjmp	.+174    	; 0x32a2 <UART_init+0x1d2>
			break;
		case 1:
			SET_BIT(UCSRC, UCSZ0);
    31f4:	a0 e4       	ldi	r26, 0x40	; 64
    31f6:	b0 e0       	ldi	r27, 0x00	; 0
    31f8:	e0 e4       	ldi	r30, 0x40	; 64
    31fa:	f0 e0       	ldi	r31, 0x00	; 0
    31fc:	80 81       	ld	r24, Z
    31fe:	82 60       	ori	r24, 0x02	; 2
    3200:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRC, UCSZ1);
    3202:	a0 e4       	ldi	r26, 0x40	; 64
    3204:	b0 e0       	ldi	r27, 0x00	; 0
    3206:	e0 e4       	ldi	r30, 0x40	; 64
    3208:	f0 e0       	ldi	r31, 0x00	; 0
    320a:	80 81       	ld	r24, Z
    320c:	8b 7f       	andi	r24, 0xFB	; 251
    320e:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRB, UCSZ2);
    3210:	aa e2       	ldi	r26, 0x2A	; 42
    3212:	b0 e0       	ldi	r27, 0x00	; 0
    3214:	ea e2       	ldi	r30, 0x2A	; 42
    3216:	f0 e0       	ldi	r31, 0x00	; 0
    3218:	80 81       	ld	r24, Z
    321a:	8b 7f       	andi	r24, 0xFB	; 251
    321c:	8c 93       	st	X, r24
    321e:	41 c0       	rjmp	.+130    	; 0x32a2 <UART_init+0x1d2>
			break;
		case 2:
			CLEAR_BIT(UCSRC, UCSZ0);
    3220:	a0 e4       	ldi	r26, 0x40	; 64
    3222:	b0 e0       	ldi	r27, 0x00	; 0
    3224:	e0 e4       	ldi	r30, 0x40	; 64
    3226:	f0 e0       	ldi	r31, 0x00	; 0
    3228:	80 81       	ld	r24, Z
    322a:	8d 7f       	andi	r24, 0xFD	; 253
    322c:	8c 93       	st	X, r24
			SET_BIT(UCSRC, UCSZ1);
    322e:	a0 e4       	ldi	r26, 0x40	; 64
    3230:	b0 e0       	ldi	r27, 0x00	; 0
    3232:	e0 e4       	ldi	r30, 0x40	; 64
    3234:	f0 e0       	ldi	r31, 0x00	; 0
    3236:	80 81       	ld	r24, Z
    3238:	84 60       	ori	r24, 0x04	; 4
    323a:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRB, UCSZ2);
    323c:	aa e2       	ldi	r26, 0x2A	; 42
    323e:	b0 e0       	ldi	r27, 0x00	; 0
    3240:	ea e2       	ldi	r30, 0x2A	; 42
    3242:	f0 e0       	ldi	r31, 0x00	; 0
    3244:	80 81       	ld	r24, Z
    3246:	8b 7f       	andi	r24, 0xFB	; 251
    3248:	8c 93       	st	X, r24
    324a:	2b c0       	rjmp	.+86     	; 0x32a2 <UART_init+0x1d2>
			break;
		case 3:
			SET_BIT(UCSRC, UCSZ0);
    324c:	a0 e4       	ldi	r26, 0x40	; 64
    324e:	b0 e0       	ldi	r27, 0x00	; 0
    3250:	e0 e4       	ldi	r30, 0x40	; 64
    3252:	f0 e0       	ldi	r31, 0x00	; 0
    3254:	80 81       	ld	r24, Z
    3256:	82 60       	ori	r24, 0x02	; 2
    3258:	8c 93       	st	X, r24
			SET_BIT(UCSRC, UCSZ1);
    325a:	a0 e4       	ldi	r26, 0x40	; 64
    325c:	b0 e0       	ldi	r27, 0x00	; 0
    325e:	e0 e4       	ldi	r30, 0x40	; 64
    3260:	f0 e0       	ldi	r31, 0x00	; 0
    3262:	80 81       	ld	r24, Z
    3264:	84 60       	ori	r24, 0x04	; 4
    3266:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRB, UCSZ2);
    3268:	aa e2       	ldi	r26, 0x2A	; 42
    326a:	b0 e0       	ldi	r27, 0x00	; 0
    326c:	ea e2       	ldi	r30, 0x2A	; 42
    326e:	f0 e0       	ldi	r31, 0x00	; 0
    3270:	80 81       	ld	r24, Z
    3272:	8b 7f       	andi	r24, 0xFB	; 251
    3274:	8c 93       	st	X, r24
    3276:	15 c0       	rjmp	.+42     	; 0x32a2 <UART_init+0x1d2>
			break;
		case 7:
			SET_BIT(UCSRC, UCSZ0);
    3278:	a0 e4       	ldi	r26, 0x40	; 64
    327a:	b0 e0       	ldi	r27, 0x00	; 0
    327c:	e0 e4       	ldi	r30, 0x40	; 64
    327e:	f0 e0       	ldi	r31, 0x00	; 0
    3280:	80 81       	ld	r24, Z
    3282:	82 60       	ori	r24, 0x02	; 2
    3284:	8c 93       	st	X, r24
			SET_BIT(UCSRC, UCSZ1);
    3286:	a0 e4       	ldi	r26, 0x40	; 64
    3288:	b0 e0       	ldi	r27, 0x00	; 0
    328a:	e0 e4       	ldi	r30, 0x40	; 64
    328c:	f0 e0       	ldi	r31, 0x00	; 0
    328e:	80 81       	ld	r24, Z
    3290:	84 60       	ori	r24, 0x04	; 4
    3292:	8c 93       	st	X, r24
			SET_BIT(UCSRB, UCSZ2);
    3294:	aa e2       	ldi	r26, 0x2A	; 42
    3296:	b0 e0       	ldi	r27, 0x00	; 0
    3298:	ea e2       	ldi	r30, 0x2A	; 42
    329a:	f0 e0       	ldi	r31, 0x00	; 0
    329c:	80 81       	ld	r24, Z
    329e:	84 60       	ori	r24, 0x04	; 4
    32a0:	8c 93       	st	X, r24
			break;
		}
		UCSRC = (UCSRC & 0xcf) | (Config_Ptr->parity<< 4);
    32a2:	a0 e4       	ldi	r26, 0x40	; 64
    32a4:	b0 e0       	ldi	r27, 0x00	; 0
    32a6:	e0 e4       	ldi	r30, 0x40	; 64
    32a8:	f0 e0       	ldi	r31, 0x00	; 0
    32aa:	80 81       	ld	r24, Z
    32ac:	28 2f       	mov	r18, r24
    32ae:	2f 7c       	andi	r18, 0xCF	; 207
    32b0:	eb 81       	ldd	r30, Y+3	; 0x03
    32b2:	fc 81       	ldd	r31, Y+4	; 0x04
    32b4:	81 81       	ldd	r24, Z+1	; 0x01
    32b6:	88 2f       	mov	r24, r24
    32b8:	90 e0       	ldi	r25, 0x00	; 0
    32ba:	82 95       	swap	r24
    32bc:	92 95       	swap	r25
    32be:	90 7f       	andi	r25, 0xF0	; 240
    32c0:	98 27       	eor	r25, r24
    32c2:	80 7f       	andi	r24, 0xF0	; 240
    32c4:	98 27       	eor	r25, r24
    32c6:	82 2b       	or	r24, r18
    32c8:	8c 93       	st	X, r24
		if (Config_Ptr->stop_bit == ONE_STOP_BIT) {
    32ca:	eb 81       	ldd	r30, Y+3	; 0x03
    32cc:	fc 81       	ldd	r31, Y+4	; 0x04
    32ce:	82 81       	ldd	r24, Z+2	; 0x02
    32d0:	88 23       	and	r24, r24
    32d2:	41 f4       	brne	.+16     	; 0x32e4 <UART_init+0x214>
			CLEAR_BIT(UCSRC, USBS);
    32d4:	a0 e4       	ldi	r26, 0x40	; 64
    32d6:	b0 e0       	ldi	r27, 0x00	; 0
    32d8:	e0 e4       	ldi	r30, 0x40	; 64
    32da:	f0 e0       	ldi	r31, 0x00	; 0
    32dc:	80 81       	ld	r24, Z
    32de:	87 7f       	andi	r24, 0xF7	; 247
    32e0:	8c 93       	st	X, r24
    32e2:	07 c0       	rjmp	.+14     	; 0x32f2 <UART_init+0x222>
		} else {
			SET_BIT(UCSRC, USBS);
    32e4:	a0 e4       	ldi	r26, 0x40	; 64
    32e6:	b0 e0       	ldi	r27, 0x00	; 0
    32e8:	e0 e4       	ldi	r30, 0x40	; 64
    32ea:	f0 e0       	ldi	r31, 0x00	; 0
    32ec:	80 81       	ld	r24, Z
    32ee:	88 60       	ori	r24, 0x08	; 8
    32f0:	8c 93       	st	X, r24
		}

	
}
    32f2:	26 96       	adiw	r28, 0x06	; 6
    32f4:	0f b6       	in	r0, 0x3f	; 63
    32f6:	f8 94       	cli
    32f8:	de bf       	out	0x3e, r29	; 62
    32fa:	0f be       	out	0x3f, r0	; 63
    32fc:	cd bf       	out	0x3d, r28	; 61
    32fe:	cf 91       	pop	r28
    3300:	df 91       	pop	r29
    3302:	08 95       	ret

00003304 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3304:	df 93       	push	r29
    3306:	cf 93       	push	r28
    3308:	0f 92       	push	r0
    330a:	cd b7       	in	r28, 0x3d	; 61
    330c:	de b7       	in	r29, 0x3e	; 62
    330e:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3310:	eb e2       	ldi	r30, 0x2B	; 43
    3312:	f0 e0       	ldi	r31, 0x00	; 0
    3314:	80 81       	ld	r24, Z
    3316:	88 2f       	mov	r24, r24
    3318:	90 e0       	ldi	r25, 0x00	; 0
    331a:	80 72       	andi	r24, 0x20	; 32
    331c:	90 70       	andi	r25, 0x00	; 0
    331e:	00 97       	sbiw	r24, 0x00	; 0
    3320:	b9 f3       	breq	.-18     	; 0x3310 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3322:	ec e2       	ldi	r30, 0x2C	; 44
    3324:	f0 e0       	ldi	r31, 0x00	; 0
    3326:	89 81       	ldd	r24, Y+1	; 0x01
    3328:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    332a:	0f 90       	pop	r0
    332c:	cf 91       	pop	r28
    332e:	df 91       	pop	r29
    3330:	08 95       	ret

00003332 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3332:	df 93       	push	r29
    3334:	cf 93       	push	r28
    3336:	cd b7       	in	r28, 0x3d	; 61
    3338:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    333a:	eb e2       	ldi	r30, 0x2B	; 43
    333c:	f0 e0       	ldi	r31, 0x00	; 0
    333e:	80 81       	ld	r24, Z
    3340:	88 23       	and	r24, r24
    3342:	dc f7       	brge	.-10     	; 0x333a <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    3344:	ec e2       	ldi	r30, 0x2C	; 44
    3346:	f0 e0       	ldi	r31, 0x00	; 0
    3348:	80 81       	ld	r24, Z
}
    334a:	cf 91       	pop	r28
    334c:	df 91       	pop	r29
    334e:	08 95       	ret

00003350 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3350:	df 93       	push	r29
    3352:	cf 93       	push	r28
    3354:	00 d0       	rcall	.+0      	; 0x3356 <UART_sendString+0x6>
    3356:	0f 92       	push	r0
    3358:	cd b7       	in	r28, 0x3d	; 61
    335a:	de b7       	in	r29, 0x3e	; 62
    335c:	9b 83       	std	Y+3, r25	; 0x03
    335e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3360:	19 82       	std	Y+1, r1	; 0x01
    3362:	0e c0       	rjmp	.+28     	; 0x3380 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3364:	89 81       	ldd	r24, Y+1	; 0x01
    3366:	28 2f       	mov	r18, r24
    3368:	30 e0       	ldi	r19, 0x00	; 0
    336a:	8a 81       	ldd	r24, Y+2	; 0x02
    336c:	9b 81       	ldd	r25, Y+3	; 0x03
    336e:	fc 01       	movw	r30, r24
    3370:	e2 0f       	add	r30, r18
    3372:	f3 1f       	adc	r31, r19
    3374:	80 81       	ld	r24, Z
    3376:	0e 94 82 19 	call	0x3304	; 0x3304 <UART_sendByte>
		i++;
    337a:	89 81       	ldd	r24, Y+1	; 0x01
    337c:	8f 5f       	subi	r24, 0xFF	; 255
    337e:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3380:	89 81       	ldd	r24, Y+1	; 0x01
    3382:	28 2f       	mov	r18, r24
    3384:	30 e0       	ldi	r19, 0x00	; 0
    3386:	8a 81       	ldd	r24, Y+2	; 0x02
    3388:	9b 81       	ldd	r25, Y+3	; 0x03
    338a:	fc 01       	movw	r30, r24
    338c:	e2 0f       	add	r30, r18
    338e:	f3 1f       	adc	r31, r19
    3390:	80 81       	ld	r24, Z
    3392:	88 23       	and	r24, r24
    3394:	39 f7       	brne	.-50     	; 0x3364 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    3396:	0f 90       	pop	r0
    3398:	0f 90       	pop	r0
    339a:	0f 90       	pop	r0
    339c:	cf 91       	pop	r28
    339e:	df 91       	pop	r29
    33a0:	08 95       	ret

000033a2 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    33a2:	0f 93       	push	r16
    33a4:	1f 93       	push	r17
    33a6:	df 93       	push	r29
    33a8:	cf 93       	push	r28
    33aa:	00 d0       	rcall	.+0      	; 0x33ac <UART_receiveString+0xa>
    33ac:	0f 92       	push	r0
    33ae:	cd b7       	in	r28, 0x3d	; 61
    33b0:	de b7       	in	r29, 0x3e	; 62
    33b2:	9b 83       	std	Y+3, r25	; 0x03
    33b4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    33b6:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    33b8:	89 81       	ldd	r24, Y+1	; 0x01
    33ba:	28 2f       	mov	r18, r24
    33bc:	30 e0       	ldi	r19, 0x00	; 0
    33be:	8a 81       	ldd	r24, Y+2	; 0x02
    33c0:	9b 81       	ldd	r25, Y+3	; 0x03
    33c2:	8c 01       	movw	r16, r24
    33c4:	02 0f       	add	r16, r18
    33c6:	13 1f       	adc	r17, r19
    33c8:	0e 94 99 19 	call	0x3332	; 0x3332 <UART_recieveByte>
    33cc:	f8 01       	movw	r30, r16
    33ce:	80 83       	st	Z, r24
    33d0:	0f c0       	rjmp	.+30     	; 0x33f0 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    33d2:	89 81       	ldd	r24, Y+1	; 0x01
    33d4:	8f 5f       	subi	r24, 0xFF	; 255
    33d6:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    33d8:	89 81       	ldd	r24, Y+1	; 0x01
    33da:	28 2f       	mov	r18, r24
    33dc:	30 e0       	ldi	r19, 0x00	; 0
    33de:	8a 81       	ldd	r24, Y+2	; 0x02
    33e0:	9b 81       	ldd	r25, Y+3	; 0x03
    33e2:	8c 01       	movw	r16, r24
    33e4:	02 0f       	add	r16, r18
    33e6:	13 1f       	adc	r17, r19
    33e8:	0e 94 99 19 	call	0x3332	; 0x3332 <UART_recieveByte>
    33ec:	f8 01       	movw	r30, r16
    33ee:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    33f0:	89 81       	ldd	r24, Y+1	; 0x01
    33f2:	28 2f       	mov	r18, r24
    33f4:	30 e0       	ldi	r19, 0x00	; 0
    33f6:	8a 81       	ldd	r24, Y+2	; 0x02
    33f8:	9b 81       	ldd	r25, Y+3	; 0x03
    33fa:	fc 01       	movw	r30, r24
    33fc:	e2 0f       	add	r30, r18
    33fe:	f3 1f       	adc	r31, r19
    3400:	80 81       	ld	r24, Z
    3402:	83 32       	cpi	r24, 0x23	; 35
    3404:	31 f7       	brne	.-52     	; 0x33d2 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3406:	89 81       	ldd	r24, Y+1	; 0x01
    3408:	28 2f       	mov	r18, r24
    340a:	30 e0       	ldi	r19, 0x00	; 0
    340c:	8a 81       	ldd	r24, Y+2	; 0x02
    340e:	9b 81       	ldd	r25, Y+3	; 0x03
    3410:	fc 01       	movw	r30, r24
    3412:	e2 0f       	add	r30, r18
    3414:	f3 1f       	adc	r31, r19
    3416:	10 82       	st	Z, r1
}
    3418:	0f 90       	pop	r0
    341a:	0f 90       	pop	r0
    341c:	0f 90       	pop	r0
    341e:	cf 91       	pop	r28
    3420:	df 91       	pop	r29
    3422:	1f 91       	pop	r17
    3424:	0f 91       	pop	r16
    3426:	08 95       	ret

00003428 <__udivmodsi4>:
    3428:	a1 e2       	ldi	r26, 0x21	; 33
    342a:	1a 2e       	mov	r1, r26
    342c:	aa 1b       	sub	r26, r26
    342e:	bb 1b       	sub	r27, r27
    3430:	fd 01       	movw	r30, r26
    3432:	0d c0       	rjmp	.+26     	; 0x344e <__udivmodsi4_ep>

00003434 <__udivmodsi4_loop>:
    3434:	aa 1f       	adc	r26, r26
    3436:	bb 1f       	adc	r27, r27
    3438:	ee 1f       	adc	r30, r30
    343a:	ff 1f       	adc	r31, r31
    343c:	a2 17       	cp	r26, r18
    343e:	b3 07       	cpc	r27, r19
    3440:	e4 07       	cpc	r30, r20
    3442:	f5 07       	cpc	r31, r21
    3444:	20 f0       	brcs	.+8      	; 0x344e <__udivmodsi4_ep>
    3446:	a2 1b       	sub	r26, r18
    3448:	b3 0b       	sbc	r27, r19
    344a:	e4 0b       	sbc	r30, r20
    344c:	f5 0b       	sbc	r31, r21

0000344e <__udivmodsi4_ep>:
    344e:	66 1f       	adc	r22, r22
    3450:	77 1f       	adc	r23, r23
    3452:	88 1f       	adc	r24, r24
    3454:	99 1f       	adc	r25, r25
    3456:	1a 94       	dec	r1
    3458:	69 f7       	brne	.-38     	; 0x3434 <__udivmodsi4_loop>
    345a:	60 95       	com	r22
    345c:	70 95       	com	r23
    345e:	80 95       	com	r24
    3460:	90 95       	com	r25
    3462:	9b 01       	movw	r18, r22
    3464:	ac 01       	movw	r20, r24
    3466:	bd 01       	movw	r22, r26
    3468:	cf 01       	movw	r24, r30
    346a:	08 95       	ret

0000346c <__prologue_saves__>:
    346c:	2f 92       	push	r2
    346e:	3f 92       	push	r3
    3470:	4f 92       	push	r4
    3472:	5f 92       	push	r5
    3474:	6f 92       	push	r6
    3476:	7f 92       	push	r7
    3478:	8f 92       	push	r8
    347a:	9f 92       	push	r9
    347c:	af 92       	push	r10
    347e:	bf 92       	push	r11
    3480:	cf 92       	push	r12
    3482:	df 92       	push	r13
    3484:	ef 92       	push	r14
    3486:	ff 92       	push	r15
    3488:	0f 93       	push	r16
    348a:	1f 93       	push	r17
    348c:	cf 93       	push	r28
    348e:	df 93       	push	r29
    3490:	cd b7       	in	r28, 0x3d	; 61
    3492:	de b7       	in	r29, 0x3e	; 62
    3494:	ca 1b       	sub	r28, r26
    3496:	db 0b       	sbc	r29, r27
    3498:	0f b6       	in	r0, 0x3f	; 63
    349a:	f8 94       	cli
    349c:	de bf       	out	0x3e, r29	; 62
    349e:	0f be       	out	0x3f, r0	; 63
    34a0:	cd bf       	out	0x3d, r28	; 61
    34a2:	09 94       	ijmp

000034a4 <__epilogue_restores__>:
    34a4:	2a 88       	ldd	r2, Y+18	; 0x12
    34a6:	39 88       	ldd	r3, Y+17	; 0x11
    34a8:	48 88       	ldd	r4, Y+16	; 0x10
    34aa:	5f 84       	ldd	r5, Y+15	; 0x0f
    34ac:	6e 84       	ldd	r6, Y+14	; 0x0e
    34ae:	7d 84       	ldd	r7, Y+13	; 0x0d
    34b0:	8c 84       	ldd	r8, Y+12	; 0x0c
    34b2:	9b 84       	ldd	r9, Y+11	; 0x0b
    34b4:	aa 84       	ldd	r10, Y+10	; 0x0a
    34b6:	b9 84       	ldd	r11, Y+9	; 0x09
    34b8:	c8 84       	ldd	r12, Y+8	; 0x08
    34ba:	df 80       	ldd	r13, Y+7	; 0x07
    34bc:	ee 80       	ldd	r14, Y+6	; 0x06
    34be:	fd 80       	ldd	r15, Y+5	; 0x05
    34c0:	0c 81       	ldd	r16, Y+4	; 0x04
    34c2:	1b 81       	ldd	r17, Y+3	; 0x03
    34c4:	aa 81       	ldd	r26, Y+2	; 0x02
    34c6:	b9 81       	ldd	r27, Y+1	; 0x01
    34c8:	ce 0f       	add	r28, r30
    34ca:	d1 1d       	adc	r29, r1
    34cc:	0f b6       	in	r0, 0x3f	; 63
    34ce:	f8 94       	cli
    34d0:	de bf       	out	0x3e, r29	; 62
    34d2:	0f be       	out	0x3f, r0	; 63
    34d4:	cd bf       	out	0x3d, r28	; 61
    34d6:	ed 01       	movw	r28, r26
    34d8:	08 95       	ret

000034da <itoa>:
    34da:	fb 01       	movw	r30, r22
    34dc:	9f 01       	movw	r18, r30
    34de:	e8 94       	clt
    34e0:	42 30       	cpi	r20, 0x02	; 2
    34e2:	c4 f0       	brlt	.+48     	; 0x3514 <itoa+0x3a>
    34e4:	45 32       	cpi	r20, 0x25	; 37
    34e6:	b4 f4       	brge	.+44     	; 0x3514 <itoa+0x3a>
    34e8:	4a 30       	cpi	r20, 0x0A	; 10
    34ea:	29 f4       	brne	.+10     	; 0x34f6 <itoa+0x1c>
    34ec:	97 fb       	bst	r25, 7
    34ee:	1e f4       	brtc	.+6      	; 0x34f6 <itoa+0x1c>
    34f0:	90 95       	com	r25
    34f2:	81 95       	neg	r24
    34f4:	9f 4f       	sbci	r25, 0xFF	; 255
    34f6:	64 2f       	mov	r22, r20
    34f8:	77 27       	eor	r23, r23
    34fa:	0e 94 9e 1a 	call	0x353c	; 0x353c <__udivmodhi4>
    34fe:	80 5d       	subi	r24, 0xD0	; 208
    3500:	8a 33       	cpi	r24, 0x3A	; 58
    3502:	0c f0       	brlt	.+2      	; 0x3506 <itoa+0x2c>
    3504:	89 5d       	subi	r24, 0xD9	; 217
    3506:	81 93       	st	Z+, r24
    3508:	cb 01       	movw	r24, r22
    350a:	00 97       	sbiw	r24, 0x00	; 0
    350c:	a1 f7       	brne	.-24     	; 0x34f6 <itoa+0x1c>
    350e:	16 f4       	brtc	.+4      	; 0x3514 <itoa+0x3a>
    3510:	5d e2       	ldi	r21, 0x2D	; 45
    3512:	51 93       	st	Z+, r21
    3514:	10 82       	st	Z, r1
    3516:	c9 01       	movw	r24, r18
    3518:	0c 94 8e 1a 	jmp	0x351c	; 0x351c <strrev>

0000351c <strrev>:
    351c:	dc 01       	movw	r26, r24
    351e:	fc 01       	movw	r30, r24
    3520:	67 2f       	mov	r22, r23
    3522:	71 91       	ld	r23, Z+
    3524:	77 23       	and	r23, r23
    3526:	e1 f7       	brne	.-8      	; 0x3520 <strrev+0x4>
    3528:	32 97       	sbiw	r30, 0x02	; 2
    352a:	04 c0       	rjmp	.+8      	; 0x3534 <strrev+0x18>
    352c:	7c 91       	ld	r23, X
    352e:	6d 93       	st	X+, r22
    3530:	70 83       	st	Z, r23
    3532:	62 91       	ld	r22, -Z
    3534:	ae 17       	cp	r26, r30
    3536:	bf 07       	cpc	r27, r31
    3538:	c8 f3       	brcs	.-14     	; 0x352c <strrev+0x10>
    353a:	08 95       	ret

0000353c <__udivmodhi4>:
    353c:	aa 1b       	sub	r26, r26
    353e:	bb 1b       	sub	r27, r27
    3540:	51 e1       	ldi	r21, 0x11	; 17
    3542:	07 c0       	rjmp	.+14     	; 0x3552 <__udivmodhi4_ep>

00003544 <__udivmodhi4_loop>:
    3544:	aa 1f       	adc	r26, r26
    3546:	bb 1f       	adc	r27, r27
    3548:	a6 17       	cp	r26, r22
    354a:	b7 07       	cpc	r27, r23
    354c:	10 f0       	brcs	.+4      	; 0x3552 <__udivmodhi4_ep>
    354e:	a6 1b       	sub	r26, r22
    3550:	b7 0b       	sbc	r27, r23

00003552 <__udivmodhi4_ep>:
    3552:	88 1f       	adc	r24, r24
    3554:	99 1f       	adc	r25, r25
    3556:	5a 95       	dec	r21
    3558:	a9 f7       	brne	.-22     	; 0x3544 <__udivmodhi4_loop>
    355a:	80 95       	com	r24
    355c:	90 95       	com	r25
    355e:	bc 01       	movw	r22, r24
    3560:	cd 01       	movw	r24, r26
    3562:	08 95       	ret

00003564 <_exit>:
    3564:	f8 94       	cli

00003566 <__stop_program>:
    3566:	ff cf       	rjmp	.-2      	; 0x3566 <__stop_program>
